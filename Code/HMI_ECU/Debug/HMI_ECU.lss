
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00800060  00003c02  00003c96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008001a4  008001a4  00003dda  2**0
                  ALLOC
  3 .stab         000033f0  00000000  00000000  00003ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011c1  00000000  00000000  000071cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000838d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000084cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000863d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a286  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b171  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bf20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c30d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cadb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3a       	cpi	r26, 0xAF	; 175
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <main>
      8a:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 83 1d 	jmp	0x3b06	; 0x3b06 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e9       	ldi	r26, 0x90	; 144
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8f 1d 	jmp	0x3b1e	; 0x3b1e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ab 1d 	jmp	0x3b56	; 0x3b56 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8f 1d 	jmp	0x3b1e	; 0x3b1e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ab 1d 	jmp	0x3b56	; 0x3b56 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 83 1d 	jmp	0x3b06	; 0x3b06 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e9       	ldi	r24, 0x90	; 144
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8f 1d 	jmp	0x3b1e	; 0x3b1e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ab 1d 	jmp	0x3b56	; 0x3b56 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8f 1d 	jmp	0x3b1e	; 0x3b1e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ab 1d 	jmp	0x3b56	; 0x3b56 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8f 1d 	jmp	0x3b1e	; 0x3b1e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ab 1d 	jmp	0x3b56	; 0x3b56 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 93 1d 	jmp	0x3b26	; 0x3b26 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 af 1d 	jmp	0x3b5e	; 0x3b5e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <checkNumber>:
/* Function Name : checkNumber
 * Description : checks if number is from 0 to 9 or not
 * Parameters : num.
 * Return : uint8 value.
 */
uint8 checkNumber(uint8 num){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <checkNumber+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value;
	value = (num >= 0 && num <= 9);
     b52:	19 82       	std	Y+1, r1	; 0x01
     b54:	8a 81       	ldd	r24, Y+2	; 0x02
     b56:	8a 30       	cpi	r24, 0x0A	; 10
     b58:	10 f4       	brcc	.+4      	; 0xb5e <checkNumber+0x18>
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	89 83       	std	Y+1, r24	; 0x01
	return value;
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
}
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	cf 91       	pop	r28
     b66:	df 91       	pop	r29
     b68:	08 95       	ret

00000b6a <recievePassword>:

void recievePassword(void){
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	c8 54       	subi	r28, 0x48	; 72
     b78:	d0 40       	sbci	r29, 0x00	; 0
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61

	uint8 counter = 0;
     b84:	fe 01       	movw	r30, r28
     b86:	e8 5b       	subi	r30, 0xB8	; 184
     b88:	ff 4f       	sbci	r31, 0xFF	; 255
     b8a:	10 82       	st	Z, r1

	uint8 pressedKey;

	LCD_clearScreen();
     b8c:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "plz enter pass:");
     b90:	20 e6       	ldi	r18, 0x60	; 96
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	a9 01       	movw	r20, r18
     b9a:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "pass is 5 digits");
     b9e:	20 e7       	ldi	r18, 0x70	; 112
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	a9 01       	movw	r20, r18
     ba8:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
     bac:	fe 01       	movw	r30, r28
     bae:	ed 5b       	subi	r30, 0xBD	; 189
     bb0:	ff 4f       	sbci	r31, 0xFF	; 255
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	aa e7       	ldi	r26, 0x7A	; 122
     bb8:	b4 e4       	ldi	r27, 0x44	; 68
     bba:	80 83       	st	Z, r24
     bbc:	91 83       	std	Z+1, r25	; 0x01
     bbe:	a2 83       	std	Z+2, r26	; 0x02
     bc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc2:	8e 01       	movw	r16, r28
     bc4:	01 5c       	subi	r16, 0xC1	; 193
     bc6:	1f 4f       	sbci	r17, 0xFF	; 255
     bc8:	fe 01       	movw	r30, r28
     bca:	ed 5b       	subi	r30, 0xBD	; 189
     bcc:	ff 4f       	sbci	r31, 0xFF	; 255
     bce:	60 81       	ld	r22, Z
     bd0:	71 81       	ldd	r23, Z+1	; 0x01
     bd2:	82 81       	ldd	r24, Z+2	; 0x02
     bd4:	93 81       	ldd	r25, Z+3	; 0x03
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	4a ef       	ldi	r20, 0xFA	; 250
     bdc:	54 e4       	ldi	r21, 0x44	; 68
     bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	f8 01       	movw	r30, r16
     be8:	80 83       	st	Z, r24
     bea:	91 83       	std	Z+1, r25	; 0x01
     bec:	a2 83       	std	Z+2, r26	; 0x02
     bee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bf0:	fe 01       	movw	r30, r28
     bf2:	ff 96       	adiw	r30, 0x3f	; 63
     bf4:	60 81       	ld	r22, Z
     bf6:	71 81       	ldd	r23, Z+1	; 0x01
     bf8:	82 81       	ldd	r24, Z+2	; 0x02
     bfa:	93 81       	ldd	r25, Z+3	; 0x03
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e8       	ldi	r20, 0x80	; 128
     c02:	5f e3       	ldi	r21, 0x3F	; 63
     c04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c08:	88 23       	and	r24, r24
     c0a:	2c f4       	brge	.+10     	; 0xc16 <recievePassword+0xac>
		__ticks = 1;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	9e af       	std	Y+62, r25	; 0x3e
     c12:	8d af       	std	Y+61, r24	; 0x3d
     c14:	46 c0       	rjmp	.+140    	; 0xca2 <recievePassword+0x138>
	else if (__tmp > 65535)
     c16:	fe 01       	movw	r30, r28
     c18:	ff 96       	adiw	r30, 0x3f	; 63
     c1a:	60 81       	ld	r22, Z
     c1c:	71 81       	ldd	r23, Z+1	; 0x01
     c1e:	82 81       	ldd	r24, Z+2	; 0x02
     c20:	93 81       	ldd	r25, Z+3	; 0x03
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	3f ef       	ldi	r19, 0xFF	; 255
     c26:	4f e7       	ldi	r20, 0x7F	; 127
     c28:	57 e4       	ldi	r21, 0x47	; 71
     c2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c2e:	18 16       	cp	r1, r24
     c30:	64 f5       	brge	.+88     	; 0xc8a <recievePassword+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c32:	fe 01       	movw	r30, r28
     c34:	ed 5b       	subi	r30, 0xBD	; 189
     c36:	ff 4f       	sbci	r31, 0xFF	; 255
     c38:	60 81       	ld	r22, Z
     c3a:	71 81       	ldd	r23, Z+1	; 0x01
     c3c:	82 81       	ldd	r24, Z+2	; 0x02
     c3e:	93 81       	ldd	r25, Z+3	; 0x03
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	40 e2       	ldi	r20, 0x20	; 32
     c46:	51 e4       	ldi	r21, 0x41	; 65
     c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c4c:	dc 01       	movw	r26, r24
     c4e:	cb 01       	movw	r24, r22
     c50:	bc 01       	movw	r22, r24
     c52:	cd 01       	movw	r24, r26
     c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	9e af       	std	Y+62, r25	; 0x3e
     c5e:	8d af       	std	Y+61, r24	; 0x3d
     c60:	0f c0       	rjmp	.+30     	; 0xc80 <recievePassword+0x116>
     c62:	88 ec       	ldi	r24, 0xC8	; 200
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	9c af       	std	Y+60, r25	; 0x3c
     c68:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c6a:	8b ad       	ldd	r24, Y+59	; 0x3b
     c6c:	9c ad       	ldd	r25, Y+60	; 0x3c
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	f1 f7       	brne	.-4      	; 0xc6e <recievePassword+0x104>
     c72:	9c af       	std	Y+60, r25	; 0x3c
     c74:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c76:	8d ad       	ldd	r24, Y+61	; 0x3d
     c78:	9e ad       	ldd	r25, Y+62	; 0x3e
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	9e af       	std	Y+62, r25	; 0x3e
     c7e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c80:	8d ad       	ldd	r24, Y+61	; 0x3d
     c82:	9e ad       	ldd	r25, Y+62	; 0x3e
     c84:	00 97       	sbiw	r24, 0x00	; 0
     c86:	69 f7       	brne	.-38     	; 0xc62 <recievePassword+0xf8>
     c88:	16 c0       	rjmp	.+44     	; 0xcb6 <recievePassword+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c8a:	fe 01       	movw	r30, r28
     c8c:	ff 96       	adiw	r30, 0x3f	; 63
     c8e:	60 81       	ld	r22, Z
     c90:	71 81       	ldd	r23, Z+1	; 0x01
     c92:	82 81       	ldd	r24, Z+2	; 0x02
     c94:	93 81       	ldd	r25, Z+3	; 0x03
     c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c9a:	dc 01       	movw	r26, r24
     c9c:	cb 01       	movw	r24, r22
     c9e:	9e af       	std	Y+62, r25	; 0x3e
     ca0:	8d af       	std	Y+61, r24	; 0x3d
     ca2:	8d ad       	ldd	r24, Y+61	; 0x3d
     ca4:	9e ad       	ldd	r25, Y+62	; 0x3e
     ca6:	9a af       	std	Y+58, r25	; 0x3a
     ca8:	89 af       	std	Y+57, r24	; 0x39
     caa:	89 ad       	ldd	r24, Y+57	; 0x39
     cac:	9a ad       	ldd	r25, Y+58	; 0x3a
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	f1 f7       	brne	.-4      	; 0xcae <recievePassword+0x144>
     cb2:	9a af       	std	Y+58, r25	; 0x3a
     cb4:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1000);

	LCD_clearScreen();
     cb6:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_clearScreen>

	LCD_displayStringRowColumn(0, 0, "plz enter pass:");
     cba:	20 e6       	ldi	r18, 0x60	; 96
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	a9 01       	movw	r20, r18
     cc4:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>

	LCD_moveCursor(1, 0);
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	0e 94 cc 1b 	call	0x3798	; 0x3798 <LCD_moveCursor>
     cd0:	92 c0       	rjmp	.+292    	; 0xdf6 <recievePassword+0x28c>

	while(counter < 5){

		pressedKey = KEYPAD_getPressedKey();
     cd2:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <KEYPAD_getPressedKey>
     cd6:	fe 01       	movw	r30, r28
     cd8:	e9 5b       	subi	r30, 0xB9	; 185
     cda:	ff 4f       	sbci	r31, 0xFF	; 255
     cdc:	80 83       	st	Z, r24

		if(checkNumber(pressedKey)){
     cde:	fe 01       	movw	r30, r28
     ce0:	e9 5b       	subi	r30, 0xB9	; 185
     ce2:	ff 4f       	sbci	r31, 0xFF	; 255
     ce4:	80 81       	ld	r24, Z
     ce6:	0e 94 a3 05 	call	0xb46	; 0xb46 <checkNumber>
     cea:	88 23       	and	r24, r24
     cec:	91 f0       	breq	.+36     	; 0xd12 <recievePassword+0x1a8>

			LCD_displayCharacter('*');
     cee:	8a e2       	ldi	r24, 0x2A	; 42
     cf0:	0e 94 b4 19 	call	0x3368	; 0x3368 <LCD_displayCharacter>

			UART_sendByte(pressedKey);
     cf4:	fe 01       	movw	r30, r28
     cf6:	e9 5b       	subi	r30, 0xB9	; 185
     cf8:	ff 4f       	sbci	r31, 0xFF	; 255
     cfa:	80 81       	ld	r24, Z
     cfc:	0e 94 ce 1c 	call	0x399c	; 0x399c <UART_sendByte>

			counter++;
     d00:	de 01       	movw	r26, r28
     d02:	a8 5b       	subi	r26, 0xB8	; 184
     d04:	bf 4f       	sbci	r27, 0xFF	; 255
     d06:	fe 01       	movw	r30, r28
     d08:	e8 5b       	subi	r30, 0xB8	; 184
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	80 81       	ld	r24, Z
     d0e:	8f 5f       	subi	r24, 0xFF	; 255
     d10:	8c 93       	st	X, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	aa ef       	ldi	r26, 0xFA	; 250
     d18:	b3 e4       	ldi	r27, 0x43	; 67
     d1a:	8d ab       	std	Y+53, r24	; 0x35
     d1c:	9e ab       	std	Y+54, r25	; 0x36
     d1e:	af ab       	std	Y+55, r26	; 0x37
     d20:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d22:	6d a9       	ldd	r22, Y+53	; 0x35
     d24:	7e a9       	ldd	r23, Y+54	; 0x36
     d26:	8f a9       	ldd	r24, Y+55	; 0x37
     d28:	98 ad       	ldd	r25, Y+56	; 0x38
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	4a ef       	ldi	r20, 0xFA	; 250
     d30:	54 e4       	ldi	r21, 0x44	; 68
     d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	89 ab       	std	Y+49, r24	; 0x31
     d3c:	9a ab       	std	Y+50, r25	; 0x32
     d3e:	ab ab       	std	Y+51, r26	; 0x33
     d40:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d42:	69 a9       	ldd	r22, Y+49	; 0x31
     d44:	7a a9       	ldd	r23, Y+50	; 0x32
     d46:	8b a9       	ldd	r24, Y+51	; 0x33
     d48:	9c a9       	ldd	r25, Y+52	; 0x34
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e8       	ldi	r20, 0x80	; 128
     d50:	5f e3       	ldi	r21, 0x3F	; 63
     d52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d56:	88 23       	and	r24, r24
     d58:	2c f4       	brge	.+10     	; 0xd64 <recievePassword+0x1fa>
		__ticks = 1;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	98 ab       	std	Y+48, r25	; 0x30
     d60:	8f a7       	std	Y+47, r24	; 0x2f
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <recievePassword+0x278>
	else if (__tmp > 65535)
     d64:	69 a9       	ldd	r22, Y+49	; 0x31
     d66:	7a a9       	ldd	r23, Y+50	; 0x32
     d68:	8b a9       	ldd	r24, Y+51	; 0x33
     d6a:	9c a9       	ldd	r25, Y+52	; 0x34
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	3f ef       	ldi	r19, 0xFF	; 255
     d70:	4f e7       	ldi	r20, 0x7F	; 127
     d72:	57 e4       	ldi	r21, 0x47	; 71
     d74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d78:	18 16       	cp	r1, r24
     d7a:	4c f5       	brge	.+82     	; 0xdce <recievePassword+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d7c:	6d a9       	ldd	r22, Y+53	; 0x35
     d7e:	7e a9       	ldd	r23, Y+54	; 0x36
     d80:	8f a9       	ldd	r24, Y+55	; 0x37
     d82:	98 ad       	ldd	r25, Y+56	; 0x38
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e2       	ldi	r20, 0x20	; 32
     d8a:	51 e4       	ldi	r21, 0x41	; 65
     d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	bc 01       	movw	r22, r24
     d96:	cd 01       	movw	r24, r26
     d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	98 ab       	std	Y+48, r25	; 0x30
     da2:	8f a7       	std	Y+47, r24	; 0x2f
     da4:	0f c0       	rjmp	.+30     	; 0xdc4 <recievePassword+0x25a>
     da6:	88 ec       	ldi	r24, 0xC8	; 200
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	9e a7       	std	Y+46, r25	; 0x2e
     dac:	8d a7       	std	Y+45, r24	; 0x2d
     dae:	8d a5       	ldd	r24, Y+45	; 0x2d
     db0:	9e a5       	ldd	r25, Y+46	; 0x2e
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <recievePassword+0x248>
     db6:	9e a7       	std	Y+46, r25	; 0x2e
     db8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dba:	8f a5       	ldd	r24, Y+47	; 0x2f
     dbc:	98 a9       	ldd	r25, Y+48	; 0x30
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	98 ab       	std	Y+48, r25	; 0x30
     dc2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc4:	8f a5       	ldd	r24, Y+47	; 0x2f
     dc6:	98 a9       	ldd	r25, Y+48	; 0x30
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	69 f7       	brne	.-38     	; 0xda6 <recievePassword+0x23c>
     dcc:	14 c0       	rjmp	.+40     	; 0xdf6 <recievePassword+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dce:	69 a9       	ldd	r22, Y+49	; 0x31
     dd0:	7a a9       	ldd	r23, Y+50	; 0x32
     dd2:	8b a9       	ldd	r24, Y+51	; 0x33
     dd4:	9c a9       	ldd	r25, Y+52	; 0x34
     dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	98 ab       	std	Y+48, r25	; 0x30
     de0:	8f a7       	std	Y+47, r24	; 0x2f
     de2:	8f a5       	ldd	r24, Y+47	; 0x2f
     de4:	98 a9       	ldd	r25, Y+48	; 0x30
     de6:	9c a7       	std	Y+44, r25	; 0x2c
     de8:	8b a7       	std	Y+43, r24	; 0x2b
     dea:	8b a5       	ldd	r24, Y+43	; 0x2b
     dec:	9c a5       	ldd	r25, Y+44	; 0x2c
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <recievePassword+0x284>
     df2:	9c a7       	std	Y+44, r25	; 0x2c
     df4:	8b a7       	std	Y+43, r24	; 0x2b

	LCD_displayStringRowColumn(0, 0, "plz enter pass:");

	LCD_moveCursor(1, 0);

	while(counter < 5){
     df6:	fe 01       	movw	r30, r28
     df8:	e8 5b       	subi	r30, 0xB8	; 184
     dfa:	ff 4f       	sbci	r31, 0xFF	; 255
     dfc:	80 81       	ld	r24, Z
     dfe:	85 30       	cpi	r24, 0x05	; 5
     e00:	08 f4       	brcc	.+2      	; 0xe04 <recievePassword+0x29a>
     e02:	67 cf       	rjmp	.-306    	; 0xcd2 <recievePassword+0x168>
			counter++;
		}
		_delay_ms(500);
	}

	pressedKey = KEYPAD_getPressedKey();
     e04:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <KEYPAD_getPressedKey>
     e08:	fe 01       	movw	r30, r28
     e0a:	e9 5b       	subi	r30, 0xB9	; 185
     e0c:	ff 4f       	sbci	r31, 0xFF	; 255
     e0e:	80 83       	st	Z, r24
     e10:	07 c0       	rjmp	.+14     	; 0xe20 <recievePassword+0x2b6>

	while(KEYPAD_getPressedKey() != ENTER){

		LCD_displayStringRowColumn(0, 0, "Press '='");
     e12:	21 e8       	ldi	r18, 0x81	; 129
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	a9 01       	movw	r20, r18
     e1c:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
		_delay_ms(500);
	}

	pressedKey = KEYPAD_getPressedKey();

	while(KEYPAD_getPressedKey() != ENTER){
     e20:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <KEYPAD_getPressedKey>
     e24:	8d 33       	cpi	r24, 0x3D	; 61
     e26:	a9 f7       	brne	.-22     	; 0xe12 <recievePassword+0x2a8>
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	aa ef       	ldi	r26, 0xFA	; 250
     e2e:	b3 e4       	ldi	r27, 0x43	; 67
     e30:	8f a3       	std	Y+39, r24	; 0x27
     e32:	98 a7       	std	Y+40, r25	; 0x28
     e34:	a9 a7       	std	Y+41, r26	; 0x29
     e36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e38:	6f a1       	ldd	r22, Y+39	; 0x27
     e3a:	78 a5       	ldd	r23, Y+40	; 0x28
     e3c:	89 a5       	ldd	r24, Y+41	; 0x29
     e3e:	9a a5       	ldd	r25, Y+42	; 0x2a
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	4a ef       	ldi	r20, 0xFA	; 250
     e46:	54 e4       	ldi	r21, 0x44	; 68
     e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	8b a3       	std	Y+35, r24	; 0x23
     e52:	9c a3       	std	Y+36, r25	; 0x24
     e54:	ad a3       	std	Y+37, r26	; 0x25
     e56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e58:	6b a1       	ldd	r22, Y+35	; 0x23
     e5a:	7c a1       	ldd	r23, Y+36	; 0x24
     e5c:	8d a1       	ldd	r24, Y+37	; 0x25
     e5e:	9e a1       	ldd	r25, Y+38	; 0x26
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	40 e8       	ldi	r20, 0x80	; 128
     e66:	5f e3       	ldi	r21, 0x3F	; 63
     e68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e6c:	88 23       	and	r24, r24
     e6e:	2c f4       	brge	.+10     	; 0xe7a <recievePassword+0x310>
		__ticks = 1;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	9a a3       	std	Y+34, r25	; 0x22
     e76:	89 a3       	std	Y+33, r24	; 0x21
     e78:	3f c0       	rjmp	.+126    	; 0xef8 <recievePassword+0x38e>
	else if (__tmp > 65535)
     e7a:	6b a1       	ldd	r22, Y+35	; 0x23
     e7c:	7c a1       	ldd	r23, Y+36	; 0x24
     e7e:	8d a1       	ldd	r24, Y+37	; 0x25
     e80:	9e a1       	ldd	r25, Y+38	; 0x26
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	3f ef       	ldi	r19, 0xFF	; 255
     e86:	4f e7       	ldi	r20, 0x7F	; 127
     e88:	57 e4       	ldi	r21, 0x47	; 71
     e8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e8e:	18 16       	cp	r1, r24
     e90:	4c f5       	brge	.+82     	; 0xee4 <recievePassword+0x37a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e92:	6f a1       	ldd	r22, Y+39	; 0x27
     e94:	78 a5       	ldd	r23, Y+40	; 0x28
     e96:	89 a5       	ldd	r24, Y+41	; 0x29
     e98:	9a a5       	ldd	r25, Y+42	; 0x2a
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e2       	ldi	r20, 0x20	; 32
     ea0:	51 e4       	ldi	r21, 0x41	; 65
     ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	bc 01       	movw	r22, r24
     eac:	cd 01       	movw	r24, r26
     eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	9a a3       	std	Y+34, r25	; 0x22
     eb8:	89 a3       	std	Y+33, r24	; 0x21
     eba:	0f c0       	rjmp	.+30     	; 0xeda <recievePassword+0x370>
     ebc:	88 ec       	ldi	r24, 0xC8	; 200
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	98 a3       	std	Y+32, r25	; 0x20
     ec2:	8f 8f       	std	Y+31, r24	; 0x1f
     ec4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ec6:	98 a1       	ldd	r25, Y+32	; 0x20
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <recievePassword+0x35e>
     ecc:	98 a3       	std	Y+32, r25	; 0x20
     ece:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed0:	89 a1       	ldd	r24, Y+33	; 0x21
     ed2:	9a a1       	ldd	r25, Y+34	; 0x22
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	9a a3       	std	Y+34, r25	; 0x22
     ed8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eda:	89 a1       	ldd	r24, Y+33	; 0x21
     edc:	9a a1       	ldd	r25, Y+34	; 0x22
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	69 f7       	brne	.-38     	; 0xebc <recievePassword+0x352>
     ee2:	14 c0       	rjmp	.+40     	; 0xf0c <recievePassword+0x3a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee4:	6b a1       	ldd	r22, Y+35	; 0x23
     ee6:	7c a1       	ldd	r23, Y+36	; 0x24
     ee8:	8d a1       	ldd	r24, Y+37	; 0x25
     eea:	9e a1       	ldd	r25, Y+38	; 0x26
     eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	9a a3       	std	Y+34, r25	; 0x22
     ef6:	89 a3       	std	Y+33, r24	; 0x21
     ef8:	89 a1       	ldd	r24, Y+33	; 0x21
     efa:	9a a1       	ldd	r25, Y+34	; 0x22
     efc:	9e 8f       	std	Y+30, r25	; 0x1e
     efe:	8d 8f       	std	Y+29, r24	; 0x1d
     f00:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f02:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	f1 f7       	brne	.-4      	; 0xf04 <recievePassword+0x39a>
     f08:	9e 8f       	std	Y+30, r25	; 0x1e
     f0a:	8d 8f       	std	Y+29, r24	; 0x1d
	}

	_delay_ms(500);

	/*re-taking password to proceed with checking for password validity*/
	LCD_clearScreen();
     f0c:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_clearScreen>

	LCD_displayStringRowColumn(0, 0, "plz re-enter");
     f10:	2b e8       	ldi	r18, 0x8B	; 139
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	a9 01       	movw	r20, r18
     f1a:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "pass:");
     f1e:	28 e9       	ldi	r18, 0x98	; 152
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	a9 01       	movw	r20, r18
     f28:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 6);
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	66 e0       	ldi	r22, 0x06	; 6
     f30:	0e 94 cc 1b 	call	0x3798	; 0x3798 <LCD_moveCursor>

	counter = 0;
     f34:	fe 01       	movw	r30, r28
     f36:	e8 5b       	subi	r30, 0xB8	; 184
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	10 82       	st	Z, r1
     f3c:	92 c0       	rjmp	.+292    	; 0x1062 <recievePassword+0x4f8>

	while(counter < 5){

		pressedKey = KEYPAD_getPressedKey();
     f3e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <KEYPAD_getPressedKey>
     f42:	fe 01       	movw	r30, r28
     f44:	e9 5b       	subi	r30, 0xB9	; 185
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	80 83       	st	Z, r24

		if(checkNumber(pressedKey)){
     f4a:	fe 01       	movw	r30, r28
     f4c:	e9 5b       	subi	r30, 0xB9	; 185
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	80 81       	ld	r24, Z
     f52:	0e 94 a3 05 	call	0xb46	; 0xb46 <checkNumber>
     f56:	88 23       	and	r24, r24
     f58:	91 f0       	breq	.+36     	; 0xf7e <recievePassword+0x414>

			LCD_displayCharacter('*');
     f5a:	8a e2       	ldi	r24, 0x2A	; 42
     f5c:	0e 94 b4 19 	call	0x3368	; 0x3368 <LCD_displayCharacter>

			UART_sendByte(pressedKey);
     f60:	fe 01       	movw	r30, r28
     f62:	e9 5b       	subi	r30, 0xB9	; 185
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	80 81       	ld	r24, Z
     f68:	0e 94 ce 1c 	call	0x399c	; 0x399c <UART_sendByte>

			counter++;
     f6c:	de 01       	movw	r26, r28
     f6e:	a8 5b       	subi	r26, 0xB8	; 184
     f70:	bf 4f       	sbci	r27, 0xFF	; 255
     f72:	fe 01       	movw	r30, r28
     f74:	e8 5b       	subi	r30, 0xB8	; 184
     f76:	ff 4f       	sbci	r31, 0xFF	; 255
     f78:	80 81       	ld	r24, Z
     f7a:	8f 5f       	subi	r24, 0xFF	; 255
     f7c:	8c 93       	st	X, r24
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	aa ef       	ldi	r26, 0xFA	; 250
     f84:	b3 e4       	ldi	r27, 0x43	; 67
     f86:	89 8f       	std	Y+25, r24	; 0x19
     f88:	9a 8f       	std	Y+26, r25	; 0x1a
     f8a:	ab 8f       	std	Y+27, r26	; 0x1b
     f8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f8e:	69 8d       	ldd	r22, Y+25	; 0x19
     f90:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f92:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f94:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	4a ef       	ldi	r20, 0xFA	; 250
     f9c:	54 e4       	ldi	r21, 0x44	; 68
     f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	8d 8b       	std	Y+21, r24	; 0x15
     fa8:	9e 8b       	std	Y+22, r25	; 0x16
     faa:	af 8b       	std	Y+23, r26	; 0x17
     fac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fae:	6d 89       	ldd	r22, Y+21	; 0x15
     fb0:	7e 89       	ldd	r23, Y+22	; 0x16
     fb2:	8f 89       	ldd	r24, Y+23	; 0x17
     fb4:	98 8d       	ldd	r25, Y+24	; 0x18
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e8       	ldi	r20, 0x80	; 128
     fbc:	5f e3       	ldi	r21, 0x3F	; 63
     fbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fc2:	88 23       	and	r24, r24
     fc4:	2c f4       	brge	.+10     	; 0xfd0 <recievePassword+0x466>
		__ticks = 1;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	9c 8b       	std	Y+20, r25	; 0x14
     fcc:	8b 8b       	std	Y+19, r24	; 0x13
     fce:	3f c0       	rjmp	.+126    	; 0x104e <recievePassword+0x4e4>
	else if (__tmp > 65535)
     fd0:	6d 89       	ldd	r22, Y+21	; 0x15
     fd2:	7e 89       	ldd	r23, Y+22	; 0x16
     fd4:	8f 89       	ldd	r24, Y+23	; 0x17
     fd6:	98 8d       	ldd	r25, Y+24	; 0x18
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	3f ef       	ldi	r19, 0xFF	; 255
     fdc:	4f e7       	ldi	r20, 0x7F	; 127
     fde:	57 e4       	ldi	r21, 0x47	; 71
     fe0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fe4:	18 16       	cp	r1, r24
     fe6:	4c f5       	brge	.+82     	; 0x103a <recievePassword+0x4d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe8:	69 8d       	ldd	r22, Y+25	; 0x19
     fea:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fec:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fee:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	40 e2       	ldi	r20, 0x20	; 32
     ff6:	51 e4       	ldi	r21, 0x41	; 65
     ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffc:	dc 01       	movw	r26, r24
     ffe:	cb 01       	movw	r24, r22
    1000:	bc 01       	movw	r22, r24
    1002:	cd 01       	movw	r24, r26
    1004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	9c 8b       	std	Y+20, r25	; 0x14
    100e:	8b 8b       	std	Y+19, r24	; 0x13
    1010:	0f c0       	rjmp	.+30     	; 0x1030 <recievePassword+0x4c6>
    1012:	88 ec       	ldi	r24, 0xC8	; 200
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	9a 8b       	std	Y+18, r25	; 0x12
    1018:	89 8b       	std	Y+17, r24	; 0x11
    101a:	89 89       	ldd	r24, Y+17	; 0x11
    101c:	9a 89       	ldd	r25, Y+18	; 0x12
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <recievePassword+0x4b4>
    1022:	9a 8b       	std	Y+18, r25	; 0x12
    1024:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1026:	8b 89       	ldd	r24, Y+19	; 0x13
    1028:	9c 89       	ldd	r25, Y+20	; 0x14
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	9c 8b       	std	Y+20, r25	; 0x14
    102e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1030:	8b 89       	ldd	r24, Y+19	; 0x13
    1032:	9c 89       	ldd	r25, Y+20	; 0x14
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	69 f7       	brne	.-38     	; 0x1012 <recievePassword+0x4a8>
    1038:	14 c0       	rjmp	.+40     	; 0x1062 <recievePassword+0x4f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    103a:	6d 89       	ldd	r22, Y+21	; 0x15
    103c:	7e 89       	ldd	r23, Y+22	; 0x16
    103e:	8f 89       	ldd	r24, Y+23	; 0x17
    1040:	98 8d       	ldd	r25, Y+24	; 0x18
    1042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	9c 8b       	std	Y+20, r25	; 0x14
    104c:	8b 8b       	std	Y+19, r24	; 0x13
    104e:	8b 89       	ldd	r24, Y+19	; 0x13
    1050:	9c 89       	ldd	r25, Y+20	; 0x14
    1052:	98 8b       	std	Y+16, r25	; 0x10
    1054:	8f 87       	std	Y+15, r24	; 0x0f
    1056:	8f 85       	ldd	r24, Y+15	; 0x0f
    1058:	98 89       	ldd	r25, Y+16	; 0x10
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	f1 f7       	brne	.-4      	; 0x105a <recievePassword+0x4f0>
    105e:	98 8b       	std	Y+16, r25	; 0x10
    1060:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_displayStringRowColumn(1, 0, "pass:");
	LCD_moveCursor(1, 6);

	counter = 0;

	while(counter < 5){
    1062:	fe 01       	movw	r30, r28
    1064:	e8 5b       	subi	r30, 0xB8	; 184
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	80 81       	ld	r24, Z
    106a:	85 30       	cpi	r24, 0x05	; 5
    106c:	08 f4       	brcc	.+2      	; 0x1070 <recievePassword+0x506>
    106e:	67 cf       	rjmp	.-306    	; 0xf3e <recievePassword+0x3d4>
    1070:	07 c0       	rjmp	.+14     	; 0x1080 <recievePassword+0x516>
		_delay_ms(500);
	}

	/*wait until the entered key is = to continue*/
	while (KEYPAD_getPressedKey() != ENTER) {
		LCD_displayStringRowColumn(0, 0, "Press '='");
    1072:	21 e8       	ldi	r18, 0x81	; 129
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	a9 01       	movw	r20, r18
    107c:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
		}
		_delay_ms(500);
	}

	/*wait until the entered key is = to continue*/
	while (KEYPAD_getPressedKey() != ENTER) {
    1080:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <KEYPAD_getPressedKey>
    1084:	8d 33       	cpi	r24, 0x3D	; 61
    1086:	a9 f7       	brne	.-22     	; 0x1072 <recievePassword+0x508>
		LCD_displayStringRowColumn(0, 0, "Press '='");
	}

	/*receive the byte that indicates if  passwords match or not*/
	g_receivedByte = UART_receiveByte();
    1088:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <UART_receiveByte>
    108c:	80 93 ae 01 	sts	0x01AE, r24
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a8 ec       	ldi	r26, 0xC8	; 200
    1096:	b2 e4       	ldi	r27, 0x42	; 66
    1098:	8b 87       	std	Y+11, r24	; 0x0b
    109a:	9c 87       	std	Y+12, r25	; 0x0c
    109c:	ad 87       	std	Y+13, r26	; 0x0d
    109e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	4a ef       	ldi	r20, 0xFA	; 250
    10ae:	54 e4       	ldi	r21, 0x44	; 68
    10b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	8f 83       	std	Y+7, r24	; 0x07
    10ba:	98 87       	std	Y+8, r25	; 0x08
    10bc:	a9 87       	std	Y+9, r26	; 0x09
    10be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10c0:	6f 81       	ldd	r22, Y+7	; 0x07
    10c2:	78 85       	ldd	r23, Y+8	; 0x08
    10c4:	89 85       	ldd	r24, Y+9	; 0x09
    10c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e8       	ldi	r20, 0x80	; 128
    10ce:	5f e3       	ldi	r21, 0x3F	; 63
    10d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10d4:	88 23       	and	r24, r24
    10d6:	2c f4       	brge	.+10     	; 0x10e2 <recievePassword+0x578>
		__ticks = 1;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	8d 83       	std	Y+5, r24	; 0x05
    10e0:	3f c0       	rjmp	.+126    	; 0x1160 <recievePassword+0x5f6>
	else if (__tmp > 65535)
    10e2:	6f 81       	ldd	r22, Y+7	; 0x07
    10e4:	78 85       	ldd	r23, Y+8	; 0x08
    10e6:	89 85       	ldd	r24, Y+9	; 0x09
    10e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	3f ef       	ldi	r19, 0xFF	; 255
    10ee:	4f e7       	ldi	r20, 0x7F	; 127
    10f0:	57 e4       	ldi	r21, 0x47	; 71
    10f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10f6:	18 16       	cp	r1, r24
    10f8:	4c f5       	brge	.+82     	; 0x114c <recievePassword+0x5e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    10fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    10fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1100:	9e 85       	ldd	r25, Y+14	; 0x0e
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e2       	ldi	r20, 0x20	; 32
    1108:	51 e4       	ldi	r21, 0x41	; 65
    110a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	bc 01       	movw	r22, r24
    1114:	cd 01       	movw	r24, r26
    1116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	9e 83       	std	Y+6, r25	; 0x06
    1120:	8d 83       	std	Y+5, r24	; 0x05
    1122:	0f c0       	rjmp	.+30     	; 0x1142 <recievePassword+0x5d8>
    1124:	88 ec       	ldi	r24, 0xC8	; 200
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	8b 83       	std	Y+3, r24	; 0x03
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	f1 f7       	brne	.-4      	; 0x1130 <recievePassword+0x5c6>
    1134:	9c 83       	std	Y+4, r25	; 0x04
    1136:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	9e 83       	std	Y+6, r25	; 0x06
    1140:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1142:	8d 81       	ldd	r24, Y+5	; 0x05
    1144:	9e 81       	ldd	r25, Y+6	; 0x06
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	69 f7       	brne	.-38     	; 0x1124 <recievePassword+0x5ba>
    114a:	14 c0       	rjmp	.+40     	; 0x1174 <recievePassword+0x60a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    114c:	6f 81       	ldd	r22, Y+7	; 0x07
    114e:	78 85       	ldd	r23, Y+8	; 0x08
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	9a 85       	ldd	r25, Y+10	; 0x0a
    1154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	9e 83       	std	Y+6, r25	; 0x06
    115e:	8d 83       	std	Y+5, r24	; 0x05
    1160:	8d 81       	ldd	r24, Y+5	; 0x05
    1162:	9e 81       	ldd	r25, Y+6	; 0x06
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <recievePassword+0x602>
    1170:	9a 83       	std	Y+2, r25	; 0x02
    1172:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

}
    1174:	c8 5b       	subi	r28, 0xB8	; 184
    1176:	df 4f       	sbci	r29, 0xFF	; 255
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	08 95       	ret

0000118c <verifyPassword>:
 * Description : take password from user to send it to CONTROL_ECU
 * then receive a byte from CONTROL_ECU to check validity of password
 * Parameters : void.
 * Return : void.
 */
void verifyPassword(void){
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	6e 97       	sbiw	r28, 0x1e	; 30
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61

	uint8 pressedKey;
	uint8 counter = 0;
    11a0:	1d 8e       	std	Y+29, r1	; 0x1d
    11a2:	83 c0       	rjmp	.+262    	; 0x12aa <verifyPassword+0x11e>

	while(counter < 5){

		pressedKey = KEYPAD_getPressedKey();
    11a4:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <KEYPAD_getPressedKey>
    11a8:	8e 8f       	std	Y+30, r24	; 0x1e

		if(checkNumber(pressedKey)){
    11aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11ac:	0e 94 a3 05 	call	0xb46	; 0xb46 <checkNumber>
    11b0:	88 23       	and	r24, r24
    11b2:	49 f0       	breq	.+18     	; 0x11c6 <verifyPassword+0x3a>

			LCD_displayCharacter('*');
    11b4:	8a e2       	ldi	r24, 0x2A	; 42
    11b6:	0e 94 b4 19 	call	0x3368	; 0x3368 <LCD_displayCharacter>

			UART_sendByte(pressedKey);
    11ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11bc:	0e 94 ce 1c 	call	0x399c	; 0x399c <UART_sendByte>

			counter++;
    11c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11c2:	8f 5f       	subi	r24, 0xFF	; 255
    11c4:	8d 8f       	std	Y+29, r24	; 0x1d
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	aa ef       	ldi	r26, 0xFA	; 250
    11cc:	b3 e4       	ldi	r27, 0x43	; 67
    11ce:	89 8f       	std	Y+25, r24	; 0x19
    11d0:	9a 8f       	std	Y+26, r25	; 0x1a
    11d2:	ab 8f       	std	Y+27, r26	; 0x1b
    11d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d6:	69 8d       	ldd	r22, Y+25	; 0x19
    11d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	4a ef       	ldi	r20, 0xFA	; 250
    11e4:	54 e4       	ldi	r21, 0x44	; 68
    11e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	8d 8b       	std	Y+21, r24	; 0x15
    11f0:	9e 8b       	std	Y+22, r25	; 0x16
    11f2:	af 8b       	std	Y+23, r26	; 0x17
    11f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11f6:	6d 89       	ldd	r22, Y+21	; 0x15
    11f8:	7e 89       	ldd	r23, Y+22	; 0x16
    11fa:	8f 89       	ldd	r24, Y+23	; 0x17
    11fc:	98 8d       	ldd	r25, Y+24	; 0x18
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e8       	ldi	r20, 0x80	; 128
    1204:	5f e3       	ldi	r21, 0x3F	; 63
    1206:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    120a:	88 23       	and	r24, r24
    120c:	2c f4       	brge	.+10     	; 0x1218 <verifyPassword+0x8c>
		__ticks = 1;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	9c 8b       	std	Y+20, r25	; 0x14
    1214:	8b 8b       	std	Y+19, r24	; 0x13
    1216:	3f c0       	rjmp	.+126    	; 0x1296 <verifyPassword+0x10a>
	else if (__tmp > 65535)
    1218:	6d 89       	ldd	r22, Y+21	; 0x15
    121a:	7e 89       	ldd	r23, Y+22	; 0x16
    121c:	8f 89       	ldd	r24, Y+23	; 0x17
    121e:	98 8d       	ldd	r25, Y+24	; 0x18
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	3f ef       	ldi	r19, 0xFF	; 255
    1224:	4f e7       	ldi	r20, 0x7F	; 127
    1226:	57 e4       	ldi	r21, 0x47	; 71
    1228:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    122c:	18 16       	cp	r1, r24
    122e:	4c f5       	brge	.+82     	; 0x1282 <verifyPassword+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1230:	69 8d       	ldd	r22, Y+25	; 0x19
    1232:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1234:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1236:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	40 e2       	ldi	r20, 0x20	; 32
    123e:	51 e4       	ldi	r21, 0x41	; 65
    1240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	bc 01       	movw	r22, r24
    124a:	cd 01       	movw	r24, r26
    124c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	9c 8b       	std	Y+20, r25	; 0x14
    1256:	8b 8b       	std	Y+19, r24	; 0x13
    1258:	0f c0       	rjmp	.+30     	; 0x1278 <verifyPassword+0xec>
    125a:	88 ec       	ldi	r24, 0xC8	; 200
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	9a 8b       	std	Y+18, r25	; 0x12
    1260:	89 8b       	std	Y+17, r24	; 0x11
    1262:	89 89       	ldd	r24, Y+17	; 0x11
    1264:	9a 89       	ldd	r25, Y+18	; 0x12
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <verifyPassword+0xda>
    126a:	9a 8b       	std	Y+18, r25	; 0x12
    126c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126e:	8b 89       	ldd	r24, Y+19	; 0x13
    1270:	9c 89       	ldd	r25, Y+20	; 0x14
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	9c 8b       	std	Y+20, r25	; 0x14
    1276:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1278:	8b 89       	ldd	r24, Y+19	; 0x13
    127a:	9c 89       	ldd	r25, Y+20	; 0x14
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	69 f7       	brne	.-38     	; 0x125a <verifyPassword+0xce>
    1280:	14 c0       	rjmp	.+40     	; 0x12aa <verifyPassword+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1282:	6d 89       	ldd	r22, Y+21	; 0x15
    1284:	7e 89       	ldd	r23, Y+22	; 0x16
    1286:	8f 89       	ldd	r24, Y+23	; 0x17
    1288:	98 8d       	ldd	r25, Y+24	; 0x18
    128a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	9c 8b       	std	Y+20, r25	; 0x14
    1294:	8b 8b       	std	Y+19, r24	; 0x13
    1296:	8b 89       	ldd	r24, Y+19	; 0x13
    1298:	9c 89       	ldd	r25, Y+20	; 0x14
    129a:	98 8b       	std	Y+16, r25	; 0x10
    129c:	8f 87       	std	Y+15, r24	; 0x0f
    129e:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a0:	98 89       	ldd	r25, Y+16	; 0x10
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <verifyPassword+0x116>
    12a6:	98 8b       	std	Y+16, r25	; 0x10
    12a8:	8f 87       	std	Y+15, r24	; 0x0f
void verifyPassword(void){

	uint8 pressedKey;
	uint8 counter = 0;

	while(counter < 5){
    12aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12ac:	85 30       	cpi	r24, 0x05	; 5
    12ae:	08 f4       	brcc	.+2      	; 0x12b2 <verifyPassword+0x126>
    12b0:	79 cf       	rjmp	.-270    	; 0x11a4 <verifyPassword+0x18>
    12b2:	07 c0       	rjmp	.+14     	; 0x12c2 <verifyPassword+0x136>
		_delay_ms(500);
	}


	while (KEYPAD_getPressedKey() != ENTER) {
		LCD_displayStringRowColumn(0, 0, "Press '='");
    12b4:	21 e8       	ldi	r18, 0x81	; 129
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	a9 01       	movw	r20, r18
    12be:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
		}
		_delay_ms(500);
	}


	while (KEYPAD_getPressedKey() != ENTER) {
    12c2:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <KEYPAD_getPressedKey>
    12c6:	8d 33       	cpi	r24, 0x3D	; 61
    12c8:	a9 f7       	brne	.-22     	; 0x12b4 <verifyPassword+0x128>
		LCD_displayStringRowColumn(0, 0, "Press '='");
	}

	/*receive the byte that indicates if passwords match or not*/
	g_receivedByte = UART_receiveByte();
    12ca:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <UART_receiveByte>
    12ce:	80 93 ae 01 	sts	0x01AE, r24
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	a8 ec       	ldi	r26, 0xC8	; 200
    12d8:	b2 e4       	ldi	r27, 0x42	; 66
    12da:	8b 87       	std	Y+11, r24	; 0x0b
    12dc:	9c 87       	std	Y+12, r25	; 0x0c
    12de:	ad 87       	std	Y+13, r26	; 0x0d
    12e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	4a ef       	ldi	r20, 0xFA	; 250
    12f0:	54 e4       	ldi	r21, 0x44	; 68
    12f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	8f 83       	std	Y+7, r24	; 0x07
    12fc:	98 87       	std	Y+8, r25	; 0x08
    12fe:	a9 87       	std	Y+9, r26	; 0x09
    1300:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1302:	6f 81       	ldd	r22, Y+7	; 0x07
    1304:	78 85       	ldd	r23, Y+8	; 0x08
    1306:	89 85       	ldd	r24, Y+9	; 0x09
    1308:	9a 85       	ldd	r25, Y+10	; 0x0a
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e8       	ldi	r20, 0x80	; 128
    1310:	5f e3       	ldi	r21, 0x3F	; 63
    1312:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1316:	88 23       	and	r24, r24
    1318:	2c f4       	brge	.+10     	; 0x1324 <verifyPassword+0x198>
		__ticks = 1;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	9e 83       	std	Y+6, r25	; 0x06
    1320:	8d 83       	std	Y+5, r24	; 0x05
    1322:	3f c0       	rjmp	.+126    	; 0x13a2 <verifyPassword+0x216>
	else if (__tmp > 65535)
    1324:	6f 81       	ldd	r22, Y+7	; 0x07
    1326:	78 85       	ldd	r23, Y+8	; 0x08
    1328:	89 85       	ldd	r24, Y+9	; 0x09
    132a:	9a 85       	ldd	r25, Y+10	; 0x0a
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	3f ef       	ldi	r19, 0xFF	; 255
    1330:	4f e7       	ldi	r20, 0x7F	; 127
    1332:	57 e4       	ldi	r21, 0x47	; 71
    1334:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1338:	18 16       	cp	r1, r24
    133a:	4c f5       	brge	.+82     	; 0x138e <verifyPassword+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133c:	6b 85       	ldd	r22, Y+11	; 0x0b
    133e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1340:	8d 85       	ldd	r24, Y+13	; 0x0d
    1342:	9e 85       	ldd	r25, Y+14	; 0x0e
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	40 e2       	ldi	r20, 0x20	; 32
    134a:	51 e4       	ldi	r21, 0x41	; 65
    134c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	bc 01       	movw	r22, r24
    1356:	cd 01       	movw	r24, r26
    1358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	9e 83       	std	Y+6, r25	; 0x06
    1362:	8d 83       	std	Y+5, r24	; 0x05
    1364:	0f c0       	rjmp	.+30     	; 0x1384 <verifyPassword+0x1f8>
    1366:	88 ec       	ldi	r24, 0xC8	; 200
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	9c 83       	std	Y+4, r25	; 0x04
    136c:	8b 83       	std	Y+3, r24	; 0x03
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	f1 f7       	brne	.-4      	; 0x1372 <verifyPassword+0x1e6>
    1376:	9c 83       	std	Y+4, r25	; 0x04
    1378:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137a:	8d 81       	ldd	r24, Y+5	; 0x05
    137c:	9e 81       	ldd	r25, Y+6	; 0x06
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	9e 83       	std	Y+6, r25	; 0x06
    1382:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	9e 81       	ldd	r25, Y+6	; 0x06
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	69 f7       	brne	.-38     	; 0x1366 <verifyPassword+0x1da>
    138c:	14 c0       	rjmp	.+40     	; 0x13b6 <verifyPassword+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138e:	6f 81       	ldd	r22, Y+7	; 0x07
    1390:	78 85       	ldd	r23, Y+8	; 0x08
    1392:	89 85       	ldd	r24, Y+9	; 0x09
    1394:	9a 85       	ldd	r25, Y+10	; 0x0a
    1396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	9e 83       	std	Y+6, r25	; 0x06
    13a0:	8d 83       	std	Y+5, r24	; 0x05
    13a2:	8d 81       	ldd	r24, Y+5	; 0x05
    13a4:	9e 81       	ldd	r25, Y+6	; 0x06
    13a6:	9a 83       	std	Y+2, r25	; 0x02
    13a8:	89 83       	std	Y+1, r24	; 0x01
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	9a 81       	ldd	r25, Y+2	; 0x02
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <verifyPassword+0x222>
    13b2:	9a 83       	std	Y+2, r25	; 0x02
    13b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);


}
    13b6:	6e 96       	adiw	r28, 0x1e	; 30
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <buzzerOperation>:
 *  System should be locked no inputs from Keypad will be accepted during
 *  this time period.
 * Parameters : void.
 * Return : void.
 */
void buzzerOperation(void){
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
    13d0:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_clearScreen>

	/*display error message*/
	LCD_displayStringRowColumn(0, 0, "ERROR!!!");
    13d4:	2e e9       	ldi	r18, 0x9E	; 158
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	a9 01       	movw	r20, r18
    13de:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>

	/*start the timer and count 1 minute*/
	Timer1_init(&Timer1_config_ptr);
    13e2:	88 e9       	ldi	r24, 0x98	; 152
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	0e 94 c4 11 	call	0x2388	; 0x2388 <Timer1_init>

	g_secondsCounter = 0;
    13ea:	10 92 a5 01 	sts	0x01A5, r1

	/*display ERROR message for 1 minute*/
	while (g_secondsCounter != BUZZER_TIME_IN_SECONDS) {
    13ee:	80 91 a5 01 	lds	r24, 0x01A5
    13f2:	8c 33       	cpi	r24, 0x3C	; 60
    13f4:	e1 f7       	brne	.-8      	; 0x13ee <buzzerOperation+0x26>
	}

	g_secondsCounter = 0;
    13f6:	10 92 a5 01 	sts	0x01A5, r1

	/*stop the timer*/
	Timer1_deInit();
    13fa:	0e 94 42 12 	call	0x2484	; 0x2484 <Timer1_deInit>

}
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <doorOperation>:
 * and display a message on the screen “Door is Locking for 15 seconds.
 * turn off timer1 and clear seconds counter
 * Parameters : void.
 * Return : void.
 */
void doorOperation(void){
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	2e 97       	sbiw	r28, 0x0e	; 14
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1418:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_clearScreen>

	/*display a message to the user that the door in unlocking*/
	LCD_displayStringRowColumn(0, 0, "Door is");
    141c:	27 ea       	ldi	r18, 0xA7	; 167
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	a9 01       	movw	r20, r18
    1426:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "Unlocking...");
    142a:	2f ea       	ldi	r18, 0xAF	; 175
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	a9 01       	movw	r20, r18
    1434:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>

	/*start timer1*/
	Timer1_init(&Timer1_config_ptr);
    1438:	88 e9       	ldi	r24, 0x98	; 152
    143a:	91 e0       	ldi	r25, 0x01	; 1
    143c:	0e 94 c4 11 	call	0x2388	; 0x2388 <Timer1_init>

	g_secondsCounter = 0;
    1440:	10 92 a5 01 	sts	0x01A5, r1

	/*wait for 15 seconds*/
	while (g_secondsCounter <= OPEN_TIME_IN_SECONDS) {
    1444:	80 91 a5 01 	lds	r24, 0x01A5
    1448:	80 31       	cpi	r24, 0x10	; 16
    144a:	e0 f3       	brcs	.-8      	; 0x1444 <doorOperation+0x40>
	}

	LCD_clearScreen();
    144c:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_clearScreen>

	/*display a message to the user that the door is on hold*/
	LCD_displayStringRowColumn(0, 0, "Hold Door...");
    1450:	2c eb       	ldi	r18, 0xBC	; 188
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	a9 01       	movw	r20, r18
    145a:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>

	g_secondsCounter = 0;
    145e:	10 92 a5 01 	sts	0x01A5, r1

	/*hold door for 3 seconds*/
	while (g_secondsCounter <= HOLD_TIME_IN_SECONDS) {
    1462:	80 91 a5 01 	lds	r24, 0x01A5
    1466:	84 30       	cpi	r24, 0x04	; 4
    1468:	e0 f3       	brcs	.-8      	; 0x1462 <doorOperation+0x5e>
	}

	LCD_clearScreen();
    146a:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_clearScreen>

	/*display a message to the user that the door in locking*/
	LCD_displayStringRowColumn(0, 0, "Door is");
    146e:	27 ea       	ldi	r18, 0xA7	; 167
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	a9 01       	movw	r20, r18
    1478:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "Locking...");
    147c:	29 ec       	ldi	r18, 0xC9	; 201
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	a9 01       	movw	r20, r18
    1486:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>

	g_secondsCounter = 0;
    148a:	10 92 a5 01 	sts	0x01A5, r1

	/*wait for 15 seconds*/
	while (g_secondsCounter <= CLOSE_TIME_IN_SECONDS) {
    148e:	80 91 a5 01 	lds	r24, 0x01A5
    1492:	80 31       	cpi	r24, 0x10	; 16
    1494:	e0 f3       	brcs	.-8      	; 0x148e <doorOperation+0x8a>
	}

	/*turn off the timer*/
	Timer1_deInit();
    1496:	0e 94 42 12 	call	0x2484	; 0x2484 <Timer1_deInit>

	g_secondsCounter = 0;
    149a:	10 92 a5 01 	sts	0x01A5, r1

	/*display a message to the user that the door in locked*/
	LCD_displayStringRowColumn(0, 0, "Door is locked");
    149e:	24 ed       	ldi	r18, 0xD4	; 212
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	a9 01       	movw	r20, r18
    14a8:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	aa ef       	ldi	r26, 0xFA	; 250
    14b2:	b3 e4       	ldi	r27, 0x43	; 67
    14b4:	8b 87       	std	Y+11, r24	; 0x0b
    14b6:	9c 87       	std	Y+12, r25	; 0x0c
    14b8:	ad 87       	std	Y+13, r26	; 0x0d
    14ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14be:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	4a ef       	ldi	r20, 0xFA	; 250
    14ca:	54 e4       	ldi	r21, 0x44	; 68
    14cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	8f 83       	std	Y+7, r24	; 0x07
    14d6:	98 87       	std	Y+8, r25	; 0x08
    14d8:	a9 87       	std	Y+9, r26	; 0x09
    14da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14dc:	6f 81       	ldd	r22, Y+7	; 0x07
    14de:	78 85       	ldd	r23, Y+8	; 0x08
    14e0:	89 85       	ldd	r24, Y+9	; 0x09
    14e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e8       	ldi	r20, 0x80	; 128
    14ea:	5f e3       	ldi	r21, 0x3F	; 63
    14ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14f0:	88 23       	and	r24, r24
    14f2:	2c f4       	brge	.+10     	; 0x14fe <doorOperation+0xfa>
		__ticks = 1;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9e 83       	std	Y+6, r25	; 0x06
    14fa:	8d 83       	std	Y+5, r24	; 0x05
    14fc:	3f c0       	rjmp	.+126    	; 0x157c <doorOperation+0x178>
	else if (__tmp > 65535)
    14fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1500:	78 85       	ldd	r23, Y+8	; 0x08
    1502:	89 85       	ldd	r24, Y+9	; 0x09
    1504:	9a 85       	ldd	r25, Y+10	; 0x0a
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	3f ef       	ldi	r19, 0xFF	; 255
    150a:	4f e7       	ldi	r20, 0x7F	; 127
    150c:	57 e4       	ldi	r21, 0x47	; 71
    150e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1512:	18 16       	cp	r1, r24
    1514:	4c f5       	brge	.+82     	; 0x1568 <doorOperation+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1516:	6b 85       	ldd	r22, Y+11	; 0x0b
    1518:	7c 85       	ldd	r23, Y+12	; 0x0c
    151a:	8d 85       	ldd	r24, Y+13	; 0x0d
    151c:	9e 85       	ldd	r25, Y+14	; 0x0e
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 e2       	ldi	r20, 0x20	; 32
    1524:	51 e4       	ldi	r21, 0x41	; 65
    1526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	bc 01       	movw	r22, r24
    1530:	cd 01       	movw	r24, r26
    1532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	9e 83       	std	Y+6, r25	; 0x06
    153c:	8d 83       	std	Y+5, r24	; 0x05
    153e:	0f c0       	rjmp	.+30     	; 0x155e <doorOperation+0x15a>
    1540:	88 ec       	ldi	r24, 0xC8	; 200
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	9c 83       	std	Y+4, r25	; 0x04
    1546:	8b 83       	std	Y+3, r24	; 0x03
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	9c 81       	ldd	r25, Y+4	; 0x04
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	f1 f7       	brne	.-4      	; 0x154c <doorOperation+0x148>
    1550:	9c 83       	std	Y+4, r25	; 0x04
    1552:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1554:	8d 81       	ldd	r24, Y+5	; 0x05
    1556:	9e 81       	ldd	r25, Y+6	; 0x06
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	9e 83       	std	Y+6, r25	; 0x06
    155c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155e:	8d 81       	ldd	r24, Y+5	; 0x05
    1560:	9e 81       	ldd	r25, Y+6	; 0x06
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	69 f7       	brne	.-38     	; 0x1540 <doorOperation+0x13c>
    1566:	14 c0       	rjmp	.+40     	; 0x1590 <doorOperation+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1568:	6f 81       	ldd	r22, Y+7	; 0x07
    156a:	78 85       	ldd	r23, Y+8	; 0x08
    156c:	89 85       	ldd	r24, Y+9	; 0x09
    156e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	9e 83       	std	Y+6, r25	; 0x06
    157a:	8d 83       	std	Y+5, r24	; 0x05
    157c:	8d 81       	ldd	r24, Y+5	; 0x05
    157e:	9e 81       	ldd	r25, Y+6	; 0x06
    1580:	9a 83       	std	Y+2, r25	; 0x02
    1582:	89 83       	std	Y+1, r24	; 0x01
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	9a 81       	ldd	r25, Y+2	; 0x02
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	f1 f7       	brne	.-4      	; 0x1588 <doorOperation+0x184>
    158c:	9a 83       	std	Y+2, r25	; 0x02
    158e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(500);


}
    1590:	2e 96       	adiw	r28, 0x0e	; 14
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <Timer1_INT>:
/* Function Name : Timer1_INT
 * Description : the call back function that is called in Timer1's ISR
 * Parameters : void.
 * Return : void.
 */
void Timer1_INT(void) {
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62

	g_secondsCounter++;
    15aa:	80 91 a5 01 	lds	r24, 0x01A5
    15ae:	8f 5f       	subi	r24, 0xFF	; 255
    15b0:	80 93 a5 01 	sts	0x01A5, r24
}
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <main>:


int main(void){
    15ba:	0f 93       	push	r16
    15bc:	1f 93       	push	r17
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	cb 58       	subi	r28, 0x8B	; 139
    15c8:	d0 40       	sbci	r29, 0x00	; 0
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61

	SREG |= (1 << 7);
    15d4:	af e5       	ldi	r26, 0x5F	; 95
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	ef e5       	ldi	r30, 0x5F	; 95
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	80 68       	ori	r24, 0x80	; 128
    15e0:	8c 93       	st	X, r24
	uint8 pressedKey;

	UART_ConfigType UART_ConfigPtr = {BAUD_RATE_9600, SIZE_BIT_8, DISABLED, BIT_1};
    15e2:	ce 01       	movw	r24, r28
    15e4:	8e 57       	subi	r24, 0x7E	; 126
    15e6:	9f 4f       	sbci	r25, 0xFF	; 255
    15e8:	c9 57       	subi	r28, 0x79	; 121
    15ea:	df 4f       	sbci	r29, 0xFF	; 255
    15ec:	99 83       	std	Y+1, r25	; 0x01
    15ee:	88 83       	st	Y, r24
    15f0:	c7 58       	subi	r28, 0x87	; 135
    15f2:	d0 40       	sbci	r29, 0x00	; 0
    15f4:	8e e9       	ldi	r24, 0x9E	; 158
    15f6:	91 e0       	ldi	r25, 0x01	; 1
    15f8:	c7 57       	subi	r28, 0x77	; 119
    15fa:	df 4f       	sbci	r29, 0xFF	; 255
    15fc:	99 83       	std	Y+1, r25	; 0x01
    15fe:	88 83       	st	Y, r24
    1600:	c9 58       	subi	r28, 0x89	; 137
    1602:	d0 40       	sbci	r29, 0x00	; 0
    1604:	95 e0       	ldi	r25, 0x05	; 5
    1606:	c5 57       	subi	r28, 0x75	; 117
    1608:	df 4f       	sbci	r29, 0xFF	; 255
    160a:	98 83       	st	Y, r25
    160c:	cb 58       	subi	r28, 0x8B	; 139
    160e:	d0 40       	sbci	r29, 0x00	; 0
    1610:	c7 57       	subi	r28, 0x77	; 119
    1612:	df 4f       	sbci	r29, 0xFF	; 255
    1614:	e8 81       	ld	r30, Y
    1616:	f9 81       	ldd	r31, Y+1	; 0x01
    1618:	c9 58       	subi	r28, 0x89	; 137
    161a:	d0 40       	sbci	r29, 0x00	; 0
    161c:	00 80       	ld	r0, Z
    161e:	c7 57       	subi	r28, 0x77	; 119
    1620:	df 4f       	sbci	r29, 0xFF	; 255
    1622:	88 81       	ld	r24, Y
    1624:	99 81       	ldd	r25, Y+1	; 0x01
    1626:	c9 58       	subi	r28, 0x89	; 137
    1628:	d0 40       	sbci	r29, 0x00	; 0
    162a:	01 96       	adiw	r24, 0x01	; 1
    162c:	c7 57       	subi	r28, 0x77	; 119
    162e:	df 4f       	sbci	r29, 0xFF	; 255
    1630:	99 83       	std	Y+1, r25	; 0x01
    1632:	88 83       	st	Y, r24
    1634:	c9 58       	subi	r28, 0x89	; 137
    1636:	d0 40       	sbci	r29, 0x00	; 0
    1638:	c9 57       	subi	r28, 0x79	; 121
    163a:	df 4f       	sbci	r29, 0xFF	; 255
    163c:	e8 81       	ld	r30, Y
    163e:	f9 81       	ldd	r31, Y+1	; 0x01
    1640:	c7 58       	subi	r28, 0x87	; 135
    1642:	d0 40       	sbci	r29, 0x00	; 0
    1644:	00 82       	st	Z, r0
    1646:	c9 57       	subi	r28, 0x79	; 121
    1648:	df 4f       	sbci	r29, 0xFF	; 255
    164a:	88 81       	ld	r24, Y
    164c:	99 81       	ldd	r25, Y+1	; 0x01
    164e:	c7 58       	subi	r28, 0x87	; 135
    1650:	d0 40       	sbci	r29, 0x00	; 0
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	c9 57       	subi	r28, 0x79	; 121
    1656:	df 4f       	sbci	r29, 0xFF	; 255
    1658:	99 83       	std	Y+1, r25	; 0x01
    165a:	88 83       	st	Y, r24
    165c:	c7 58       	subi	r28, 0x87	; 135
    165e:	d0 40       	sbci	r29, 0x00	; 0
    1660:	c5 57       	subi	r28, 0x75	; 117
    1662:	df 4f       	sbci	r29, 0xFF	; 255
    1664:	98 81       	ld	r25, Y
    1666:	cb 58       	subi	r28, 0x8B	; 139
    1668:	d0 40       	sbci	r29, 0x00	; 0
    166a:	91 50       	subi	r25, 0x01	; 1
    166c:	c5 57       	subi	r28, 0x75	; 117
    166e:	df 4f       	sbci	r29, 0xFF	; 255
    1670:	98 83       	st	Y, r25
    1672:	cb 58       	subi	r28, 0x8B	; 139
    1674:	d0 40       	sbci	r29, 0x00	; 0
    1676:	c5 57       	subi	r28, 0x75	; 117
    1678:	df 4f       	sbci	r29, 0xFF	; 255
    167a:	e8 81       	ld	r30, Y
    167c:	cb 58       	subi	r28, 0x8B	; 139
    167e:	d0 40       	sbci	r29, 0x00	; 0
    1680:	ee 23       	and	r30, r30
    1682:	31 f6       	brne	.-116    	; 0x1610 <main+0x56>

	/*Call initialization function of UART driver*/
	UART_init(&UART_ConfigPtr);
    1684:	ce 01       	movw	r24, r28
    1686:	8e 57       	subi	r24, 0x7E	; 126
    1688:	9f 4f       	sbci	r25, 0xFF	; 255
    168a:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <UART_init>

	/*set the call back function for timer1 to count seconds*/
	Timer1_setCallBack(Timer1_INT);
    168e:	81 ed       	ldi	r24, 0xD1	; 209
    1690:	9a e0       	ldi	r25, 0x0A	; 10
    1692:	0e 94 b2 11 	call	0x2364	; 0x2364 <Timer1_setCallBack>

	/* Call initialization function of LCD driver */
	LCD_init();
    1696:	0e 94 29 17 	call	0x2e52	; 0x2e52 <LCD_init>

	while(1){
		/*ask the user to enter new password*/
		LCD_clearScreen();
    169a:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 5, "Create");
    169e:	23 ee       	ldi	r18, 0xE3	; 227
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	65 e0       	ldi	r22, 0x05	; 5
    16a6:	a9 01       	movw	r20, r18
    16a8:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 2, "New Password");
    16ac:	2a ee       	ldi	r18, 0xEA	; 234
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	62 e0       	ldi	r22, 0x02	; 2
    16b4:	a9 01       	movw	r20, r18
    16b6:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
    16ba:	fe 01       	movw	r30, r28
    16bc:	e5 58       	subi	r30, 0x85	; 133
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e8       	ldi	r25, 0x80	; 128
    16c4:	ab eb       	ldi	r26, 0xBB	; 187
    16c6:	b4 e4       	ldi	r27, 0x44	; 68
    16c8:	80 83       	st	Z, r24
    16ca:	91 83       	std	Z+1, r25	; 0x01
    16cc:	a2 83       	std	Z+2, r26	; 0x02
    16ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d0:	8e 01       	movw	r16, r28
    16d2:	09 58       	subi	r16, 0x89	; 137
    16d4:	1f 4f       	sbci	r17, 0xFF	; 255
    16d6:	fe 01       	movw	r30, r28
    16d8:	e5 58       	subi	r30, 0x85	; 133
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	60 81       	ld	r22, Z
    16de:	71 81       	ldd	r23, Z+1	; 0x01
    16e0:	82 81       	ldd	r24, Z+2	; 0x02
    16e2:	93 81       	ldd	r25, Z+3	; 0x03
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	4a ef       	ldi	r20, 0xFA	; 250
    16ea:	54 e4       	ldi	r21, 0x44	; 68
    16ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	f8 01       	movw	r30, r16
    16f6:	80 83       	st	Z, r24
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	a2 83       	std	Z+2, r26	; 0x02
    16fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16fe:	fe 01       	movw	r30, r28
    1700:	e9 58       	subi	r30, 0x89	; 137
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	60 81       	ld	r22, Z
    1706:	71 81       	ldd	r23, Z+1	; 0x01
    1708:	82 81       	ldd	r24, Z+2	; 0x02
    170a:	93 81       	ldd	r25, Z+3	; 0x03
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e8       	ldi	r20, 0x80	; 128
    1712:	5f e3       	ldi	r21, 0x3F	; 63
    1714:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1718:	88 23       	and	r24, r24
    171a:	44 f4       	brge	.+16     	; 0x172c <main+0x172>
		__ticks = 1;
    171c:	fe 01       	movw	r30, r28
    171e:	eb 58       	subi	r30, 0x8B	; 139
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	91 83       	std	Z+1, r25	; 0x01
    1728:	80 83       	st	Z, r24
    172a:	64 c0       	rjmp	.+200    	; 0x17f4 <main+0x23a>
	else if (__tmp > 65535)
    172c:	fe 01       	movw	r30, r28
    172e:	e9 58       	subi	r30, 0x89	; 137
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	82 81       	ldd	r24, Z+2	; 0x02
    1738:	93 81       	ldd	r25, Z+3	; 0x03
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	3f ef       	ldi	r19, 0xFF	; 255
    173e:	4f e7       	ldi	r20, 0x7F	; 127
    1740:	57 e4       	ldi	r21, 0x47	; 71
    1742:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1746:	18 16       	cp	r1, r24
    1748:	0c f0       	brlt	.+2      	; 0x174c <main+0x192>
    174a:	43 c0       	rjmp	.+134    	; 0x17d2 <main+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174c:	fe 01       	movw	r30, r28
    174e:	e5 58       	subi	r30, 0x85	; 133
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	60 81       	ld	r22, Z
    1754:	71 81       	ldd	r23, Z+1	; 0x01
    1756:	82 81       	ldd	r24, Z+2	; 0x02
    1758:	93 81       	ldd	r25, Z+3	; 0x03
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	40 e2       	ldi	r20, 0x20	; 32
    1760:	51 e4       	ldi	r21, 0x41	; 65
    1762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	8e 01       	movw	r16, r28
    176c:	0b 58       	subi	r16, 0x8B	; 139
    176e:	1f 4f       	sbci	r17, 0xFF	; 255
    1770:	bc 01       	movw	r22, r24
    1772:	cd 01       	movw	r24, r26
    1774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	f8 01       	movw	r30, r16
    177e:	91 83       	std	Z+1, r25	; 0x01
    1780:	80 83       	st	Z, r24
    1782:	1f c0       	rjmp	.+62     	; 0x17c2 <main+0x208>
    1784:	fe 01       	movw	r30, r28
    1786:	ed 58       	subi	r30, 0x8D	; 141
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	88 ec       	ldi	r24, 0xC8	; 200
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	91 83       	std	Z+1, r25	; 0x01
    1790:	80 83       	st	Z, r24
    1792:	fe 01       	movw	r30, r28
    1794:	ed 58       	subi	r30, 0x8D	; 141
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	80 81       	ld	r24, Z
    179a:	91 81       	ldd	r25, Z+1	; 0x01
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <main+0x1e2>
    17a0:	fe 01       	movw	r30, r28
    17a2:	ed 58       	subi	r30, 0x8D	; 141
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17aa:	de 01       	movw	r26, r28
    17ac:	ab 58       	subi	r26, 0x8B	; 139
    17ae:	bf 4f       	sbci	r27, 0xFF	; 255
    17b0:	fe 01       	movw	r30, r28
    17b2:	eb 58       	subi	r30, 0x8B	; 139
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	80 81       	ld	r24, Z
    17b8:	91 81       	ldd	r25, Z+1	; 0x01
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	11 96       	adiw	r26, 0x01	; 1
    17be:	9c 93       	st	X, r25
    17c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c2:	fe 01       	movw	r30, r28
    17c4:	eb 58       	subi	r30, 0x8B	; 139
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	80 81       	ld	r24, Z
    17ca:	91 81       	ldd	r25, Z+1	; 0x01
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	d1 f6       	brne	.-76     	; 0x1784 <main+0x1ca>
    17d0:	27 c0       	rjmp	.+78     	; 0x1820 <main+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d2:	8e 01       	movw	r16, r28
    17d4:	0b 58       	subi	r16, 0x8B	; 139
    17d6:	1f 4f       	sbci	r17, 0xFF	; 255
    17d8:	fe 01       	movw	r30, r28
    17da:	e9 58       	subi	r30, 0x89	; 137
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	60 81       	ld	r22, Z
    17e0:	71 81       	ldd	r23, Z+1	; 0x01
    17e2:	82 81       	ldd	r24, Z+2	; 0x02
    17e4:	93 81       	ldd	r25, Z+3	; 0x03
    17e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	f8 01       	movw	r30, r16
    17f0:	91 83       	std	Z+1, r25	; 0x01
    17f2:	80 83       	st	Z, r24
    17f4:	de 01       	movw	r26, r28
    17f6:	af 58       	subi	r26, 0x8F	; 143
    17f8:	bf 4f       	sbci	r27, 0xFF	; 255
    17fa:	fe 01       	movw	r30, r28
    17fc:	eb 58       	subi	r30, 0x8B	; 139
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	80 81       	ld	r24, Z
    1802:	91 81       	ldd	r25, Z+1	; 0x01
    1804:	8d 93       	st	X+, r24
    1806:	9c 93       	st	X, r25
    1808:	fe 01       	movw	r30, r28
    180a:	ef 58       	subi	r30, 0x8F	; 143
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	80 81       	ld	r24, Z
    1810:	91 81       	ldd	r25, Z+1	; 0x01
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <main+0x258>
    1816:	fe 01       	movw	r30, r28
    1818:	ef 58       	subi	r30, 0x8F	; 143
    181a:	ff 4f       	sbci	r31, 0xFF	; 255
    181c:	91 83       	std	Z+1, r25	; 0x01
    181e:	80 83       	st	Z, r24
		_delay_ms(1500);

		UART_sendByte(PASSWORD1);
    1820:	82 e0       	ldi	r24, 0x02	; 2
    1822:	0e 94 ce 1c 	call	0x399c	; 0x399c <UART_sendByte>

		/*receive password 2 times from the user*/
		recievePassword();
    1826:	0e 94 b5 05 	call	0xb6a	; 0xb6a <recievePassword>

		/*if passwords match break the while loop*/
		if (g_receivedByte == PASSWORDS_MATCH)
    182a:	80 91 ae 01 	lds	r24, 0x01AE
    182e:	81 3f       	cpi	r24, 0xF1	; 241
    1830:	09 f4       	brne	.+2      	; 0x1834 <main+0x27a>
    1832:	81 c1       	rjmp	.+770    	; 0x1b36 <main+0x57c>
			break;
		else {
			LCD_clearScreen();
    1834:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_clearScreen>
			/*display a message if the passwords do not match while signing in*/
			LCD_displayStringRowColumn(0, 0, "Passwords don't");
    1838:	27 ef       	ldi	r18, 0xF7	; 247
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	a9 01       	movw	r20, r18
    1842:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "Match");
    1846:	27 e0       	ldi	r18, 0x07	; 7
    1848:	31 e0       	ldi	r19, 0x01	; 1
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	60 e0       	ldi	r22, 0x00	; 0
    184e:	a9 01       	movw	r20, r18
    1850:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
    1854:	fe 01       	movw	r30, r28
    1856:	e3 59       	subi	r30, 0x93	; 147
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	aa e7       	ldi	r26, 0x7A	; 122
    1860:	b4 e4       	ldi	r27, 0x44	; 68
    1862:	80 83       	st	Z, r24
    1864:	91 83       	std	Z+1, r25	; 0x01
    1866:	a2 83       	std	Z+2, r26	; 0x02
    1868:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186a:	8e 01       	movw	r16, r28
    186c:	07 59       	subi	r16, 0x97	; 151
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	fe 01       	movw	r30, r28
    1872:	e3 59       	subi	r30, 0x93	; 147
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	60 81       	ld	r22, Z
    1878:	71 81       	ldd	r23, Z+1	; 0x01
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	93 81       	ldd	r25, Z+3	; 0x03
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	4a ef       	ldi	r20, 0xFA	; 250
    1884:	54 e4       	ldi	r21, 0x44	; 68
    1886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	f8 01       	movw	r30, r16
    1890:	80 83       	st	Z, r24
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	a2 83       	std	Z+2, r26	; 0x02
    1896:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1898:	fe 01       	movw	r30, r28
    189a:	e7 59       	subi	r30, 0x97	; 151
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	60 81       	ld	r22, Z
    18a0:	71 81       	ldd	r23, Z+1	; 0x01
    18a2:	82 81       	ldd	r24, Z+2	; 0x02
    18a4:	93 81       	ldd	r25, Z+3	; 0x03
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e8       	ldi	r20, 0x80	; 128
    18ac:	5f e3       	ldi	r21, 0x3F	; 63
    18ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18b2:	88 23       	and	r24, r24
    18b4:	44 f4       	brge	.+16     	; 0x18c6 <main+0x30c>
		__ticks = 1;
    18b6:	fe 01       	movw	r30, r28
    18b8:	e9 59       	subi	r30, 0x99	; 153
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	91 83       	std	Z+1, r25	; 0x01
    18c2:	80 83       	st	Z, r24
    18c4:	64 c0       	rjmp	.+200    	; 0x198e <main+0x3d4>
	else if (__tmp > 65535)
    18c6:	fe 01       	movw	r30, r28
    18c8:	e7 59       	subi	r30, 0x97	; 151
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	60 81       	ld	r22, Z
    18ce:	71 81       	ldd	r23, Z+1	; 0x01
    18d0:	82 81       	ldd	r24, Z+2	; 0x02
    18d2:	93 81       	ldd	r25, Z+3	; 0x03
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	3f ef       	ldi	r19, 0xFF	; 255
    18d8:	4f e7       	ldi	r20, 0x7F	; 127
    18da:	57 e4       	ldi	r21, 0x47	; 71
    18dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e0:	18 16       	cp	r1, r24
    18e2:	0c f0       	brlt	.+2      	; 0x18e6 <main+0x32c>
    18e4:	43 c0       	rjmp	.+134    	; 0x196c <main+0x3b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e6:	fe 01       	movw	r30, r28
    18e8:	e3 59       	subi	r30, 0x93	; 147
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	60 81       	ld	r22, Z
    18ee:	71 81       	ldd	r23, Z+1	; 0x01
    18f0:	82 81       	ldd	r24, Z+2	; 0x02
    18f2:	93 81       	ldd	r25, Z+3	; 0x03
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	51 e4       	ldi	r21, 0x41	; 65
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	8e 01       	movw	r16, r28
    1906:	09 59       	subi	r16, 0x99	; 153
    1908:	1f 4f       	sbci	r17, 0xFF	; 255
    190a:	bc 01       	movw	r22, r24
    190c:	cd 01       	movw	r24, r26
    190e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	f8 01       	movw	r30, r16
    1918:	91 83       	std	Z+1, r25	; 0x01
    191a:	80 83       	st	Z, r24
    191c:	1f c0       	rjmp	.+62     	; 0x195c <main+0x3a2>
    191e:	fe 01       	movw	r30, r28
    1920:	eb 59       	subi	r30, 0x9B	; 155
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	88 ec       	ldi	r24, 0xC8	; 200
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	80 83       	st	Z, r24
    192c:	fe 01       	movw	r30, r28
    192e:	eb 59       	subi	r30, 0x9B	; 155
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	80 81       	ld	r24, Z
    1934:	91 81       	ldd	r25, Z+1	; 0x01
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	f1 f7       	brne	.-4      	; 0x1936 <main+0x37c>
    193a:	fe 01       	movw	r30, r28
    193c:	eb 59       	subi	r30, 0x9B	; 155
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	91 83       	std	Z+1, r25	; 0x01
    1942:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1944:	de 01       	movw	r26, r28
    1946:	a9 59       	subi	r26, 0x99	; 153
    1948:	bf 4f       	sbci	r27, 0xFF	; 255
    194a:	fe 01       	movw	r30, r28
    194c:	e9 59       	subi	r30, 0x99	; 153
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	80 81       	ld	r24, Z
    1952:	91 81       	ldd	r25, Z+1	; 0x01
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	11 96       	adiw	r26, 0x01	; 1
    1958:	9c 93       	st	X, r25
    195a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195c:	fe 01       	movw	r30, r28
    195e:	e9 59       	subi	r30, 0x99	; 153
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	80 81       	ld	r24, Z
    1964:	91 81       	ldd	r25, Z+1	; 0x01
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	d1 f6       	brne	.-76     	; 0x191e <main+0x364>
    196a:	27 c0       	rjmp	.+78     	; 0x19ba <main+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    196c:	8e 01       	movw	r16, r28
    196e:	09 59       	subi	r16, 0x99	; 153
    1970:	1f 4f       	sbci	r17, 0xFF	; 255
    1972:	fe 01       	movw	r30, r28
    1974:	e7 59       	subi	r30, 0x97	; 151
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	60 81       	ld	r22, Z
    197a:	71 81       	ldd	r23, Z+1	; 0x01
    197c:	82 81       	ldd	r24, Z+2	; 0x02
    197e:	93 81       	ldd	r25, Z+3	; 0x03
    1980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	f8 01       	movw	r30, r16
    198a:	91 83       	std	Z+1, r25	; 0x01
    198c:	80 83       	st	Z, r24
    198e:	de 01       	movw	r26, r28
    1990:	ad 59       	subi	r26, 0x9D	; 157
    1992:	bf 4f       	sbci	r27, 0xFF	; 255
    1994:	fe 01       	movw	r30, r28
    1996:	e9 59       	subi	r30, 0x99	; 153
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	80 81       	ld	r24, Z
    199c:	91 81       	ldd	r25, Z+1	; 0x01
    199e:	8d 93       	st	X+, r24
    19a0:	9c 93       	st	X, r25
    19a2:	fe 01       	movw	r30, r28
    19a4:	ed 59       	subi	r30, 0x9D	; 157
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	80 81       	ld	r24, Z
    19aa:	91 81       	ldd	r25, Z+1	; 0x01
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <main+0x3f2>
    19b0:	fe 01       	movw	r30, r28
    19b2:	ed 59       	subi	r30, 0x9D	; 157
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	91 83       	std	Z+1, r25	; 0x01
    19b8:	80 83       	st	Z, r24
			_delay_ms(1000);

			LCD_clearScreen();
    19ba:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Try again");
    19be:	2d e0       	ldi	r18, 0x0D	; 13
    19c0:	31 e0       	ldi	r19, 0x01	; 1
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	60 e0       	ldi	r22, 0x00	; 0
    19c6:	a9 01       	movw	r20, r18
    19c8:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
    19cc:	fe 01       	movw	r30, r28
    19ce:	e1 5a       	subi	r30, 0xA1	; 161
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	aa ef       	ldi	r26, 0xFA	; 250
    19d8:	b3 e4       	ldi	r27, 0x43	; 67
    19da:	80 83       	st	Z, r24
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	a2 83       	std	Z+2, r26	; 0x02
    19e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e2:	8e 01       	movw	r16, r28
    19e4:	05 5a       	subi	r16, 0xA5	; 165
    19e6:	1f 4f       	sbci	r17, 0xFF	; 255
    19e8:	fe 01       	movw	r30, r28
    19ea:	e1 5a       	subi	r30, 0xA1	; 161
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	60 81       	ld	r22, Z
    19f0:	71 81       	ldd	r23, Z+1	; 0x01
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	93 81       	ldd	r25, Z+3	; 0x03
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	4a ef       	ldi	r20, 0xFA	; 250
    19fc:	54 e4       	ldi	r21, 0x44	; 68
    19fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	f8 01       	movw	r30, r16
    1a08:	80 83       	st	Z, r24
    1a0a:	91 83       	std	Z+1, r25	; 0x01
    1a0c:	a2 83       	std	Z+2, r26	; 0x02
    1a0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a10:	fe 01       	movw	r30, r28
    1a12:	e5 5a       	subi	r30, 0xA5	; 165
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	60 81       	ld	r22, Z
    1a18:	71 81       	ldd	r23, Z+1	; 0x01
    1a1a:	82 81       	ldd	r24, Z+2	; 0x02
    1a1c:	93 81       	ldd	r25, Z+3	; 0x03
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e8       	ldi	r20, 0x80	; 128
    1a24:	5f e3       	ldi	r21, 0x3F	; 63
    1a26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a2a:	88 23       	and	r24, r24
    1a2c:	44 f4       	brge	.+16     	; 0x1a3e <main+0x484>
		__ticks = 1;
    1a2e:	fe 01       	movw	r30, r28
    1a30:	e7 5a       	subi	r30, 0xA7	; 167
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	80 83       	st	Z, r24
    1a3c:	64 c0       	rjmp	.+200    	; 0x1b06 <main+0x54c>
	else if (__tmp > 65535)
    1a3e:	fe 01       	movw	r30, r28
    1a40:	e5 5a       	subi	r30, 0xA5	; 165
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	60 81       	ld	r22, Z
    1a46:	71 81       	ldd	r23, Z+1	; 0x01
    1a48:	82 81       	ldd	r24, Z+2	; 0x02
    1a4a:	93 81       	ldd	r25, Z+3	; 0x03
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	3f ef       	ldi	r19, 0xFF	; 255
    1a50:	4f e7       	ldi	r20, 0x7F	; 127
    1a52:	57 e4       	ldi	r21, 0x47	; 71
    1a54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a58:	18 16       	cp	r1, r24
    1a5a:	0c f0       	brlt	.+2      	; 0x1a5e <main+0x4a4>
    1a5c:	43 c0       	rjmp	.+134    	; 0x1ae4 <main+0x52a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5e:	fe 01       	movw	r30, r28
    1a60:	e1 5a       	subi	r30, 0xA1	; 161
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	60 81       	ld	r22, Z
    1a66:	71 81       	ldd	r23, Z+1	; 0x01
    1a68:	82 81       	ldd	r24, Z+2	; 0x02
    1a6a:	93 81       	ldd	r25, Z+3	; 0x03
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e2       	ldi	r20, 0x20	; 32
    1a72:	51 e4       	ldi	r21, 0x41	; 65
    1a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	8e 01       	movw	r16, r28
    1a7e:	07 5a       	subi	r16, 0xA7	; 167
    1a80:	1f 4f       	sbci	r17, 0xFF	; 255
    1a82:	bc 01       	movw	r22, r24
    1a84:	cd 01       	movw	r24, r26
    1a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	f8 01       	movw	r30, r16
    1a90:	91 83       	std	Z+1, r25	; 0x01
    1a92:	80 83       	st	Z, r24
    1a94:	1f c0       	rjmp	.+62     	; 0x1ad4 <main+0x51a>
    1a96:	fe 01       	movw	r30, r28
    1a98:	e9 5a       	subi	r30, 0xA9	; 169
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	88 ec       	ldi	r24, 0xC8	; 200
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	91 83       	std	Z+1, r25	; 0x01
    1aa2:	80 83       	st	Z, r24
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	e9 5a       	subi	r30, 0xA9	; 169
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	80 81       	ld	r24, Z
    1aac:	91 81       	ldd	r25, Z+1	; 0x01
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <main+0x4f4>
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e9 5a       	subi	r30, 0xA9	; 169
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	91 83       	std	Z+1, r25	; 0x01
    1aba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abc:	de 01       	movw	r26, r28
    1abe:	a7 5a       	subi	r26, 0xA7	; 167
    1ac0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e7 5a       	subi	r30, 0xA7	; 167
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	80 81       	ld	r24, Z
    1aca:	91 81       	ldd	r25, Z+1	; 0x01
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	11 96       	adiw	r26, 0x01	; 1
    1ad0:	9c 93       	st	X, r25
    1ad2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e7 5a       	subi	r30, 0xA7	; 167
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	d1 f6       	brne	.-76     	; 0x1a96 <main+0x4dc>
    1ae2:	db cd       	rjmp	.-1098   	; 0x169a <main+0xe0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae4:	8e 01       	movw	r16, r28
    1ae6:	07 5a       	subi	r16, 0xA7	; 167
    1ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aea:	fe 01       	movw	r30, r28
    1aec:	e5 5a       	subi	r30, 0xA5	; 165
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	60 81       	ld	r22, Z
    1af2:	71 81       	ldd	r23, Z+1	; 0x01
    1af4:	82 81       	ldd	r24, Z+2	; 0x02
    1af6:	93 81       	ldd	r25, Z+3	; 0x03
    1af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	f8 01       	movw	r30, r16
    1b02:	91 83       	std	Z+1, r25	; 0x01
    1b04:	80 83       	st	Z, r24
    1b06:	de 01       	movw	r26, r28
    1b08:	ab 5a       	subi	r26, 0xAB	; 171
    1b0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	e7 5a       	subi	r30, 0xA7	; 167
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	80 81       	ld	r24, Z
    1b14:	91 81       	ldd	r25, Z+1	; 0x01
    1b16:	11 96       	adiw	r26, 0x01	; 1
    1b18:	9c 93       	st	X, r25
    1b1a:	8e 93       	st	-X, r24
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	eb 5a       	subi	r30, 0xAB	; 171
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	80 81       	ld	r24, Z
    1b24:	91 81       	ldd	r25, Z+1	; 0x01
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <main+0x56c>
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	eb 5a       	subi	r30, 0xAB	; 171
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	80 83       	st	Z, r24
    1b34:	b2 cd       	rjmp	.-1180   	; 0x169a <main+0xe0>
		}

	}

	while(1){
		LCD_clearScreen();
    1b36:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_clearScreen>
		/*display the main options*/
		LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    1b3a:	27 e1       	ldi	r18, 0x17	; 23
    1b3c:	31 e0       	ldi	r19, 0x01	; 1
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	a9 01       	movw	r20, r18
    1b44:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "- : Change pass");
    1b48:	25 e2       	ldi	r18, 0x25	; 37
    1b4a:	31 e0       	ldi	r19, 0x01	; 1
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	a9 01       	movw	r20, r18
    1b52:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
    1b56:	fe 01       	movw	r30, r28
    1b58:	ef 5a       	subi	r30, 0xAF	; 175
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	a8 ec       	ldi	r26, 0xC8	; 200
    1b62:	b2 e4       	ldi	r27, 0x42	; 66
    1b64:	80 83       	st	Z, r24
    1b66:	91 83       	std	Z+1, r25	; 0x01
    1b68:	a2 83       	std	Z+2, r26	; 0x02
    1b6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6c:	8e 01       	movw	r16, r28
    1b6e:	03 5b       	subi	r16, 0xB3	; 179
    1b70:	1f 4f       	sbci	r17, 0xFF	; 255
    1b72:	fe 01       	movw	r30, r28
    1b74:	ef 5a       	subi	r30, 0xAF	; 175
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	60 81       	ld	r22, Z
    1b7a:	71 81       	ldd	r23, Z+1	; 0x01
    1b7c:	82 81       	ldd	r24, Z+2	; 0x02
    1b7e:	93 81       	ldd	r25, Z+3	; 0x03
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	4a ef       	ldi	r20, 0xFA	; 250
    1b86:	54 e4       	ldi	r21, 0x44	; 68
    1b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	f8 01       	movw	r30, r16
    1b92:	80 83       	st	Z, r24
    1b94:	91 83       	std	Z+1, r25	; 0x01
    1b96:	a2 83       	std	Z+2, r26	; 0x02
    1b98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e3 5b       	subi	r30, 0xB3	; 179
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	60 81       	ld	r22, Z
    1ba2:	71 81       	ldd	r23, Z+1	; 0x01
    1ba4:	82 81       	ldd	r24, Z+2	; 0x02
    1ba6:	93 81       	ldd	r25, Z+3	; 0x03
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e8       	ldi	r20, 0x80	; 128
    1bae:	5f e3       	ldi	r21, 0x3F	; 63
    1bb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb4:	88 23       	and	r24, r24
    1bb6:	44 f4       	brge	.+16     	; 0x1bc8 <main+0x60e>
		__ticks = 1;
    1bb8:	fe 01       	movw	r30, r28
    1bba:	e5 5b       	subi	r30, 0xB5	; 181
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	91 83       	std	Z+1, r25	; 0x01
    1bc4:	80 83       	st	Z, r24
    1bc6:	64 c0       	rjmp	.+200    	; 0x1c90 <main+0x6d6>
	else if (__tmp > 65535)
    1bc8:	fe 01       	movw	r30, r28
    1bca:	e3 5b       	subi	r30, 0xB3	; 179
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	60 81       	ld	r22, Z
    1bd0:	71 81       	ldd	r23, Z+1	; 0x01
    1bd2:	82 81       	ldd	r24, Z+2	; 0x02
    1bd4:	93 81       	ldd	r25, Z+3	; 0x03
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	3f ef       	ldi	r19, 0xFF	; 255
    1bda:	4f e7       	ldi	r20, 0x7F	; 127
    1bdc:	57 e4       	ldi	r21, 0x47	; 71
    1bde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be2:	18 16       	cp	r1, r24
    1be4:	0c f0       	brlt	.+2      	; 0x1be8 <main+0x62e>
    1be6:	43 c0       	rjmp	.+134    	; 0x1c6e <main+0x6b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be8:	fe 01       	movw	r30, r28
    1bea:	ef 5a       	subi	r30, 0xAF	; 175
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	40 e2       	ldi	r20, 0x20	; 32
    1bfc:	51 e4       	ldi	r21, 0x41	; 65
    1bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	8e 01       	movw	r16, r28
    1c08:	05 5b       	subi	r16, 0xB5	; 181
    1c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	f8 01       	movw	r30, r16
    1c1a:	91 83       	std	Z+1, r25	; 0x01
    1c1c:	80 83       	st	Z, r24
    1c1e:	1f c0       	rjmp	.+62     	; 0x1c5e <main+0x6a4>
    1c20:	fe 01       	movw	r30, r28
    1c22:	e7 5b       	subi	r30, 0xB7	; 183
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	88 ec       	ldi	r24, 0xC8	; 200
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	91 83       	std	Z+1, r25	; 0x01
    1c2c:	80 83       	st	Z, r24
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e7 5b       	subi	r30, 0xB7	; 183
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	80 81       	ld	r24, Z
    1c36:	91 81       	ldd	r25, Z+1	; 0x01
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	f1 f7       	brne	.-4      	; 0x1c38 <main+0x67e>
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	e7 5b       	subi	r30, 0xB7	; 183
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c46:	de 01       	movw	r26, r28
    1c48:	a5 5b       	subi	r26, 0xB5	; 181
    1c4a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	e5 5b       	subi	r30, 0xB5	; 181
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	80 81       	ld	r24, Z
    1c54:	91 81       	ldd	r25, Z+1	; 0x01
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	11 96       	adiw	r26, 0x01	; 1
    1c5a:	9c 93       	st	X, r25
    1c5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e5 5b       	subi	r30, 0xB5	; 181
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	80 81       	ld	r24, Z
    1c66:	91 81       	ldd	r25, Z+1	; 0x01
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	d1 f6       	brne	.-76     	; 0x1c20 <main+0x666>
    1c6c:	27 c0       	rjmp	.+78     	; 0x1cbc <main+0x702>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6e:	8e 01       	movw	r16, r28
    1c70:	05 5b       	subi	r16, 0xB5	; 181
    1c72:	1f 4f       	sbci	r17, 0xFF	; 255
    1c74:	fe 01       	movw	r30, r28
    1c76:	e3 5b       	subi	r30, 0xB3	; 179
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	60 81       	ld	r22, Z
    1c7c:	71 81       	ldd	r23, Z+1	; 0x01
    1c7e:	82 81       	ldd	r24, Z+2	; 0x02
    1c80:	93 81       	ldd	r25, Z+3	; 0x03
    1c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	f8 01       	movw	r30, r16
    1c8c:	91 83       	std	Z+1, r25	; 0x01
    1c8e:	80 83       	st	Z, r24
    1c90:	de 01       	movw	r26, r28
    1c92:	a9 5b       	subi	r26, 0xB9	; 185
    1c94:	bf 4f       	sbci	r27, 0xFF	; 255
    1c96:	fe 01       	movw	r30, r28
    1c98:	e5 5b       	subi	r30, 0xB5	; 181
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	80 81       	ld	r24, Z
    1c9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ca0:	8d 93       	st	X+, r24
    1ca2:	9c 93       	st	X, r25
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	e9 5b       	subi	r30, 0xB9	; 185
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	80 81       	ld	r24, Z
    1cac:	91 81       	ldd	r25, Z+1	; 0x01
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <main+0x6f4>
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	e9 5b       	subi	r30, 0xB9	; 185
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	91 83       	std	Z+1, r25	; 0x01
    1cba:	80 83       	st	Z, r24
		_delay_ms(100);


		/*wait until the user enters '+' to open door or '-' to change password*/
		while (1) {
			pressedKey = KEYPAD_getPressedKey();
    1cbc:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <KEYPAD_getPressedKey>
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	ef 57       	subi	r30, 0x7F	; 127
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	80 83       	st	Z, r24
			if (pressedKey == OPEN_DOOR || pressedKey == CHANGE_PASSWORD)
    1cc8:	fe 01       	movw	r30, r28
    1cca:	ef 57       	subi	r30, 0x7F	; 127
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	80 81       	ld	r24, Z
    1cd0:	8b 32       	cpi	r24, 0x2B	; 43
    1cd2:	31 f0       	breq	.+12     	; 0x1ce0 <main+0x726>
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	ef 57       	subi	r30, 0x7F	; 127
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	80 81       	ld	r24, Z
    1cdc:	8d 32       	cpi	r24, 0x2D	; 45
    1cde:	71 f7       	brne	.-36     	; 0x1cbc <main+0x702>
				break;
		}
		LCD_clearScreen();
    1ce0:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_clearScreen>
		uint8 trialCounter;

		/*check for password validity
		 *user has only 3 trials for password entries
		 */
		for (trialCounter = 0; trialCounter < 3; ++trialCounter) {
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e0 58       	subi	r30, 0x80	; 128
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	10 82       	st	Z, r1
    1cec:	b1 c0       	rjmp	.+354    	; 0x1e50 <main+0x896>

			/*send to Control_ECU PASSWORD2 command */
			UART_sendByte(PASSWORD2);
    1cee:	83 e0       	ldi	r24, 0x03	; 3
    1cf0:	0e 94 ce 1c 	call	0x399c	; 0x399c <UART_sendByte>

			LCD_displayStringRowColumn(0, 0, "plz enter pass:");
    1cf4:	20 e6       	ldi	r18, 0x60	; 96
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	a9 01       	movw	r20, r18
    1cfe:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 6);
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	66 e0       	ldi	r22, 0x06	; 6
    1d06:	0e 94 cc 1b 	call	0x3798	; 0x3798 <LCD_moveCursor>

			verifyPassword();
    1d0a:	0e 94 c6 08 	call	0x118c	; 0x118c <verifyPassword>

			/*if the password is right break the loop*/
			if (g_receivedByte == PASSWORDS_MATCH) {
    1d0e:	80 91 ae 01 	lds	r24, 0x01AE
    1d12:	81 3f       	cpi	r24, 0xF1	; 241
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <main+0x75e>
    1d16:	a3 c0       	rjmp	.+326    	; 0x1e5e <main+0x8a4>
				break;
			}

			LCD_displayStringRowColumn(0, 0, "WRONG PASS     ");
    1d18:	25 e3       	ldi	r18, 0x35	; 53
    1d1a:	31 e0       	ldi	r19, 0x01	; 1
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	a9 01       	movw	r20, r18
    1d22:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "              ");
    1d26:	25 e4       	ldi	r18, 0x45	; 69
    1d28:	31 e0       	ldi	r19, 0x01	; 1
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	a9 01       	movw	r20, r18
    1d30:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
    1d34:	fe 01       	movw	r30, r28
    1d36:	ed 5b       	subi	r30, 0xBD	; 189
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	aa ef       	ldi	r26, 0xFA	; 250
    1d40:	b3 e4       	ldi	r27, 0x43	; 67
    1d42:	80 83       	st	Z, r24
    1d44:	91 83       	std	Z+1, r25	; 0x01
    1d46:	a2 83       	std	Z+2, r26	; 0x02
    1d48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4a:	8e 01       	movw	r16, r28
    1d4c:	01 5c       	subi	r16, 0xC1	; 193
    1d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d50:	fe 01       	movw	r30, r28
    1d52:	ed 5b       	subi	r30, 0xBD	; 189
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	60 81       	ld	r22, Z
    1d58:	71 81       	ldd	r23, Z+1	; 0x01
    1d5a:	82 81       	ldd	r24, Z+2	; 0x02
    1d5c:	93 81       	ldd	r25, Z+3	; 0x03
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	4a ef       	ldi	r20, 0xFA	; 250
    1d64:	54 e4       	ldi	r21, 0x44	; 68
    1d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	f8 01       	movw	r30, r16
    1d70:	80 83       	st	Z, r24
    1d72:	91 83       	std	Z+1, r25	; 0x01
    1d74:	a2 83       	std	Z+2, r26	; 0x02
    1d76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d78:	fe 01       	movw	r30, r28
    1d7a:	ff 96       	adiw	r30, 0x3f	; 63
    1d7c:	60 81       	ld	r22, Z
    1d7e:	71 81       	ldd	r23, Z+1	; 0x01
    1d80:	82 81       	ldd	r24, Z+2	; 0x02
    1d82:	93 81       	ldd	r25, Z+3	; 0x03
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 e8       	ldi	r20, 0x80	; 128
    1d8a:	5f e3       	ldi	r21, 0x3F	; 63
    1d8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d90:	88 23       	and	r24, r24
    1d92:	2c f4       	brge	.+10     	; 0x1d9e <main+0x7e4>
		__ticks = 1;
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	9e af       	std	Y+62, r25	; 0x3e
    1d9a:	8d af       	std	Y+61, r24	; 0x3d
    1d9c:	46 c0       	rjmp	.+140    	; 0x1e2a <main+0x870>
	else if (__tmp > 65535)
    1d9e:	fe 01       	movw	r30, r28
    1da0:	ff 96       	adiw	r30, 0x3f	; 63
    1da2:	60 81       	ld	r22, Z
    1da4:	71 81       	ldd	r23, Z+1	; 0x01
    1da6:	82 81       	ldd	r24, Z+2	; 0x02
    1da8:	93 81       	ldd	r25, Z+3	; 0x03
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	3f ef       	ldi	r19, 0xFF	; 255
    1dae:	4f e7       	ldi	r20, 0x7F	; 127
    1db0:	57 e4       	ldi	r21, 0x47	; 71
    1db2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1db6:	18 16       	cp	r1, r24
    1db8:	64 f5       	brge	.+88     	; 0x1e12 <main+0x858>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dba:	fe 01       	movw	r30, r28
    1dbc:	ed 5b       	subi	r30, 0xBD	; 189
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	60 81       	ld	r22, Z
    1dc2:	71 81       	ldd	r23, Z+1	; 0x01
    1dc4:	82 81       	ldd	r24, Z+2	; 0x02
    1dc6:	93 81       	ldd	r25, Z+3	; 0x03
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e2       	ldi	r20, 0x20	; 32
    1dce:	51 e4       	ldi	r21, 0x41	; 65
    1dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	bc 01       	movw	r22, r24
    1dda:	cd 01       	movw	r24, r26
    1ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	9e af       	std	Y+62, r25	; 0x3e
    1de6:	8d af       	std	Y+61, r24	; 0x3d
    1de8:	0f c0       	rjmp	.+30     	; 0x1e08 <main+0x84e>
    1dea:	88 ec       	ldi	r24, 0xC8	; 200
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	9c af       	std	Y+60, r25	; 0x3c
    1df0:	8b af       	std	Y+59, r24	; 0x3b
    1df2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1df4:	9c ad       	ldd	r25, Y+60	; 0x3c
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <main+0x83c>
    1dfa:	9c af       	std	Y+60, r25	; 0x3c
    1dfc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e00:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	9e af       	std	Y+62, r25	; 0x3e
    1e06:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e08:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	69 f7       	brne	.-38     	; 0x1dea <main+0x830>
    1e10:	16 c0       	rjmp	.+44     	; 0x1e3e <main+0x884>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e12:	fe 01       	movw	r30, r28
    1e14:	ff 96       	adiw	r30, 0x3f	; 63
    1e16:	60 81       	ld	r22, Z
    1e18:	71 81       	ldd	r23, Z+1	; 0x01
    1e1a:	82 81       	ldd	r24, Z+2	; 0x02
    1e1c:	93 81       	ldd	r25, Z+3	; 0x03
    1e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	9e af       	std	Y+62, r25	; 0x3e
    1e28:	8d af       	std	Y+61, r24	; 0x3d
    1e2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e2e:	9a af       	std	Y+58, r25	; 0x3a
    1e30:	89 af       	std	Y+57, r24	; 0x39
    1e32:	89 ad       	ldd	r24, Y+57	; 0x39
    1e34:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <main+0x87c>
    1e3a:	9a af       	std	Y+58, r25	; 0x3a
    1e3c:	89 af       	std	Y+57, r24	; 0x39
		uint8 trialCounter;

		/*check for password validity
		 *user has only 3 trials for password entries
		 */
		for (trialCounter = 0; trialCounter < 3; ++trialCounter) {
    1e3e:	de 01       	movw	r26, r28
    1e40:	a0 58       	subi	r26, 0x80	; 128
    1e42:	bf 4f       	sbci	r27, 0xFF	; 255
    1e44:	fe 01       	movw	r30, r28
    1e46:	e0 58       	subi	r30, 0x80	; 128
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	80 81       	ld	r24, Z
    1e4c:	8f 5f       	subi	r24, 0xFF	; 255
    1e4e:	8c 93       	st	X, r24
    1e50:	fe 01       	movw	r30, r28
    1e52:	e0 58       	subi	r30, 0x80	; 128
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	80 81       	ld	r24, Z
    1e58:	83 30       	cpi	r24, 0x03	; 3
    1e5a:	08 f4       	brcc	.+2      	; 0x1e5e <main+0x8a4>
    1e5c:	48 cf       	rjmp	.-368    	; 0x1cee <main+0x734>

		/*if all 3 trials were wrong entries
		 * alert CONTROL_ECU
		 * turn buzzer on
		 */
		if (g_receivedByte == PASSWORDS_NOT_MATCH) {
    1e5e:	80 91 ae 01 	lds	r24, 0x01AE
    1e62:	8f 3f       	cpi	r24, 0xFF	; 255
    1e64:	31 f4       	brne	.+12     	; 0x1e72 <main+0x8b8>
			UART_sendByte(WRONG_TRIAL_3);
    1e66:	80 e2       	ldi	r24, 0x20	; 32
    1e68:	0e 94 ce 1c 	call	0x399c	; 0x399c <UART_sendByte>
			buzzerOperation();
    1e6c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <buzzerOperation>
    1e70:	62 ce       	rjmp	.-828    	; 0x1b36 <main+0x57c>
		}
		 /* if the pressed key is open door
		 * send to CONTROL_ECU open door command
		 */
		else if (pressedKey == OPEN_DOOR) {
    1e72:	fe 01       	movw	r30, r28
    1e74:	ef 57       	subi	r30, 0x7F	; 127
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	80 81       	ld	r24, Z
    1e7a:	8b 32       	cpi	r24, 0x2B	; 43
    1e7c:	31 f4       	brne	.+12     	; 0x1e8a <main+0x8d0>
			UART_sendByte('+');
    1e7e:	8b e2       	ldi	r24, 0x2B	; 43
    1e80:	0e 94 ce 1c 	call	0x399c	; 0x399c <UART_sendByte>
			doorOperation();
    1e84:	0e 94 02 0a 	call	0x1404	; 0x1404 <doorOperation>
    1e88:	56 ce       	rjmp	.-852    	; 0x1b36 <main+0x57c>
		 * if the pressed key is change password
		 * the user has 3 trials to enter the password and verify it
		 * if the user wronged all trials
		 * the buzzer is turned on for 1 minute
		 */
		else if (pressedKey == CHANGE_PASSWORD) {
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	ef 57       	subi	r30, 0x7F	; 127
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	80 81       	ld	r24, Z
    1e92:	8d 32       	cpi	r24, 0x2D	; 45
    1e94:	09 f0       	breq	.+2      	; 0x1e98 <main+0x8de>
    1e96:	4f ce       	rjmp	.-866    	; 0x1b36 <main+0x57c>
			LCD_clearScreen();
    1e98:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_clearScreen>

			LCD_displayStringRowColumn(0, 5, "change");
    1e9c:	24 e5       	ldi	r18, 0x54	; 84
    1e9e:	31 e0       	ldi	r19, 0x01	; 1
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	65 e0       	ldi	r22, 0x05	; 5
    1ea4:	a9 01       	movw	r20, r18
    1ea6:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 2, "your password");
    1eaa:	2b e5       	ldi	r18, 0x5B	; 91
    1eac:	31 e0       	ldi	r19, 0x01	; 1
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	62 e0       	ldi	r22, 0x02	; 2
    1eb2:	a9 01       	movw	r20, r18
    1eb4:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	aa e7       	ldi	r26, 0x7A	; 122
    1ebe:	b4 e4       	ldi	r27, 0x44	; 68
    1ec0:	8d ab       	std	Y+53, r24	; 0x35
    1ec2:	9e ab       	std	Y+54, r25	; 0x36
    1ec4:	af ab       	std	Y+55, r26	; 0x37
    1ec6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec8:	6d a9       	ldd	r22, Y+53	; 0x35
    1eca:	7e a9       	ldd	r23, Y+54	; 0x36
    1ecc:	8f a9       	ldd	r24, Y+55	; 0x37
    1ece:	98 ad       	ldd	r25, Y+56	; 0x38
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	4a ef       	ldi	r20, 0xFA	; 250
    1ed6:	54 e4       	ldi	r21, 0x44	; 68
    1ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	89 ab       	std	Y+49, r24	; 0x31
    1ee2:	9a ab       	std	Y+50, r25	; 0x32
    1ee4:	ab ab       	std	Y+51, r26	; 0x33
    1ee6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ee8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eea:	7a a9       	ldd	r23, Y+50	; 0x32
    1eec:	8b a9       	ldd	r24, Y+51	; 0x33
    1eee:	9c a9       	ldd	r25, Y+52	; 0x34
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e8       	ldi	r20, 0x80	; 128
    1ef6:	5f e3       	ldi	r21, 0x3F	; 63
    1ef8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1efc:	88 23       	and	r24, r24
    1efe:	2c f4       	brge	.+10     	; 0x1f0a <main+0x950>
		__ticks = 1;
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	98 ab       	std	Y+48, r25	; 0x30
    1f06:	8f a7       	std	Y+47, r24	; 0x2f
    1f08:	3f c0       	rjmp	.+126    	; 0x1f88 <main+0x9ce>
	else if (__tmp > 65535)
    1f0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f10:	9c a9       	ldd	r25, Y+52	; 0x34
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	3f ef       	ldi	r19, 0xFF	; 255
    1f16:	4f e7       	ldi	r20, 0x7F	; 127
    1f18:	57 e4       	ldi	r21, 0x47	; 71
    1f1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f1e:	18 16       	cp	r1, r24
    1f20:	4c f5       	brge	.+82     	; 0x1f74 <main+0x9ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f22:	6d a9       	ldd	r22, Y+53	; 0x35
    1f24:	7e a9       	ldd	r23, Y+54	; 0x36
    1f26:	8f a9       	ldd	r24, Y+55	; 0x37
    1f28:	98 ad       	ldd	r25, Y+56	; 0x38
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e2       	ldi	r20, 0x20	; 32
    1f30:	51 e4       	ldi	r21, 0x41	; 65
    1f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	bc 01       	movw	r22, r24
    1f3c:	cd 01       	movw	r24, r26
    1f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	98 ab       	std	Y+48, r25	; 0x30
    1f48:	8f a7       	std	Y+47, r24	; 0x2f
    1f4a:	0f c0       	rjmp	.+30     	; 0x1f6a <main+0x9b0>
    1f4c:	88 ec       	ldi	r24, 0xC8	; 200
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	9e a7       	std	Y+46, r25	; 0x2e
    1f52:	8d a7       	std	Y+45, r24	; 0x2d
    1f54:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f56:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <main+0x99e>
    1f5c:	9e a7       	std	Y+46, r25	; 0x2e
    1f5e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f62:	98 a9       	ldd	r25, Y+48	; 0x30
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	98 ab       	std	Y+48, r25	; 0x30
    1f68:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f6c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	69 f7       	brne	.-38     	; 0x1f4c <main+0x992>
    1f72:	14 c0       	rjmp	.+40     	; 0x1f9c <main+0x9e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f74:	69 a9       	ldd	r22, Y+49	; 0x31
    1f76:	7a a9       	ldd	r23, Y+50	; 0x32
    1f78:	8b a9       	ldd	r24, Y+51	; 0x33
    1f7a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	98 ab       	std	Y+48, r25	; 0x30
    1f86:	8f a7       	std	Y+47, r24	; 0x2f
    1f88:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f8a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f8c:	9c a7       	std	Y+44, r25	; 0x2c
    1f8e:	8b a7       	std	Y+43, r24	; 0x2b
    1f90:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f92:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <main+0x9da>
    1f98:	9c a7       	std	Y+44, r25	; 0x2c
    1f9a:	8b a7       	std	Y+43, r24	; 0x2b

			_delay_ms(1000);

			uint8 trialCounter = 0;
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	e1 58       	subi	r30, 0x81	; 129
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	10 82       	st	Z, r1

			for (trialCounter = 0; trialCounter < 3; ++trialCounter) {
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	e1 58       	subi	r30, 0x81	; 129
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	10 82       	st	Z, r1
    1fac:	16 c1       	rjmp	.+556    	; 0x21da <main+0xc20>

				UART_sendByte(CHANGE_PASSWORD);
    1fae:	8d e2       	ldi	r24, 0x2D	; 45
    1fb0:	0e 94 ce 1c 	call	0x399c	; 0x399c <UART_sendByte>

				recievePassword();
    1fb4:	0e 94 b5 05 	call	0xb6a	; 0xb6a <recievePassword>

				/*if passwords match break the for loop*/
				if (g_receivedByte == PASSWORDS_MATCH)
    1fb8:	80 91 ae 01 	lds	r24, 0x01AE
    1fbc:	81 3f       	cpi	r24, 0xF1	; 241
    1fbe:	09 f4       	brne	.+2      	; 0x1fc2 <main+0xa08>
    1fc0:	13 c1       	rjmp	.+550    	; 0x21e8 <main+0xc2e>
					break;

				else {
					/*if the password is wrong print a warning message to the user*/
					LCD_clearScreen();
    1fc2:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_clearScreen>

					LCD_displayStringRowColumn(0, 0, "passwords don't");
    1fc6:	29 e6       	ldi	r18, 0x69	; 105
    1fc8:	31 e0       	ldi	r19, 0x01	; 1
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	60 e0       	ldi	r22, 0x00	; 0
    1fce:	a9 01       	movw	r20, r18
    1fd0:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, "Match");
    1fd4:	27 e0       	ldi	r18, 0x07	; 7
    1fd6:	31 e0       	ldi	r19, 0x01	; 1
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	60 e0       	ldi	r22, 0x00	; 0
    1fdc:	a9 01       	movw	r20, r18
    1fde:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	aa e7       	ldi	r26, 0x7A	; 122
    1fe8:	b4 e4       	ldi	r27, 0x44	; 68
    1fea:	8f a3       	std	Y+39, r24	; 0x27
    1fec:	98 a7       	std	Y+40, r25	; 0x28
    1fee:	a9 a7       	std	Y+41, r26	; 0x29
    1ff0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ff4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ff6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ff8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	4a ef       	ldi	r20, 0xFA	; 250
    2000:	54 e4       	ldi	r21, 0x44	; 68
    2002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	8b a3       	std	Y+35, r24	; 0x23
    200c:	9c a3       	std	Y+36, r25	; 0x24
    200e:	ad a3       	std	Y+37, r26	; 0x25
    2010:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2012:	6b a1       	ldd	r22, Y+35	; 0x23
    2014:	7c a1       	ldd	r23, Y+36	; 0x24
    2016:	8d a1       	ldd	r24, Y+37	; 0x25
    2018:	9e a1       	ldd	r25, Y+38	; 0x26
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e8       	ldi	r20, 0x80	; 128
    2020:	5f e3       	ldi	r21, 0x3F	; 63
    2022:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2026:	88 23       	and	r24, r24
    2028:	2c f4       	brge	.+10     	; 0x2034 <main+0xa7a>
		__ticks = 1;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	9a a3       	std	Y+34, r25	; 0x22
    2030:	89 a3       	std	Y+33, r24	; 0x21
    2032:	3f c0       	rjmp	.+126    	; 0x20b2 <main+0xaf8>
	else if (__tmp > 65535)
    2034:	6b a1       	ldd	r22, Y+35	; 0x23
    2036:	7c a1       	ldd	r23, Y+36	; 0x24
    2038:	8d a1       	ldd	r24, Y+37	; 0x25
    203a:	9e a1       	ldd	r25, Y+38	; 0x26
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	3f ef       	ldi	r19, 0xFF	; 255
    2040:	4f e7       	ldi	r20, 0x7F	; 127
    2042:	57 e4       	ldi	r21, 0x47	; 71
    2044:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2048:	18 16       	cp	r1, r24
    204a:	4c f5       	brge	.+82     	; 0x209e <main+0xae4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204c:	6f a1       	ldd	r22, Y+39	; 0x27
    204e:	78 a5       	ldd	r23, Y+40	; 0x28
    2050:	89 a5       	ldd	r24, Y+41	; 0x29
    2052:	9a a5       	ldd	r25, Y+42	; 0x2a
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	40 e2       	ldi	r20, 0x20	; 32
    205a:	51 e4       	ldi	r21, 0x41	; 65
    205c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	bc 01       	movw	r22, r24
    2066:	cd 01       	movw	r24, r26
    2068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	9a a3       	std	Y+34, r25	; 0x22
    2072:	89 a3       	std	Y+33, r24	; 0x21
    2074:	0f c0       	rjmp	.+30     	; 0x2094 <main+0xada>
    2076:	88 ec       	ldi	r24, 0xC8	; 200
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	98 a3       	std	Y+32, r25	; 0x20
    207c:	8f 8f       	std	Y+31, r24	; 0x1f
    207e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2080:	98 a1       	ldd	r25, Y+32	; 0x20
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	f1 f7       	brne	.-4      	; 0x2082 <main+0xac8>
    2086:	98 a3       	std	Y+32, r25	; 0x20
    2088:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208a:	89 a1       	ldd	r24, Y+33	; 0x21
    208c:	9a a1       	ldd	r25, Y+34	; 0x22
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	9a a3       	std	Y+34, r25	; 0x22
    2092:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2094:	89 a1       	ldd	r24, Y+33	; 0x21
    2096:	9a a1       	ldd	r25, Y+34	; 0x22
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	69 f7       	brne	.-38     	; 0x2076 <main+0xabc>
    209c:	14 c0       	rjmp	.+40     	; 0x20c6 <main+0xb0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209e:	6b a1       	ldd	r22, Y+35	; 0x23
    20a0:	7c a1       	ldd	r23, Y+36	; 0x24
    20a2:	8d a1       	ldd	r24, Y+37	; 0x25
    20a4:	9e a1       	ldd	r25, Y+38	; 0x26
    20a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	9a a3       	std	Y+34, r25	; 0x22
    20b0:	89 a3       	std	Y+33, r24	; 0x21
    20b2:	89 a1       	ldd	r24, Y+33	; 0x21
    20b4:	9a a1       	ldd	r25, Y+34	; 0x22
    20b6:	9e 8f       	std	Y+30, r25	; 0x1e
    20b8:	8d 8f       	std	Y+29, r24	; 0x1d
    20ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	f1 f7       	brne	.-4      	; 0x20be <main+0xb04>
    20c2:	9e 8f       	std	Y+30, r25	; 0x1e
    20c4:	8d 8f       	std	Y+29, r24	; 0x1d

					_delay_ms(1000);

					LCD_clearScreen();
    20c6:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_clearScreen>

					/*if the user has wronged 3 trials he cannot try again*/
					if (trialCounter < 2)
    20ca:	fe 01       	movw	r30, r28
    20cc:	e1 58       	subi	r30, 0x81	; 129
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	80 81       	ld	r24, Z
    20d2:	82 30       	cpi	r24, 0x02	; 2
    20d4:	38 f4       	brcc	.+14     	; 0x20e4 <main+0xb2a>
						LCD_displayStringRowColumn(0, 0, "try again");
    20d6:	29 e7       	ldi	r18, 0x79	; 121
    20d8:	31 e0       	ldi	r19, 0x01	; 1
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	60 e0       	ldi	r22, 0x00	; 0
    20de:	a9 01       	movw	r20, r18
    20e0:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	aa ef       	ldi	r26, 0xFA	; 250
    20ea:	b3 e4       	ldi	r27, 0x43	; 67
    20ec:	89 8f       	std	Y+25, r24	; 0x19
    20ee:	9a 8f       	std	Y+26, r25	; 0x1a
    20f0:	ab 8f       	std	Y+27, r26	; 0x1b
    20f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f4:	69 8d       	ldd	r22, Y+25	; 0x19
    20f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	4a ef       	ldi	r20, 0xFA	; 250
    2102:	54 e4       	ldi	r21, 0x44	; 68
    2104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	8d 8b       	std	Y+21, r24	; 0x15
    210e:	9e 8b       	std	Y+22, r25	; 0x16
    2110:	af 8b       	std	Y+23, r26	; 0x17
    2112:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2114:	6d 89       	ldd	r22, Y+21	; 0x15
    2116:	7e 89       	ldd	r23, Y+22	; 0x16
    2118:	8f 89       	ldd	r24, Y+23	; 0x17
    211a:	98 8d       	ldd	r25, Y+24	; 0x18
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	40 e8       	ldi	r20, 0x80	; 128
    2122:	5f e3       	ldi	r21, 0x3F	; 63
    2124:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2128:	88 23       	and	r24, r24
    212a:	2c f4       	brge	.+10     	; 0x2136 <main+0xb7c>
		__ticks = 1;
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	9c 8b       	std	Y+20, r25	; 0x14
    2132:	8b 8b       	std	Y+19, r24	; 0x13
    2134:	3f c0       	rjmp	.+126    	; 0x21b4 <main+0xbfa>
	else if (__tmp > 65535)
    2136:	6d 89       	ldd	r22, Y+21	; 0x15
    2138:	7e 89       	ldd	r23, Y+22	; 0x16
    213a:	8f 89       	ldd	r24, Y+23	; 0x17
    213c:	98 8d       	ldd	r25, Y+24	; 0x18
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	3f ef       	ldi	r19, 0xFF	; 255
    2142:	4f e7       	ldi	r20, 0x7F	; 127
    2144:	57 e4       	ldi	r21, 0x47	; 71
    2146:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    214a:	18 16       	cp	r1, r24
    214c:	4c f5       	brge	.+82     	; 0x21a0 <main+0xbe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214e:	69 8d       	ldd	r22, Y+25	; 0x19
    2150:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2152:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2154:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	40 e2       	ldi	r20, 0x20	; 32
    215c:	51 e4       	ldi	r21, 0x41	; 65
    215e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	bc 01       	movw	r22, r24
    2168:	cd 01       	movw	r24, r26
    216a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	9c 8b       	std	Y+20, r25	; 0x14
    2174:	8b 8b       	std	Y+19, r24	; 0x13
    2176:	0f c0       	rjmp	.+30     	; 0x2196 <main+0xbdc>
    2178:	88 ec       	ldi	r24, 0xC8	; 200
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	9a 8b       	std	Y+18, r25	; 0x12
    217e:	89 8b       	std	Y+17, r24	; 0x11
    2180:	89 89       	ldd	r24, Y+17	; 0x11
    2182:	9a 89       	ldd	r25, Y+18	; 0x12
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	f1 f7       	brne	.-4      	; 0x2184 <main+0xbca>
    2188:	9a 8b       	std	Y+18, r25	; 0x12
    218a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218c:	8b 89       	ldd	r24, Y+19	; 0x13
    218e:	9c 89       	ldd	r25, Y+20	; 0x14
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	9c 8b       	std	Y+20, r25	; 0x14
    2194:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2196:	8b 89       	ldd	r24, Y+19	; 0x13
    2198:	9c 89       	ldd	r25, Y+20	; 0x14
    219a:	00 97       	sbiw	r24, 0x00	; 0
    219c:	69 f7       	brne	.-38     	; 0x2178 <main+0xbbe>
    219e:	14 c0       	rjmp	.+40     	; 0x21c8 <main+0xc0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a0:	6d 89       	ldd	r22, Y+21	; 0x15
    21a2:	7e 89       	ldd	r23, Y+22	; 0x16
    21a4:	8f 89       	ldd	r24, Y+23	; 0x17
    21a6:	98 8d       	ldd	r25, Y+24	; 0x18
    21a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	9c 8b       	std	Y+20, r25	; 0x14
    21b2:	8b 8b       	std	Y+19, r24	; 0x13
    21b4:	8b 89       	ldd	r24, Y+19	; 0x13
    21b6:	9c 89       	ldd	r25, Y+20	; 0x14
    21b8:	98 8b       	std	Y+16, r25	; 0x10
    21ba:	8f 87       	std	Y+15, r24	; 0x0f
    21bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21be:	98 89       	ldd	r25, Y+16	; 0x10
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	f1 f7       	brne	.-4      	; 0x21c0 <main+0xc06>
    21c4:	98 8b       	std	Y+16, r25	; 0x10
    21c6:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(1000);

			uint8 trialCounter = 0;

			for (trialCounter = 0; trialCounter < 3; ++trialCounter) {
    21c8:	de 01       	movw	r26, r28
    21ca:	a1 58       	subi	r26, 0x81	; 129
    21cc:	bf 4f       	sbci	r27, 0xFF	; 255
    21ce:	fe 01       	movw	r30, r28
    21d0:	e1 58       	subi	r30, 0x81	; 129
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	80 81       	ld	r24, Z
    21d6:	8f 5f       	subi	r24, 0xFF	; 255
    21d8:	8c 93       	st	X, r24
    21da:	fe 01       	movw	r30, r28
    21dc:	e1 58       	subi	r30, 0x81	; 129
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	80 81       	ld	r24, Z
    21e2:	83 30       	cpi	r24, 0x03	; 3
    21e4:	08 f4       	brcc	.+2      	; 0x21e8 <main+0xc2e>
    21e6:	e3 ce       	rjmp	.-570    	; 0x1fae <main+0x9f4>
			/*
			 * if the user enters password wrong for 3 times after choosing from the main menu
			 * send to Control_ECU the WRONG_TTIAL_3 command
			 * and turn on the buzzer
			 */
			if (g_receivedByte == PASSWORDS_NOT_MATCH) {
    21e8:	80 91 ae 01 	lds	r24, 0x01AE
    21ec:	8f 3f       	cpi	r24, 0xFF	; 255
    21ee:	31 f4       	brne	.+12     	; 0x21fc <main+0xc42>
				UART_sendByte(WRONG_TRIAL_3);
    21f0:	80 e2       	ldi	r24, 0x20	; 32
    21f2:	0e 94 ce 1c 	call	0x399c	; 0x399c <UART_sendByte>
				buzzerOperation();
    21f6:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <buzzerOperation>
    21fa:	9d cc       	rjmp	.-1734   	; 0x1b36 <main+0x57c>
			}
			/*
			 * in the change password option
			 * if the 2 passwords entered by the user match
			 */
			else if (g_receivedByte == PASSWORDS_MATCH) {
    21fc:	80 91 ae 01 	lds	r24, 0x01AE
    2200:	81 3f       	cpi	r24, 0xF1	; 241
    2202:	09 f0       	breq	.+2      	; 0x2206 <main+0xc4c>
    2204:	98 cc       	rjmp	.-1744   	; 0x1b36 <main+0x57c>

				LCD_clearScreen();
    2206:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_clearScreen>

				/*display a message to indicate that the password changed*/
				LCD_displayStringRowColumn(0, 0, "Pass changed");
    220a:	23 e8       	ldi	r18, 0x83	; 131
    220c:	31 e0       	ldi	r19, 0x01	; 1
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	a9 01       	movw	r20, r18
    2214:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_displayStringRowColumn>
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	aa ef       	ldi	r26, 0xFA	; 250
    221e:	b3 e4       	ldi	r27, 0x43	; 67
    2220:	8b 87       	std	Y+11, r24	; 0x0b
    2222:	9c 87       	std	Y+12, r25	; 0x0c
    2224:	ad 87       	std	Y+13, r26	; 0x0d
    2226:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2228:	6b 85       	ldd	r22, Y+11	; 0x0b
    222a:	7c 85       	ldd	r23, Y+12	; 0x0c
    222c:	8d 85       	ldd	r24, Y+13	; 0x0d
    222e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	4a ef       	ldi	r20, 0xFA	; 250
    2236:	54 e4       	ldi	r21, 0x44	; 68
    2238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	8f 83       	std	Y+7, r24	; 0x07
    2242:	98 87       	std	Y+8, r25	; 0x08
    2244:	a9 87       	std	Y+9, r26	; 0x09
    2246:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2248:	6f 81       	ldd	r22, Y+7	; 0x07
    224a:	78 85       	ldd	r23, Y+8	; 0x08
    224c:	89 85       	ldd	r24, Y+9	; 0x09
    224e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e8       	ldi	r20, 0x80	; 128
    2256:	5f e3       	ldi	r21, 0x3F	; 63
    2258:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    225c:	88 23       	and	r24, r24
    225e:	2c f4       	brge	.+10     	; 0x226a <main+0xcb0>
		__ticks = 1;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9e 83       	std	Y+6, r25	; 0x06
    2266:	8d 83       	std	Y+5, r24	; 0x05
    2268:	3f c0       	rjmp	.+126    	; 0x22e8 <main+0xd2e>
	else if (__tmp > 65535)
    226a:	6f 81       	ldd	r22, Y+7	; 0x07
    226c:	78 85       	ldd	r23, Y+8	; 0x08
    226e:	89 85       	ldd	r24, Y+9	; 0x09
    2270:	9a 85       	ldd	r25, Y+10	; 0x0a
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	3f ef       	ldi	r19, 0xFF	; 255
    2276:	4f e7       	ldi	r20, 0x7F	; 127
    2278:	57 e4       	ldi	r21, 0x47	; 71
    227a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    227e:	18 16       	cp	r1, r24
    2280:	4c f5       	brge	.+82     	; 0x22d4 <main+0xd1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2282:	6b 85       	ldd	r22, Y+11	; 0x0b
    2284:	7c 85       	ldd	r23, Y+12	; 0x0c
    2286:	8d 85       	ldd	r24, Y+13	; 0x0d
    2288:	9e 85       	ldd	r25, Y+14	; 0x0e
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e2       	ldi	r20, 0x20	; 32
    2290:	51 e4       	ldi	r21, 0x41	; 65
    2292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	bc 01       	movw	r22, r24
    229c:	cd 01       	movw	r24, r26
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	9e 83       	std	Y+6, r25	; 0x06
    22a8:	8d 83       	std	Y+5, r24	; 0x05
    22aa:	0f c0       	rjmp	.+30     	; 0x22ca <main+0xd10>
    22ac:	88 ec       	ldi	r24, 0xC8	; 200
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	9c 83       	std	Y+4, r25	; 0x04
    22b2:	8b 83       	std	Y+3, r24	; 0x03
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	9c 81       	ldd	r25, Y+4	; 0x04
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <main+0xcfe>
    22bc:	9c 83       	std	Y+4, r25	; 0x04
    22be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c0:	8d 81       	ldd	r24, Y+5	; 0x05
    22c2:	9e 81       	ldd	r25, Y+6	; 0x06
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	9e 83       	std	Y+6, r25	; 0x06
    22c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ca:	8d 81       	ldd	r24, Y+5	; 0x05
    22cc:	9e 81       	ldd	r25, Y+6	; 0x06
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	69 f7       	brne	.-38     	; 0x22ac <main+0xcf2>
    22d2:	31 cc       	rjmp	.-1950   	; 0x1b36 <main+0x57c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d4:	6f 81       	ldd	r22, Y+7	; 0x07
    22d6:	78 85       	ldd	r23, Y+8	; 0x08
    22d8:	89 85       	ldd	r24, Y+9	; 0x09
    22da:	9a 85       	ldd	r25, Y+10	; 0x0a
    22dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	9e 83       	std	Y+6, r25	; 0x06
    22e6:	8d 83       	std	Y+5, r24	; 0x05
    22e8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ea:	9e 81       	ldd	r25, Y+6	; 0x06
    22ec:	9a 83       	std	Y+2, r25	; 0x02
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	9a 81       	ldd	r25, Y+2	; 0x02
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <main+0xd3a>
    22f8:	9a 83       	std	Y+2, r25	; 0x02
    22fa:	89 83       	std	Y+1, r24	; 0x01
    22fc:	1c cc       	rjmp	.-1992   	; 0x1b36 <main+0x57c>

000022fe <__vector_7>:
/*
 * Timer1 used to count seconds in CTC mode.
 * ORCR1A = TICKS_PER_ONE_SECOND
 */

ISR(TIMER1_COMPA_vect){
    22fe:	1f 92       	push	r1
    2300:	0f 92       	push	r0
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	0f 92       	push	r0
    2306:	11 24       	eor	r1, r1
    2308:	2f 93       	push	r18
    230a:	3f 93       	push	r19
    230c:	4f 93       	push	r20
    230e:	5f 93       	push	r21
    2310:	6f 93       	push	r22
    2312:	7f 93       	push	r23
    2314:	8f 93       	push	r24
    2316:	9f 93       	push	r25
    2318:	af 93       	push	r26
    231a:	bf 93       	push	r27
    231c:	ef 93       	push	r30
    231e:	ff 93       	push	r31
    2320:	df 93       	push	r29
    2322:	cf 93       	push	r28
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62

	if (g_callBackPtr!=NULL_PTR)
    2328:	80 91 a6 01 	lds	r24, 0x01A6
    232c:	90 91 a7 01 	lds	r25, 0x01A7
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	29 f0       	breq	.+10     	; 0x233e <__vector_7+0x40>
		g_callBackPtr();
    2334:	e0 91 a6 01 	lds	r30, 0x01A6
    2338:	f0 91 a7 01 	lds	r31, 0x01A7
    233c:	09 95       	icall
}
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	ff 91       	pop	r31
    2344:	ef 91       	pop	r30
    2346:	bf 91       	pop	r27
    2348:	af 91       	pop	r26
    234a:	9f 91       	pop	r25
    234c:	8f 91       	pop	r24
    234e:	7f 91       	pop	r23
    2350:	6f 91       	pop	r22
    2352:	5f 91       	pop	r21
    2354:	4f 91       	pop	r20
    2356:	3f 91       	pop	r19
    2358:	2f 91       	pop	r18
    235a:	0f 90       	pop	r0
    235c:	0f be       	out	0x3f, r0	; 63
    235e:	0f 90       	pop	r0
    2360:	1f 90       	pop	r1
    2362:	18 95       	reti

00002364 <Timer1_setCallBack>:
 void Timer1_setCallBack(void(*a_ptr)(void)){
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	00 d0       	rcall	.+0      	; 0x236a <Timer1_setCallBack+0x6>
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
    236e:	9a 83       	std	Y+2, r25	; 0x02
    2370:	89 83       	std	Y+1, r24	; 0x01

	 g_callBackPtr = a_ptr;
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	9a 81       	ldd	r25, Y+2	; 0x02
    2376:	90 93 a7 01 	sts	0x01A7, r25
    237a:	80 93 a6 01 	sts	0x01A6, r24

 }
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <Timer1_init>:

 void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	00 d0       	rcall	.+0      	; 0x238e <Timer1_init+0x6>
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	9a 83       	std	Y+2, r25	; 0x02
    2394:	89 83       	std	Y+1, r24	; 0x01

	 /*
	 * set the pre-scaler value to the chosen one.
	 * set WGM12 value according to the mode.
	 */
	 TCCR1B = (Config_Ptr -> prescaler) | ((Config_Ptr -> mode << 1)& 0x08);
    2396:	ae e4       	ldi	r26, 0x4E	; 78
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	e9 81       	ldd	r30, Y+1	; 0x01
    239c:	fa 81       	ldd	r31, Y+2	; 0x02
    239e:	84 81       	ldd	r24, Z+4	; 0x04
    23a0:	28 2f       	mov	r18, r24
    23a2:	e9 81       	ldd	r30, Y+1	; 0x01
    23a4:	fa 81       	ldd	r31, Y+2	; 0x02
    23a6:	85 81       	ldd	r24, Z+5	; 0x05
    23a8:	88 2f       	mov	r24, r24
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	88 0f       	add	r24, r24
    23ae:	99 1f       	adc	r25, r25
    23b0:	88 70       	andi	r24, 0x08	; 8
    23b2:	82 2b       	or	r24, r18
    23b4:	8c 93       	st	X, r24

	 /*set WGM10 and WGM11 values.*/
	 TCCR1A = (1<<FOC1A) | (1<<FOC1B) |(1<<COM1A1);
    23b6:	ef e4       	ldi	r30, 0x4F	; 79
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	8c e8       	ldi	r24, 0x8C	; 140
    23bc:	80 83       	st	Z, r24

	TCNT1 = Config_Ptr -> initial_value;
    23be:	ac e4       	ldi	r26, 0x4C	; 76
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	e9 81       	ldd	r30, Y+1	; 0x01
    23c4:	fa 81       	ldd	r31, Y+2	; 0x02
    23c6:	80 81       	ld	r24, Z
    23c8:	91 81       	ldd	r25, Z+1	; 0x01
    23ca:	11 96       	adiw	r26, 0x01	; 1
    23cc:	9c 93       	st	X, r25
    23ce:	8e 93       	st	-X, r24

	/*Check for the selected mode*/
	if(Config_Ptr -> mode == NormalMode){
    23d0:	e9 81       	ldd	r30, Y+1	; 0x01
    23d2:	fa 81       	ldd	r31, Y+2	; 0x02
    23d4:	85 81       	ldd	r24, Z+5	; 0x05
    23d6:	88 23       	and	r24, r24
    23d8:	41 f4       	brne	.+16     	; 0x23ea <Timer1_init+0x62>

		TIMSK |= (1 << TOIE1);
    23da:	a9 e5       	ldi	r26, 0x59	; 89
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e9 e5       	ldi	r30, 0x59	; 89
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	84 60       	ori	r24, 0x04	; 4
    23e6:	8c 93       	st	X, r24
    23e8:	15 c0       	rjmp	.+42     	; 0x2414 <Timer1_init+0x8c>

	/*compare value is added only in compare mode*/
	}else if(Config_Ptr -> mode == CTC_Mode){
    23ea:	e9 81       	ldd	r30, Y+1	; 0x01
    23ec:	fa 81       	ldd	r31, Y+2	; 0x02
    23ee:	85 81       	ldd	r24, Z+5	; 0x05
    23f0:	84 30       	cpi	r24, 0x04	; 4
    23f2:	81 f4       	brne	.+32     	; 0x2414 <Timer1_init+0x8c>

		OCR1A = Config_Ptr ->compare_value;
    23f4:	aa e4       	ldi	r26, 0x4A	; 74
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e9 81       	ldd	r30, Y+1	; 0x01
    23fa:	fa 81       	ldd	r31, Y+2	; 0x02
    23fc:	82 81       	ldd	r24, Z+2	; 0x02
    23fe:	93 81       	ldd	r25, Z+3	; 0x03
    2400:	11 96       	adiw	r26, 0x01	; 1
    2402:	9c 93       	st	X, r25
    2404:	8e 93       	st	-X, r24

		SET_BIT(TIMSK, OCIE1A);
    2406:	a9 e5       	ldi	r26, 0x59	; 89
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e9 e5       	ldi	r30, 0x59	; 89
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	80 61       	ori	r24, 0x10	; 16
    2412:	8c 93       	st	X, r24
	}




}
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	cf 91       	pop	r28
    241a:	df 91       	pop	r29
    241c:	08 95       	ret

0000241e <__vector_9>:

ISR(TIMER1_OVF_vect) {
    241e:	1f 92       	push	r1
    2420:	0f 92       	push	r0
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	0f 92       	push	r0
    2426:	11 24       	eor	r1, r1
    2428:	2f 93       	push	r18
    242a:	3f 93       	push	r19
    242c:	4f 93       	push	r20
    242e:	5f 93       	push	r21
    2430:	6f 93       	push	r22
    2432:	7f 93       	push	r23
    2434:	8f 93       	push	r24
    2436:	9f 93       	push	r25
    2438:	af 93       	push	r26
    243a:	bf 93       	push	r27
    243c:	ef 93       	push	r30
    243e:	ff 93       	push	r31
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    2448:	80 91 a6 01 	lds	r24, 0x01A6
    244c:	90 91 a7 01 	lds	r25, 0x01A7
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	29 f0       	breq	.+10     	; 0x245e <__vector_9+0x40>
		g_callBackPtr();
    2454:	e0 91 a6 01 	lds	r30, 0x01A6
    2458:	f0 91 a7 01 	lds	r31, 0x01A7
    245c:	09 95       	icall

}
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	ff 91       	pop	r31
    2464:	ef 91       	pop	r30
    2466:	bf 91       	pop	r27
    2468:	af 91       	pop	r26
    246a:	9f 91       	pop	r25
    246c:	8f 91       	pop	r24
    246e:	7f 91       	pop	r23
    2470:	6f 91       	pop	r22
    2472:	5f 91       	pop	r21
    2474:	4f 91       	pop	r20
    2476:	3f 91       	pop	r19
    2478:	2f 91       	pop	r18
    247a:	0f 90       	pop	r0
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	0f 90       	pop	r0
    2480:	1f 90       	pop	r1
    2482:	18 95       	reti

00002484 <Timer1_deInit>:
 /*Clear all registers of timer */
 void Timer1_deInit(void){
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62

	 TCNT1 = 0;
    248c:	ec e4       	ldi	r30, 0x4C	; 76
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	11 82       	std	Z+1, r1	; 0x01
    2492:	10 82       	st	Z, r1

	 OCR1A = 0;
    2494:	ea e4       	ldi	r30, 0x4A	; 74
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	11 82       	std	Z+1, r1	; 0x01
    249a:	10 82       	st	Z, r1

	 TCCR1B = 0;
    249c:	ee e4       	ldi	r30, 0x4E	; 78
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	10 82       	st	Z, r1

	 TCCR1B = 0;
    24a2:	ee e4       	ldi	r30, 0x4E	; 78
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	10 82       	st	Z, r1


 }
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	00 d0       	rcall	.+0      	; 0x24b4 <GPIO_setupPinDirection+0x6>
    24b4:	00 d0       	rcall	.+0      	; 0x24b6 <GPIO_setupPinDirection+0x8>
    24b6:	0f 92       	push	r0
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
    24bc:	89 83       	std	Y+1, r24	; 0x01
    24be:	6a 83       	std	Y+2, r22	; 0x02
    24c0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	88 30       	cpi	r24, 0x08	; 8
    24c6:	08 f0       	brcs	.+2      	; 0x24ca <GPIO_setupPinDirection+0x1c>
    24c8:	d5 c0       	rjmp	.+426    	; 0x2674 <GPIO_setupPinDirection+0x1c6>
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	84 30       	cpi	r24, 0x04	; 4
    24ce:	08 f0       	brcs	.+2      	; 0x24d2 <GPIO_setupPinDirection+0x24>
    24d0:	d1 c0       	rjmp	.+418    	; 0x2674 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	28 2f       	mov	r18, r24
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	3d 83       	std	Y+5, r19	; 0x05
    24da:	2c 83       	std	Y+4, r18	; 0x04
    24dc:	8c 81       	ldd	r24, Y+4	; 0x04
    24de:	9d 81       	ldd	r25, Y+5	; 0x05
    24e0:	81 30       	cpi	r24, 0x01	; 1
    24e2:	91 05       	cpc	r25, r1
    24e4:	09 f4       	brne	.+2      	; 0x24e8 <GPIO_setupPinDirection+0x3a>
    24e6:	43 c0       	rjmp	.+134    	; 0x256e <GPIO_setupPinDirection+0xc0>
    24e8:	2c 81       	ldd	r18, Y+4	; 0x04
    24ea:	3d 81       	ldd	r19, Y+5	; 0x05
    24ec:	22 30       	cpi	r18, 0x02	; 2
    24ee:	31 05       	cpc	r19, r1
    24f0:	2c f4       	brge	.+10     	; 0x24fc <GPIO_setupPinDirection+0x4e>
    24f2:	8c 81       	ldd	r24, Y+4	; 0x04
    24f4:	9d 81       	ldd	r25, Y+5	; 0x05
    24f6:	00 97       	sbiw	r24, 0x00	; 0
    24f8:	71 f0       	breq	.+28     	; 0x2516 <GPIO_setupPinDirection+0x68>
    24fa:	bc c0       	rjmp	.+376    	; 0x2674 <GPIO_setupPinDirection+0x1c6>
    24fc:	2c 81       	ldd	r18, Y+4	; 0x04
    24fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2500:	22 30       	cpi	r18, 0x02	; 2
    2502:	31 05       	cpc	r19, r1
    2504:	09 f4       	brne	.+2      	; 0x2508 <GPIO_setupPinDirection+0x5a>
    2506:	5f c0       	rjmp	.+190    	; 0x25c6 <GPIO_setupPinDirection+0x118>
    2508:	8c 81       	ldd	r24, Y+4	; 0x04
    250a:	9d 81       	ldd	r25, Y+5	; 0x05
    250c:	83 30       	cpi	r24, 0x03	; 3
    250e:	91 05       	cpc	r25, r1
    2510:	09 f4       	brne	.+2      	; 0x2514 <GPIO_setupPinDirection+0x66>
    2512:	85 c0       	rjmp	.+266    	; 0x261e <GPIO_setupPinDirection+0x170>
    2514:	af c0       	rjmp	.+350    	; 0x2674 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2516:	8b 81       	ldd	r24, Y+3	; 0x03
    2518:	81 30       	cpi	r24, 0x01	; 1
    251a:	a1 f4       	brne	.+40     	; 0x2544 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    251c:	aa e3       	ldi	r26, 0x3A	; 58
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	ea e3       	ldi	r30, 0x3A	; 58
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	48 2f       	mov	r20, r24
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	28 2f       	mov	r18, r24
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	02 2e       	mov	r0, r18
    2534:	02 c0       	rjmp	.+4      	; 0x253a <GPIO_setupPinDirection+0x8c>
    2536:	88 0f       	add	r24, r24
    2538:	99 1f       	adc	r25, r25
    253a:	0a 94       	dec	r0
    253c:	e2 f7       	brpl	.-8      	; 0x2536 <GPIO_setupPinDirection+0x88>
    253e:	84 2b       	or	r24, r20
    2540:	8c 93       	st	X, r24
    2542:	98 c0       	rjmp	.+304    	; 0x2674 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2544:	aa e3       	ldi	r26, 0x3A	; 58
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	ea e3       	ldi	r30, 0x3A	; 58
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	48 2f       	mov	r20, r24
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	28 2f       	mov	r18, r24
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	02 2e       	mov	r0, r18
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <GPIO_setupPinDirection+0xb4>
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	0a 94       	dec	r0
    2564:	e2 f7       	brpl	.-8      	; 0x255e <GPIO_setupPinDirection+0xb0>
    2566:	80 95       	com	r24
    2568:	84 23       	and	r24, r20
    256a:	8c 93       	st	X, r24
    256c:	83 c0       	rjmp	.+262    	; 0x2674 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    256e:	8b 81       	ldd	r24, Y+3	; 0x03
    2570:	81 30       	cpi	r24, 0x01	; 1
    2572:	a1 f4       	brne	.+40     	; 0x259c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2574:	a7 e3       	ldi	r26, 0x37	; 55
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	e7 e3       	ldi	r30, 0x37	; 55
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	48 2f       	mov	r20, r24
    2580:	8a 81       	ldd	r24, Y+2	; 0x02
    2582:	28 2f       	mov	r18, r24
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	02 2e       	mov	r0, r18
    258c:	02 c0       	rjmp	.+4      	; 0x2592 <GPIO_setupPinDirection+0xe4>
    258e:	88 0f       	add	r24, r24
    2590:	99 1f       	adc	r25, r25
    2592:	0a 94       	dec	r0
    2594:	e2 f7       	brpl	.-8      	; 0x258e <GPIO_setupPinDirection+0xe0>
    2596:	84 2b       	or	r24, r20
    2598:	8c 93       	st	X, r24
    259a:	6c c0       	rjmp	.+216    	; 0x2674 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    259c:	a7 e3       	ldi	r26, 0x37	; 55
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	e7 e3       	ldi	r30, 0x37	; 55
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	48 2f       	mov	r20, r24
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	28 2f       	mov	r18, r24
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	02 2e       	mov	r0, r18
    25b4:	02 c0       	rjmp	.+4      	; 0x25ba <GPIO_setupPinDirection+0x10c>
    25b6:	88 0f       	add	r24, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	0a 94       	dec	r0
    25bc:	e2 f7       	brpl	.-8      	; 0x25b6 <GPIO_setupPinDirection+0x108>
    25be:	80 95       	com	r24
    25c0:	84 23       	and	r24, r20
    25c2:	8c 93       	st	X, r24
    25c4:	57 c0       	rjmp	.+174    	; 0x2674 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    25c6:	8b 81       	ldd	r24, Y+3	; 0x03
    25c8:	81 30       	cpi	r24, 0x01	; 1
    25ca:	a1 f4       	brne	.+40     	; 0x25f4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    25cc:	a4 e3       	ldi	r26, 0x34	; 52
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e4 e3       	ldi	r30, 0x34	; 52
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	48 2f       	mov	r20, r24
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	28 2f       	mov	r18, r24
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	02 2e       	mov	r0, r18
    25e4:	02 c0       	rjmp	.+4      	; 0x25ea <GPIO_setupPinDirection+0x13c>
    25e6:	88 0f       	add	r24, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	0a 94       	dec	r0
    25ec:	e2 f7       	brpl	.-8      	; 0x25e6 <GPIO_setupPinDirection+0x138>
    25ee:	84 2b       	or	r24, r20
    25f0:	8c 93       	st	X, r24
    25f2:	40 c0       	rjmp	.+128    	; 0x2674 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    25f4:	a4 e3       	ldi	r26, 0x34	; 52
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	e4 e3       	ldi	r30, 0x34	; 52
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	48 2f       	mov	r20, r24
    2600:	8a 81       	ldd	r24, Y+2	; 0x02
    2602:	28 2f       	mov	r18, r24
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	02 2e       	mov	r0, r18
    260c:	02 c0       	rjmp	.+4      	; 0x2612 <GPIO_setupPinDirection+0x164>
    260e:	88 0f       	add	r24, r24
    2610:	99 1f       	adc	r25, r25
    2612:	0a 94       	dec	r0
    2614:	e2 f7       	brpl	.-8      	; 0x260e <GPIO_setupPinDirection+0x160>
    2616:	80 95       	com	r24
    2618:	84 23       	and	r24, r20
    261a:	8c 93       	st	X, r24
    261c:	2b c0       	rjmp	.+86     	; 0x2674 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	81 30       	cpi	r24, 0x01	; 1
    2622:	a1 f4       	brne	.+40     	; 0x264c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2624:	a1 e3       	ldi	r26, 0x31	; 49
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	e1 e3       	ldi	r30, 0x31	; 49
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	48 2f       	mov	r20, r24
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	28 2f       	mov	r18, r24
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	02 2e       	mov	r0, r18
    263c:	02 c0       	rjmp	.+4      	; 0x2642 <GPIO_setupPinDirection+0x194>
    263e:	88 0f       	add	r24, r24
    2640:	99 1f       	adc	r25, r25
    2642:	0a 94       	dec	r0
    2644:	e2 f7       	brpl	.-8      	; 0x263e <GPIO_setupPinDirection+0x190>
    2646:	84 2b       	or	r24, r20
    2648:	8c 93       	st	X, r24
    264a:	14 c0       	rjmp	.+40     	; 0x2674 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    264c:	a1 e3       	ldi	r26, 0x31	; 49
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	e1 e3       	ldi	r30, 0x31	; 49
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	48 2f       	mov	r20, r24
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
    265a:	28 2f       	mov	r18, r24
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	02 2e       	mov	r0, r18
    2664:	02 c0       	rjmp	.+4      	; 0x266a <GPIO_setupPinDirection+0x1bc>
    2666:	88 0f       	add	r24, r24
    2668:	99 1f       	adc	r25, r25
    266a:	0a 94       	dec	r0
    266c:	e2 f7       	brpl	.-8      	; 0x2666 <GPIO_setupPinDirection+0x1b8>
    266e:	80 95       	com	r24
    2670:	84 23       	and	r24, r20
    2672:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	0f 90       	pop	r0
    267c:	0f 90       	pop	r0
    267e:	cf 91       	pop	r28
    2680:	df 91       	pop	r29
    2682:	08 95       	ret

00002684 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	00 d0       	rcall	.+0      	; 0x268a <GPIO_writePin+0x6>
    268a:	00 d0       	rcall	.+0      	; 0x268c <GPIO_writePin+0x8>
    268c:	0f 92       	push	r0
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    2692:	89 83       	std	Y+1, r24	; 0x01
    2694:	6a 83       	std	Y+2, r22	; 0x02
    2696:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	88 30       	cpi	r24, 0x08	; 8
    269c:	08 f0       	brcs	.+2      	; 0x26a0 <GPIO_writePin+0x1c>
    269e:	d5 c0       	rjmp	.+426    	; 0x284a <GPIO_writePin+0x1c6>
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	84 30       	cpi	r24, 0x04	; 4
    26a4:	08 f0       	brcs	.+2      	; 0x26a8 <GPIO_writePin+0x24>
    26a6:	d1 c0       	rjmp	.+418    	; 0x284a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	28 2f       	mov	r18, r24
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	3d 83       	std	Y+5, r19	; 0x05
    26b0:	2c 83       	std	Y+4, r18	; 0x04
    26b2:	8c 81       	ldd	r24, Y+4	; 0x04
    26b4:	9d 81       	ldd	r25, Y+5	; 0x05
    26b6:	81 30       	cpi	r24, 0x01	; 1
    26b8:	91 05       	cpc	r25, r1
    26ba:	09 f4       	brne	.+2      	; 0x26be <GPIO_writePin+0x3a>
    26bc:	43 c0       	rjmp	.+134    	; 0x2744 <GPIO_writePin+0xc0>
    26be:	2c 81       	ldd	r18, Y+4	; 0x04
    26c0:	3d 81       	ldd	r19, Y+5	; 0x05
    26c2:	22 30       	cpi	r18, 0x02	; 2
    26c4:	31 05       	cpc	r19, r1
    26c6:	2c f4       	brge	.+10     	; 0x26d2 <GPIO_writePin+0x4e>
    26c8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ca:	9d 81       	ldd	r25, Y+5	; 0x05
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	71 f0       	breq	.+28     	; 0x26ec <GPIO_writePin+0x68>
    26d0:	bc c0       	rjmp	.+376    	; 0x284a <GPIO_writePin+0x1c6>
    26d2:	2c 81       	ldd	r18, Y+4	; 0x04
    26d4:	3d 81       	ldd	r19, Y+5	; 0x05
    26d6:	22 30       	cpi	r18, 0x02	; 2
    26d8:	31 05       	cpc	r19, r1
    26da:	09 f4       	brne	.+2      	; 0x26de <GPIO_writePin+0x5a>
    26dc:	5f c0       	rjmp	.+190    	; 0x279c <GPIO_writePin+0x118>
    26de:	8c 81       	ldd	r24, Y+4	; 0x04
    26e0:	9d 81       	ldd	r25, Y+5	; 0x05
    26e2:	83 30       	cpi	r24, 0x03	; 3
    26e4:	91 05       	cpc	r25, r1
    26e6:	09 f4       	brne	.+2      	; 0x26ea <GPIO_writePin+0x66>
    26e8:	85 c0       	rjmp	.+266    	; 0x27f4 <GPIO_writePin+0x170>
    26ea:	af c0       	rjmp	.+350    	; 0x284a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    26ec:	8b 81       	ldd	r24, Y+3	; 0x03
    26ee:	81 30       	cpi	r24, 0x01	; 1
    26f0:	a1 f4       	brne	.+40     	; 0x271a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    26f2:	ab e3       	ldi	r26, 0x3B	; 59
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	eb e3       	ldi	r30, 0x3B	; 59
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	80 81       	ld	r24, Z
    26fc:	48 2f       	mov	r20, r24
    26fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2700:	28 2f       	mov	r18, r24
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	02 2e       	mov	r0, r18
    270a:	02 c0       	rjmp	.+4      	; 0x2710 <GPIO_writePin+0x8c>
    270c:	88 0f       	add	r24, r24
    270e:	99 1f       	adc	r25, r25
    2710:	0a 94       	dec	r0
    2712:	e2 f7       	brpl	.-8      	; 0x270c <GPIO_writePin+0x88>
    2714:	84 2b       	or	r24, r20
    2716:	8c 93       	st	X, r24
    2718:	98 c0       	rjmp	.+304    	; 0x284a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    271a:	ab e3       	ldi	r26, 0x3B	; 59
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	eb e3       	ldi	r30, 0x3B	; 59
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	48 2f       	mov	r20, r24
    2726:	8a 81       	ldd	r24, Y+2	; 0x02
    2728:	28 2f       	mov	r18, r24
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	02 2e       	mov	r0, r18
    2732:	02 c0       	rjmp	.+4      	; 0x2738 <GPIO_writePin+0xb4>
    2734:	88 0f       	add	r24, r24
    2736:	99 1f       	adc	r25, r25
    2738:	0a 94       	dec	r0
    273a:	e2 f7       	brpl	.-8      	; 0x2734 <GPIO_writePin+0xb0>
    273c:	80 95       	com	r24
    273e:	84 23       	and	r24, r20
    2740:	8c 93       	st	X, r24
    2742:	83 c0       	rjmp	.+262    	; 0x284a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2744:	8b 81       	ldd	r24, Y+3	; 0x03
    2746:	81 30       	cpi	r24, 0x01	; 1
    2748:	a1 f4       	brne	.+40     	; 0x2772 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    274a:	a8 e3       	ldi	r26, 0x38	; 56
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	e8 e3       	ldi	r30, 0x38	; 56
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	48 2f       	mov	r20, r24
    2756:	8a 81       	ldd	r24, Y+2	; 0x02
    2758:	28 2f       	mov	r18, r24
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	02 2e       	mov	r0, r18
    2762:	02 c0       	rjmp	.+4      	; 0x2768 <GPIO_writePin+0xe4>
    2764:	88 0f       	add	r24, r24
    2766:	99 1f       	adc	r25, r25
    2768:	0a 94       	dec	r0
    276a:	e2 f7       	brpl	.-8      	; 0x2764 <GPIO_writePin+0xe0>
    276c:	84 2b       	or	r24, r20
    276e:	8c 93       	st	X, r24
    2770:	6c c0       	rjmp	.+216    	; 0x284a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2772:	a8 e3       	ldi	r26, 0x38	; 56
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	e8 e3       	ldi	r30, 0x38	; 56
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	48 2f       	mov	r20, r24
    277e:	8a 81       	ldd	r24, Y+2	; 0x02
    2780:	28 2f       	mov	r18, r24
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	02 2e       	mov	r0, r18
    278a:	02 c0       	rjmp	.+4      	; 0x2790 <GPIO_writePin+0x10c>
    278c:	88 0f       	add	r24, r24
    278e:	99 1f       	adc	r25, r25
    2790:	0a 94       	dec	r0
    2792:	e2 f7       	brpl	.-8      	; 0x278c <GPIO_writePin+0x108>
    2794:	80 95       	com	r24
    2796:	84 23       	and	r24, r20
    2798:	8c 93       	st	X, r24
    279a:	57 c0       	rjmp	.+174    	; 0x284a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	81 30       	cpi	r24, 0x01	; 1
    27a0:	a1 f4       	brne	.+40     	; 0x27ca <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    27a2:	a5 e3       	ldi	r26, 0x35	; 53
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e5 e3       	ldi	r30, 0x35	; 53
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	48 2f       	mov	r20, r24
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
    27b0:	28 2f       	mov	r18, r24
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	02 2e       	mov	r0, r18
    27ba:	02 c0       	rjmp	.+4      	; 0x27c0 <GPIO_writePin+0x13c>
    27bc:	88 0f       	add	r24, r24
    27be:	99 1f       	adc	r25, r25
    27c0:	0a 94       	dec	r0
    27c2:	e2 f7       	brpl	.-8      	; 0x27bc <GPIO_writePin+0x138>
    27c4:	84 2b       	or	r24, r20
    27c6:	8c 93       	st	X, r24
    27c8:	40 c0       	rjmp	.+128    	; 0x284a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    27ca:	a5 e3       	ldi	r26, 0x35	; 53
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	e5 e3       	ldi	r30, 0x35	; 53
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	48 2f       	mov	r20, r24
    27d6:	8a 81       	ldd	r24, Y+2	; 0x02
    27d8:	28 2f       	mov	r18, r24
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	02 2e       	mov	r0, r18
    27e2:	02 c0       	rjmp	.+4      	; 0x27e8 <GPIO_writePin+0x164>
    27e4:	88 0f       	add	r24, r24
    27e6:	99 1f       	adc	r25, r25
    27e8:	0a 94       	dec	r0
    27ea:	e2 f7       	brpl	.-8      	; 0x27e4 <GPIO_writePin+0x160>
    27ec:	80 95       	com	r24
    27ee:	84 23       	and	r24, r20
    27f0:	8c 93       	st	X, r24
    27f2:	2b c0       	rjmp	.+86     	; 0x284a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	81 30       	cpi	r24, 0x01	; 1
    27f8:	a1 f4       	brne	.+40     	; 0x2822 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    27fa:	a2 e3       	ldi	r26, 0x32	; 50
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e2 e3       	ldi	r30, 0x32	; 50
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	48 2f       	mov	r20, r24
    2806:	8a 81       	ldd	r24, Y+2	; 0x02
    2808:	28 2f       	mov	r18, r24
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	02 2e       	mov	r0, r18
    2812:	02 c0       	rjmp	.+4      	; 0x2818 <GPIO_writePin+0x194>
    2814:	88 0f       	add	r24, r24
    2816:	99 1f       	adc	r25, r25
    2818:	0a 94       	dec	r0
    281a:	e2 f7       	brpl	.-8      	; 0x2814 <GPIO_writePin+0x190>
    281c:	84 2b       	or	r24, r20
    281e:	8c 93       	st	X, r24
    2820:	14 c0       	rjmp	.+40     	; 0x284a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2822:	a2 e3       	ldi	r26, 0x32	; 50
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	e2 e3       	ldi	r30, 0x32	; 50
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	48 2f       	mov	r20, r24
    282e:	8a 81       	ldd	r24, Y+2	; 0x02
    2830:	28 2f       	mov	r18, r24
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	02 2e       	mov	r0, r18
    283a:	02 c0       	rjmp	.+4      	; 0x2840 <GPIO_writePin+0x1bc>
    283c:	88 0f       	add	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	0a 94       	dec	r0
    2842:	e2 f7       	brpl	.-8      	; 0x283c <GPIO_writePin+0x1b8>
    2844:	80 95       	com	r24
    2846:	84 23       	and	r24, r20
    2848:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	0f 90       	pop	r0
    2854:	cf 91       	pop	r28
    2856:	df 91       	pop	r29
    2858:	08 95       	ret

0000285a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    285a:	df 93       	push	r29
    285c:	cf 93       	push	r28
    285e:	00 d0       	rcall	.+0      	; 0x2860 <GPIO_readPin+0x6>
    2860:	00 d0       	rcall	.+0      	; 0x2862 <GPIO_readPin+0x8>
    2862:	0f 92       	push	r0
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
    2868:	8a 83       	std	Y+2, r24	; 0x02
    286a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    286c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    286e:	8b 81       	ldd	r24, Y+3	; 0x03
    2870:	88 30       	cpi	r24, 0x08	; 8
    2872:	08 f0       	brcs	.+2      	; 0x2876 <GPIO_readPin+0x1c>
    2874:	84 c0       	rjmp	.+264    	; 0x297e <GPIO_readPin+0x124>
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	84 30       	cpi	r24, 0x04	; 4
    287a:	08 f0       	brcs	.+2      	; 0x287e <GPIO_readPin+0x24>
    287c:	80 c0       	rjmp	.+256    	; 0x297e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    287e:	8a 81       	ldd	r24, Y+2	; 0x02
    2880:	28 2f       	mov	r18, r24
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	3d 83       	std	Y+5, r19	; 0x05
    2886:	2c 83       	std	Y+4, r18	; 0x04
    2888:	4c 81       	ldd	r20, Y+4	; 0x04
    288a:	5d 81       	ldd	r21, Y+5	; 0x05
    288c:	41 30       	cpi	r20, 0x01	; 1
    288e:	51 05       	cpc	r21, r1
    2890:	79 f1       	breq	.+94     	; 0x28f0 <GPIO_readPin+0x96>
    2892:	8c 81       	ldd	r24, Y+4	; 0x04
    2894:	9d 81       	ldd	r25, Y+5	; 0x05
    2896:	82 30       	cpi	r24, 0x02	; 2
    2898:	91 05       	cpc	r25, r1
    289a:	34 f4       	brge	.+12     	; 0x28a8 <GPIO_readPin+0x4e>
    289c:	2c 81       	ldd	r18, Y+4	; 0x04
    289e:	3d 81       	ldd	r19, Y+5	; 0x05
    28a0:	21 15       	cp	r18, r1
    28a2:	31 05       	cpc	r19, r1
    28a4:	69 f0       	breq	.+26     	; 0x28c0 <GPIO_readPin+0x66>
    28a6:	6b c0       	rjmp	.+214    	; 0x297e <GPIO_readPin+0x124>
    28a8:	4c 81       	ldd	r20, Y+4	; 0x04
    28aa:	5d 81       	ldd	r21, Y+5	; 0x05
    28ac:	42 30       	cpi	r20, 0x02	; 2
    28ae:	51 05       	cpc	r21, r1
    28b0:	b9 f1       	breq	.+110    	; 0x2920 <GPIO_readPin+0xc6>
    28b2:	8c 81       	ldd	r24, Y+4	; 0x04
    28b4:	9d 81       	ldd	r25, Y+5	; 0x05
    28b6:	83 30       	cpi	r24, 0x03	; 3
    28b8:	91 05       	cpc	r25, r1
    28ba:	09 f4       	brne	.+2      	; 0x28be <GPIO_readPin+0x64>
    28bc:	49 c0       	rjmp	.+146    	; 0x2950 <GPIO_readPin+0xf6>
    28be:	5f c0       	rjmp	.+190    	; 0x297e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    28c0:	e9 e3       	ldi	r30, 0x39	; 57
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	80 81       	ld	r24, Z
    28c6:	28 2f       	mov	r18, r24
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	8b 81       	ldd	r24, Y+3	; 0x03
    28cc:	88 2f       	mov	r24, r24
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	a9 01       	movw	r20, r18
    28d2:	02 c0       	rjmp	.+4      	; 0x28d8 <GPIO_readPin+0x7e>
    28d4:	55 95       	asr	r21
    28d6:	47 95       	ror	r20
    28d8:	8a 95       	dec	r24
    28da:	e2 f7       	brpl	.-8      	; 0x28d4 <GPIO_readPin+0x7a>
    28dc:	ca 01       	movw	r24, r20
    28de:	81 70       	andi	r24, 0x01	; 1
    28e0:	90 70       	andi	r25, 0x00	; 0
    28e2:	88 23       	and	r24, r24
    28e4:	19 f0       	breq	.+6      	; 0x28ec <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	89 83       	std	Y+1, r24	; 0x01
    28ea:	49 c0       	rjmp	.+146    	; 0x297e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    28ec:	19 82       	std	Y+1, r1	; 0x01
    28ee:	47 c0       	rjmp	.+142    	; 0x297e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    28f0:	e6 e3       	ldi	r30, 0x36	; 54
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	28 2f       	mov	r18, r24
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	8b 81       	ldd	r24, Y+3	; 0x03
    28fc:	88 2f       	mov	r24, r24
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	a9 01       	movw	r20, r18
    2902:	02 c0       	rjmp	.+4      	; 0x2908 <GPIO_readPin+0xae>
    2904:	55 95       	asr	r21
    2906:	47 95       	ror	r20
    2908:	8a 95       	dec	r24
    290a:	e2 f7       	brpl	.-8      	; 0x2904 <GPIO_readPin+0xaa>
    290c:	ca 01       	movw	r24, r20
    290e:	81 70       	andi	r24, 0x01	; 1
    2910:	90 70       	andi	r25, 0x00	; 0
    2912:	88 23       	and	r24, r24
    2914:	19 f0       	breq	.+6      	; 0x291c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	89 83       	std	Y+1, r24	; 0x01
    291a:	31 c0       	rjmp	.+98     	; 0x297e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    291c:	19 82       	std	Y+1, r1	; 0x01
    291e:	2f c0       	rjmp	.+94     	; 0x297e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2920:	e3 e3       	ldi	r30, 0x33	; 51
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	28 2f       	mov	r18, r24
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	8b 81       	ldd	r24, Y+3	; 0x03
    292c:	88 2f       	mov	r24, r24
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	a9 01       	movw	r20, r18
    2932:	02 c0       	rjmp	.+4      	; 0x2938 <GPIO_readPin+0xde>
    2934:	55 95       	asr	r21
    2936:	47 95       	ror	r20
    2938:	8a 95       	dec	r24
    293a:	e2 f7       	brpl	.-8      	; 0x2934 <GPIO_readPin+0xda>
    293c:	ca 01       	movw	r24, r20
    293e:	81 70       	andi	r24, 0x01	; 1
    2940:	90 70       	andi	r25, 0x00	; 0
    2942:	88 23       	and	r24, r24
    2944:	19 f0       	breq	.+6      	; 0x294c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	89 83       	std	Y+1, r24	; 0x01
    294a:	19 c0       	rjmp	.+50     	; 0x297e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    294c:	19 82       	std	Y+1, r1	; 0x01
    294e:	17 c0       	rjmp	.+46     	; 0x297e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2950:	e0 e3       	ldi	r30, 0x30	; 48
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	80 81       	ld	r24, Z
    2956:	28 2f       	mov	r18, r24
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	8b 81       	ldd	r24, Y+3	; 0x03
    295c:	88 2f       	mov	r24, r24
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	a9 01       	movw	r20, r18
    2962:	02 c0       	rjmp	.+4      	; 0x2968 <GPIO_readPin+0x10e>
    2964:	55 95       	asr	r21
    2966:	47 95       	ror	r20
    2968:	8a 95       	dec	r24
    296a:	e2 f7       	brpl	.-8      	; 0x2964 <GPIO_readPin+0x10a>
    296c:	ca 01       	movw	r24, r20
    296e:	81 70       	andi	r24, 0x01	; 1
    2970:	90 70       	andi	r25, 0x00	; 0
    2972:	88 23       	and	r24, r24
    2974:	19 f0       	breq	.+6      	; 0x297c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	89 83       	std	Y+1, r24	; 0x01
    297a:	01 c0       	rjmp	.+2      	; 0x297e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    297c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    297e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2980:	0f 90       	pop	r0
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	00 d0       	rcall	.+0      	; 0x2996 <GPIO_setupPortDirection+0x6>
    2996:	00 d0       	rcall	.+0      	; 0x2998 <GPIO_setupPortDirection+0x8>
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	89 83       	std	Y+1, r24	; 0x01
    299e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	84 30       	cpi	r24, 0x04	; 4
    29a4:	90 f5       	brcc	.+100    	; 0x2a0a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	28 2f       	mov	r18, r24
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	3c 83       	std	Y+4, r19	; 0x04
    29ae:	2b 83       	std	Y+3, r18	; 0x03
    29b0:	8b 81       	ldd	r24, Y+3	; 0x03
    29b2:	9c 81       	ldd	r25, Y+4	; 0x04
    29b4:	81 30       	cpi	r24, 0x01	; 1
    29b6:	91 05       	cpc	r25, r1
    29b8:	d1 f0       	breq	.+52     	; 0x29ee <GPIO_setupPortDirection+0x5e>
    29ba:	2b 81       	ldd	r18, Y+3	; 0x03
    29bc:	3c 81       	ldd	r19, Y+4	; 0x04
    29be:	22 30       	cpi	r18, 0x02	; 2
    29c0:	31 05       	cpc	r19, r1
    29c2:	2c f4       	brge	.+10     	; 0x29ce <GPIO_setupPortDirection+0x3e>
    29c4:	8b 81       	ldd	r24, Y+3	; 0x03
    29c6:	9c 81       	ldd	r25, Y+4	; 0x04
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	61 f0       	breq	.+24     	; 0x29e4 <GPIO_setupPortDirection+0x54>
    29cc:	1e c0       	rjmp	.+60     	; 0x2a0a <GPIO_setupPortDirection+0x7a>
    29ce:	2b 81       	ldd	r18, Y+3	; 0x03
    29d0:	3c 81       	ldd	r19, Y+4	; 0x04
    29d2:	22 30       	cpi	r18, 0x02	; 2
    29d4:	31 05       	cpc	r19, r1
    29d6:	81 f0       	breq	.+32     	; 0x29f8 <GPIO_setupPortDirection+0x68>
    29d8:	8b 81       	ldd	r24, Y+3	; 0x03
    29da:	9c 81       	ldd	r25, Y+4	; 0x04
    29dc:	83 30       	cpi	r24, 0x03	; 3
    29de:	91 05       	cpc	r25, r1
    29e0:	81 f0       	breq	.+32     	; 0x2a02 <GPIO_setupPortDirection+0x72>
    29e2:	13 c0       	rjmp	.+38     	; 0x2a0a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    29e4:	ea e3       	ldi	r30, 0x3A	; 58
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	80 83       	st	Z, r24
    29ec:	0e c0       	rjmp	.+28     	; 0x2a0a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    29ee:	e7 e3       	ldi	r30, 0x37	; 55
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	8a 81       	ldd	r24, Y+2	; 0x02
    29f4:	80 83       	st	Z, r24
    29f6:	09 c0       	rjmp	.+18     	; 0x2a0a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    29f8:	e4 e3       	ldi	r30, 0x34	; 52
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	8a 81       	ldd	r24, Y+2	; 0x02
    29fe:	80 83       	st	Z, r24
    2a00:	04 c0       	rjmp	.+8      	; 0x2a0a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2a02:	e1 e3       	ldi	r30, 0x31	; 49
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	8a 81       	ldd	r24, Y+2	; 0x02
    2a08:	80 83       	st	Z, r24
			break;
		}
	}
}
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	cf 91       	pop	r28
    2a14:	df 91       	pop	r29
    2a16:	08 95       	ret

00002a18 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	00 d0       	rcall	.+0      	; 0x2a1e <GPIO_writePort+0x6>
    2a1e:	00 d0       	rcall	.+0      	; 0x2a20 <GPIO_writePort+0x8>
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	89 83       	std	Y+1, r24	; 0x01
    2a26:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	84 30       	cpi	r24, 0x04	; 4
    2a2c:	90 f5       	brcc	.+100    	; 0x2a92 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	28 2f       	mov	r18, r24
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	3c 83       	std	Y+4, r19	; 0x04
    2a36:	2b 83       	std	Y+3, r18	; 0x03
    2a38:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3c:	81 30       	cpi	r24, 0x01	; 1
    2a3e:	91 05       	cpc	r25, r1
    2a40:	d1 f0       	breq	.+52     	; 0x2a76 <GPIO_writePort+0x5e>
    2a42:	2b 81       	ldd	r18, Y+3	; 0x03
    2a44:	3c 81       	ldd	r19, Y+4	; 0x04
    2a46:	22 30       	cpi	r18, 0x02	; 2
    2a48:	31 05       	cpc	r19, r1
    2a4a:	2c f4       	brge	.+10     	; 0x2a56 <GPIO_writePort+0x3e>
    2a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	61 f0       	breq	.+24     	; 0x2a6c <GPIO_writePort+0x54>
    2a54:	1e c0       	rjmp	.+60     	; 0x2a92 <GPIO_writePort+0x7a>
    2a56:	2b 81       	ldd	r18, Y+3	; 0x03
    2a58:	3c 81       	ldd	r19, Y+4	; 0x04
    2a5a:	22 30       	cpi	r18, 0x02	; 2
    2a5c:	31 05       	cpc	r19, r1
    2a5e:	81 f0       	breq	.+32     	; 0x2a80 <GPIO_writePort+0x68>
    2a60:	8b 81       	ldd	r24, Y+3	; 0x03
    2a62:	9c 81       	ldd	r25, Y+4	; 0x04
    2a64:	83 30       	cpi	r24, 0x03	; 3
    2a66:	91 05       	cpc	r25, r1
    2a68:	81 f0       	breq	.+32     	; 0x2a8a <GPIO_writePort+0x72>
    2a6a:	13 c0       	rjmp	.+38     	; 0x2a92 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2a6c:	eb e3       	ldi	r30, 0x3B	; 59
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	8a 81       	ldd	r24, Y+2	; 0x02
    2a72:	80 83       	st	Z, r24
    2a74:	0e c0       	rjmp	.+28     	; 0x2a92 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2a76:	e8 e3       	ldi	r30, 0x38	; 56
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7c:	80 83       	st	Z, r24
    2a7e:	09 c0       	rjmp	.+18     	; 0x2a92 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2a80:	e5 e3       	ldi	r30, 0x35	; 53
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	80 83       	st	Z, r24
    2a88:	04 c0       	rjmp	.+8      	; 0x2a92 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2a8a:	e2 e3       	ldi	r30, 0x32	; 50
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	80 83       	st	Z, r24
			break;
		}
	}
}
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	cf 91       	pop	r28
    2a9c:	df 91       	pop	r29
    2a9e:	08 95       	ret

00002aa0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2aa0:	df 93       	push	r29
    2aa2:	cf 93       	push	r28
    2aa4:	00 d0       	rcall	.+0      	; 0x2aa6 <GPIO_readPort+0x6>
    2aa6:	00 d0       	rcall	.+0      	; 0x2aa8 <GPIO_readPort+0x8>
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
    2aac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2aae:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab2:	84 30       	cpi	r24, 0x04	; 4
    2ab4:	90 f5       	brcc	.+100    	; 0x2b1a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab8:	28 2f       	mov	r18, r24
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	3c 83       	std	Y+4, r19	; 0x04
    2abe:	2b 83       	std	Y+3, r18	; 0x03
    2ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac4:	81 30       	cpi	r24, 0x01	; 1
    2ac6:	91 05       	cpc	r25, r1
    2ac8:	d1 f0       	breq	.+52     	; 0x2afe <GPIO_readPort+0x5e>
    2aca:	2b 81       	ldd	r18, Y+3	; 0x03
    2acc:	3c 81       	ldd	r19, Y+4	; 0x04
    2ace:	22 30       	cpi	r18, 0x02	; 2
    2ad0:	31 05       	cpc	r19, r1
    2ad2:	2c f4       	brge	.+10     	; 0x2ade <GPIO_readPort+0x3e>
    2ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad8:	00 97       	sbiw	r24, 0x00	; 0
    2ada:	61 f0       	breq	.+24     	; 0x2af4 <GPIO_readPort+0x54>
    2adc:	1e c0       	rjmp	.+60     	; 0x2b1a <GPIO_readPort+0x7a>
    2ade:	2b 81       	ldd	r18, Y+3	; 0x03
    2ae0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ae2:	22 30       	cpi	r18, 0x02	; 2
    2ae4:	31 05       	cpc	r19, r1
    2ae6:	81 f0       	breq	.+32     	; 0x2b08 <GPIO_readPort+0x68>
    2ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aea:	9c 81       	ldd	r25, Y+4	; 0x04
    2aec:	83 30       	cpi	r24, 0x03	; 3
    2aee:	91 05       	cpc	r25, r1
    2af0:	81 f0       	breq	.+32     	; 0x2b12 <GPIO_readPort+0x72>
    2af2:	13 c0       	rjmp	.+38     	; 0x2b1a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2af4:	e9 e3       	ldi	r30, 0x39	; 57
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	89 83       	std	Y+1, r24	; 0x01
    2afc:	0e c0       	rjmp	.+28     	; 0x2b1a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2afe:	e6 e3       	ldi	r30, 0x36	; 54
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	80 81       	ld	r24, Z
    2b04:	89 83       	std	Y+1, r24	; 0x01
    2b06:	09 c0       	rjmp	.+18     	; 0x2b1a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2b08:	e3 e3       	ldi	r30, 0x33	; 51
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	89 83       	std	Y+1, r24	; 0x01
    2b10:	04 c0       	rjmp	.+8      	; 0x2b1a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2b12:	e0 e3       	ldi	r30, 0x30	; 48
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	08 95       	ret

00002b2a <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2b2a:	df 93       	push	r29
    2b2c:	cf 93       	push	r28
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	60 97       	sbiw	r28, 0x10	; 16
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	64 e0       	ldi	r22, 0x04	; 4
    2b42:	40 e0       	ldi	r20, 0x00	; 0
    2b44:	0e 94 57 12 	call	0x24ae	; 0x24ae <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	65 e0       	ldi	r22, 0x05	; 5
    2b4c:	40 e0       	ldi	r20, 0x00	; 0
    2b4e:	0e 94 57 12 	call	0x24ae	; 0x24ae <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	66 e0       	ldi	r22, 0x06	; 6
    2b56:	40 e0       	ldi	r20, 0x00	; 0
    2b58:	0e 94 57 12 	call	0x24ae	; 0x24ae <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	67 e0       	ldi	r22, 0x07	; 7
    2b60:	40 e0       	ldi	r20, 0x00	; 0
    2b62:	0e 94 57 12 	call	0x24ae	; 0x24ae <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2b66:	83 e0       	ldi	r24, 0x03	; 3
    2b68:	62 e0       	ldi	r22, 0x02	; 2
    2b6a:	40 e0       	ldi	r20, 0x00	; 0
    2b6c:	0e 94 57 12 	call	0x24ae	; 0x24ae <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2b70:	83 e0       	ldi	r24, 0x03	; 3
    2b72:	63 e0       	ldi	r22, 0x03	; 3
    2b74:	40 e0       	ldi	r20, 0x00	; 0
    2b76:	0e 94 57 12 	call	0x24ae	; 0x24ae <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2b7a:	83 e0       	ldi	r24, 0x03	; 3
    2b7c:	64 e0       	ldi	r22, 0x04	; 4
    2b7e:	40 e0       	ldi	r20, 0x00	; 0
    2b80:	0e 94 57 12 	call	0x24ae	; 0x24ae <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2b84:	83 e0       	ldi	r24, 0x03	; 3
    2b86:	65 e0       	ldi	r22, 0x05	; 5
    2b88:	40 e0       	ldi	r20, 0x00	; 0
    2b8a:	0e 94 57 12 	call	0x24ae	; 0x24ae <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2b8e:	1f 86       	std	Y+15, r1	; 0x0f
    2b90:	b4 c0       	rjmp	.+360    	; 0x2cfa <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2b92:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b94:	98 2f       	mov	r25, r24
    2b96:	9c 5f       	subi	r25, 0xFC	; 252
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	69 2f       	mov	r22, r25
    2b9c:	41 e0       	ldi	r20, 0x01	; 1
    2b9e:	0e 94 57 12 	call	0x24ae	; 0x24ae <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2ba2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ba4:	98 2f       	mov	r25, r24
    2ba6:	9c 5f       	subi	r25, 0xFC	; 252
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	69 2f       	mov	r22, r25
    2bac:	40 e0       	ldi	r20, 0x00	; 0
    2bae:	0e 94 42 13 	call	0x2684	; 0x2684 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2bb2:	18 8a       	std	Y+16, r1	; 0x10
    2bb4:	22 c0       	rjmp	.+68     	; 0x2bfa <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2bb6:	88 89       	ldd	r24, Y+16	; 0x10
    2bb8:	98 2f       	mov	r25, r24
    2bba:	9e 5f       	subi	r25, 0xFE	; 254
    2bbc:	83 e0       	ldi	r24, 0x03	; 3
    2bbe:	69 2f       	mov	r22, r25
    2bc0:	0e 94 2d 14 	call	0x285a	; 0x285a <GPIO_readPin>
    2bc4:	88 23       	and	r24, r24
    2bc6:	b1 f4       	brne	.+44     	; 0x2bf4 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2bc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bca:	88 2f       	mov	r24, r24
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	88 0f       	add	r24, r24
    2bd0:	99 1f       	adc	r25, r25
    2bd2:	88 0f       	add	r24, r24
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	98 2f       	mov	r25, r24
    2bd8:	88 89       	ldd	r24, Y+16	; 0x10
    2bda:	89 0f       	add	r24, r25
    2bdc:	8f 5f       	subi	r24, 0xFF	; 255
    2bde:	0e 94 82 16 	call	0x2d04	; 0x2d04 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    2be2:	60 96       	adiw	r28, 0x10	; 16
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	f8 94       	cli
    2be8:	de bf       	out	0x3e, r29	; 62
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	cd bf       	out	0x3d, r28	; 61
    2bee:	cf 91       	pop	r28
    2bf0:	df 91       	pop	r29
    2bf2:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2bf4:	88 89       	ldd	r24, Y+16	; 0x10
    2bf6:	8f 5f       	subi	r24, 0xFF	; 255
    2bf8:	88 8b       	std	Y+16, r24	; 0x10
    2bfa:	88 89       	ldd	r24, Y+16	; 0x10
    2bfc:	84 30       	cpi	r24, 0x04	; 4
    2bfe:	d8 f2       	brcs	.-74     	; 0x2bb6 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2c00:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c02:	98 2f       	mov	r25, r24
    2c04:	9c 5f       	subi	r25, 0xFC	; 252
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	69 2f       	mov	r22, r25
    2c0a:	40 e0       	ldi	r20, 0x00	; 0
    2c0c:	0e 94 57 12 	call	0x24ae	; 0x24ae <GPIO_setupPinDirection>
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	a0 ea       	ldi	r26, 0xA0	; 160
    2c16:	b0 e4       	ldi	r27, 0x40	; 64
    2c18:	8b 87       	std	Y+11, r24	; 0x0b
    2c1a:	9c 87       	std	Y+12, r25	; 0x0c
    2c1c:	ad 87       	std	Y+13, r26	; 0x0d
    2c1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	4a ef       	ldi	r20, 0xFA	; 250
    2c2e:	54 e4       	ldi	r21, 0x44	; 68
    2c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	8f 83       	std	Y+7, r24	; 0x07
    2c3a:	98 87       	std	Y+8, r25	; 0x08
    2c3c:	a9 87       	std	Y+9, r26	; 0x09
    2c3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c40:	6f 81       	ldd	r22, Y+7	; 0x07
    2c42:	78 85       	ldd	r23, Y+8	; 0x08
    2c44:	89 85       	ldd	r24, Y+9	; 0x09
    2c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	40 e8       	ldi	r20, 0x80	; 128
    2c4e:	5f e3       	ldi	r21, 0x3F	; 63
    2c50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c54:	88 23       	and	r24, r24
    2c56:	2c f4       	brge	.+10     	; 0x2c62 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	9e 83       	std	Y+6, r25	; 0x06
    2c5e:	8d 83       	std	Y+5, r24	; 0x05
    2c60:	3f c0       	rjmp	.+126    	; 0x2ce0 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    2c62:	6f 81       	ldd	r22, Y+7	; 0x07
    2c64:	78 85       	ldd	r23, Y+8	; 0x08
    2c66:	89 85       	ldd	r24, Y+9	; 0x09
    2c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	3f ef       	ldi	r19, 0xFF	; 255
    2c6e:	4f e7       	ldi	r20, 0x7F	; 127
    2c70:	57 e4       	ldi	r21, 0x47	; 71
    2c72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c76:	18 16       	cp	r1, r24
    2c78:	4c f5       	brge	.+82     	; 0x2ccc <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e2       	ldi	r20, 0x20	; 32
    2c88:	51 e4       	ldi	r21, 0x41	; 65
    2c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	bc 01       	movw	r22, r24
    2c94:	cd 01       	movw	r24, r26
    2c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	9e 83       	std	Y+6, r25	; 0x06
    2ca0:	8d 83       	std	Y+5, r24	; 0x05
    2ca2:	0f c0       	rjmp	.+30     	; 0x2cc2 <KEYPAD_getPressedKey+0x198>
    2ca4:	88 ec       	ldi	r24, 0xC8	; 200
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	9c 83       	std	Y+4, r25	; 0x04
    2caa:	8b 83       	std	Y+3, r24	; 0x03
    2cac:	8b 81       	ldd	r24, Y+3	; 0x03
    2cae:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	f1 f7       	brne	.-4      	; 0x2cb0 <KEYPAD_getPressedKey+0x186>
    2cb4:	9c 83       	std	Y+4, r25	; 0x04
    2cb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cba:	9e 81       	ldd	r25, Y+6	; 0x06
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	9e 83       	std	Y+6, r25	; 0x06
    2cc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	69 f7       	brne	.-38     	; 0x2ca4 <KEYPAD_getPressedKey+0x17a>
    2cca:	14 c0       	rjmp	.+40     	; 0x2cf4 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cce:	78 85       	ldd	r23, Y+8	; 0x08
    2cd0:	89 85       	ldd	r24, Y+9	; 0x09
    2cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	9e 83       	std	Y+6, r25	; 0x06
    2cde:	8d 83       	std	Y+5, r24	; 0x05
    2ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce4:	9a 83       	std	Y+2, r25	; 0x02
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	9a 81       	ldd	r25, Y+2	; 0x02
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <KEYPAD_getPressedKey+0x1c2>
    2cf0:	9a 83       	std	Y+2, r25	; 0x02
    2cf2:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2cf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cf6:	8f 5f       	subi	r24, 0xFF	; 255
    2cf8:	8f 87       	std	Y+15, r24	; 0x0f
    2cfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cfc:	84 30       	cpi	r24, 0x04	; 4
    2cfe:	08 f4       	brcc	.+2      	; 0x2d02 <KEYPAD_getPressedKey+0x1d8>
    2d00:	48 cf       	rjmp	.-368    	; 0x2b92 <KEYPAD_getPressedKey+0x68>
    2d02:	45 cf       	rjmp	.-374    	; 0x2b8e <KEYPAD_getPressedKey+0x64>

00002d04 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	00 d0       	rcall	.+0      	; 0x2d0a <KEYPAD_4x4_adjustKeyNumber+0x6>
    2d0a:	00 d0       	rcall	.+0      	; 0x2d0c <KEYPAD_4x4_adjustKeyNumber+0x8>
    2d0c:	cd b7       	in	r28, 0x3d	; 61
    2d0e:	de b7       	in	r29, 0x3e	; 62
    2d10:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2d12:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2d14:	8a 81       	ldd	r24, Y+2	; 0x02
    2d16:	28 2f       	mov	r18, r24
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	3c 83       	std	Y+4, r19	; 0x04
    2d1c:	2b 83       	std	Y+3, r18	; 0x03
    2d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d20:	9c 81       	ldd	r25, Y+4	; 0x04
    2d22:	88 30       	cpi	r24, 0x08	; 8
    2d24:	91 05       	cpc	r25, r1
    2d26:	09 f4       	brne	.+2      	; 0x2d2a <KEYPAD_4x4_adjustKeyNumber+0x26>
    2d28:	70 c0       	rjmp	.+224    	; 0x2e0a <KEYPAD_4x4_adjustKeyNumber+0x106>
    2d2a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d2c:	3c 81       	ldd	r19, Y+4	; 0x04
    2d2e:	29 30       	cpi	r18, 0x09	; 9
    2d30:	31 05       	cpc	r19, r1
    2d32:	5c f5       	brge	.+86     	; 0x2d8a <KEYPAD_4x4_adjustKeyNumber+0x86>
    2d34:	8b 81       	ldd	r24, Y+3	; 0x03
    2d36:	9c 81       	ldd	r25, Y+4	; 0x04
    2d38:	84 30       	cpi	r24, 0x04	; 4
    2d3a:	91 05       	cpc	r25, r1
    2d3c:	09 f4       	brne	.+2      	; 0x2d40 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2d3e:	59 c0       	rjmp	.+178    	; 0x2df2 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2d40:	2b 81       	ldd	r18, Y+3	; 0x03
    2d42:	3c 81       	ldd	r19, Y+4	; 0x04
    2d44:	25 30       	cpi	r18, 0x05	; 5
    2d46:	31 05       	cpc	r19, r1
    2d48:	9c f4       	brge	.+38     	; 0x2d70 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4e:	82 30       	cpi	r24, 0x02	; 2
    2d50:	91 05       	cpc	r25, r1
    2d52:	09 f4       	brne	.+2      	; 0x2d56 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2d54:	48 c0       	rjmp	.+144    	; 0x2de6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2d56:	2b 81       	ldd	r18, Y+3	; 0x03
    2d58:	3c 81       	ldd	r19, Y+4	; 0x04
    2d5a:	23 30       	cpi	r18, 0x03	; 3
    2d5c:	31 05       	cpc	r19, r1
    2d5e:	0c f0       	brlt	.+2      	; 0x2d62 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2d60:	45 c0       	rjmp	.+138    	; 0x2dec <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2d62:	8b 81       	ldd	r24, Y+3	; 0x03
    2d64:	9c 81       	ldd	r25, Y+4	; 0x04
    2d66:	81 30       	cpi	r24, 0x01	; 1
    2d68:	91 05       	cpc	r25, r1
    2d6a:	09 f4       	brne	.+2      	; 0x2d6e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2d6c:	39 c0       	rjmp	.+114    	; 0x2de0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2d6e:	67 c0       	rjmp	.+206    	; 0x2e3e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2d70:	2b 81       	ldd	r18, Y+3	; 0x03
    2d72:	3c 81       	ldd	r19, Y+4	; 0x04
    2d74:	26 30       	cpi	r18, 0x06	; 6
    2d76:	31 05       	cpc	r19, r1
    2d78:	09 f4       	brne	.+2      	; 0x2d7c <KEYPAD_4x4_adjustKeyNumber+0x78>
    2d7a:	41 c0       	rjmp	.+130    	; 0x2dfe <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d80:	87 30       	cpi	r24, 0x07	; 7
    2d82:	91 05       	cpc	r25, r1
    2d84:	0c f0       	brlt	.+2      	; 0x2d88 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2d86:	3e c0       	rjmp	.+124    	; 0x2e04 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2d88:	37 c0       	rjmp	.+110    	; 0x2df8 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2d8a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d8c:	3c 81       	ldd	r19, Y+4	; 0x04
    2d8e:	2c 30       	cpi	r18, 0x0C	; 12
    2d90:	31 05       	cpc	r19, r1
    2d92:	09 f4       	brne	.+2      	; 0x2d96 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2d94:	46 c0       	rjmp	.+140    	; 0x2e22 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2d96:	8b 81       	ldd	r24, Y+3	; 0x03
    2d98:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9a:	8d 30       	cpi	r24, 0x0D	; 13
    2d9c:	91 05       	cpc	r25, r1
    2d9e:	5c f4       	brge	.+22     	; 0x2db6 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2da0:	2b 81       	ldd	r18, Y+3	; 0x03
    2da2:	3c 81       	ldd	r19, Y+4	; 0x04
    2da4:	2a 30       	cpi	r18, 0x0A	; 10
    2da6:	31 05       	cpc	r19, r1
    2da8:	b1 f1       	breq	.+108    	; 0x2e16 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2daa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dac:	9c 81       	ldd	r25, Y+4	; 0x04
    2dae:	8b 30       	cpi	r24, 0x0B	; 11
    2db0:	91 05       	cpc	r25, r1
    2db2:	a4 f5       	brge	.+104    	; 0x2e1c <KEYPAD_4x4_adjustKeyNumber+0x118>
    2db4:	2d c0       	rjmp	.+90     	; 0x2e10 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2db6:	2b 81       	ldd	r18, Y+3	; 0x03
    2db8:	3c 81       	ldd	r19, Y+4	; 0x04
    2dba:	2e 30       	cpi	r18, 0x0E	; 14
    2dbc:	31 05       	cpc	r19, r1
    2dbe:	b9 f1       	breq	.+110    	; 0x2e2e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc4:	8e 30       	cpi	r24, 0x0E	; 14
    2dc6:	91 05       	cpc	r25, r1
    2dc8:	7c f1       	brlt	.+94     	; 0x2e28 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2dca:	2b 81       	ldd	r18, Y+3	; 0x03
    2dcc:	3c 81       	ldd	r19, Y+4	; 0x04
    2dce:	2f 30       	cpi	r18, 0x0F	; 15
    2dd0:	31 05       	cpc	r19, r1
    2dd2:	79 f1       	breq	.+94     	; 0x2e32 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd8:	80 31       	cpi	r24, 0x10	; 16
    2dda:	91 05       	cpc	r25, r1
    2ddc:	69 f1       	breq	.+90     	; 0x2e38 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2dde:	2f c0       	rjmp	.+94     	; 0x2e3e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2de0:	87 e0       	ldi	r24, 0x07	; 7
    2de2:	89 83       	std	Y+1, r24	; 0x01
    2de4:	2e c0       	rjmp	.+92     	; 0x2e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2de6:	88 e0       	ldi	r24, 0x08	; 8
    2de8:	89 83       	std	Y+1, r24	; 0x01
    2dea:	2b c0       	rjmp	.+86     	; 0x2e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2dec:	89 e0       	ldi	r24, 0x09	; 9
    2dee:	89 83       	std	Y+1, r24	; 0x01
    2df0:	28 c0       	rjmp	.+80     	; 0x2e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2df2:	85 e2       	ldi	r24, 0x25	; 37
    2df4:	89 83       	std	Y+1, r24	; 0x01
    2df6:	25 c0       	rjmp	.+74     	; 0x2e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2df8:	84 e0       	ldi	r24, 0x04	; 4
    2dfa:	89 83       	std	Y+1, r24	; 0x01
    2dfc:	22 c0       	rjmp	.+68     	; 0x2e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2dfe:	85 e0       	ldi	r24, 0x05	; 5
    2e00:	89 83       	std	Y+1, r24	; 0x01
    2e02:	1f c0       	rjmp	.+62     	; 0x2e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2e04:	86 e0       	ldi	r24, 0x06	; 6
    2e06:	89 83       	std	Y+1, r24	; 0x01
    2e08:	1c c0       	rjmp	.+56     	; 0x2e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2e0a:	8a e2       	ldi	r24, 0x2A	; 42
    2e0c:	89 83       	std	Y+1, r24	; 0x01
    2e0e:	19 c0       	rjmp	.+50     	; 0x2e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	89 83       	std	Y+1, r24	; 0x01
    2e14:	16 c0       	rjmp	.+44     	; 0x2e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2e16:	82 e0       	ldi	r24, 0x02	; 2
    2e18:	89 83       	std	Y+1, r24	; 0x01
    2e1a:	13 c0       	rjmp	.+38     	; 0x2e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2e1c:	83 e0       	ldi	r24, 0x03	; 3
    2e1e:	89 83       	std	Y+1, r24	; 0x01
    2e20:	10 c0       	rjmp	.+32     	; 0x2e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2e22:	8d e2       	ldi	r24, 0x2D	; 45
    2e24:	89 83       	std	Y+1, r24	; 0x01
    2e26:	0d c0       	rjmp	.+26     	; 0x2e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2e28:	8d e0       	ldi	r24, 0x0D	; 13
    2e2a:	89 83       	std	Y+1, r24	; 0x01
    2e2c:	0a c0       	rjmp	.+20     	; 0x2e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2e2e:	19 82       	std	Y+1, r1	; 0x01
    2e30:	08 c0       	rjmp	.+16     	; 0x2e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2e32:	8d e3       	ldi	r24, 0x3D	; 61
    2e34:	89 83       	std	Y+1, r24	; 0x01
    2e36:	05 c0       	rjmp	.+10     	; 0x2e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2e38:	8b e2       	ldi	r24, 0x2B	; 43
    2e3a:	89 83       	std	Y+1, r24	; 0x01
    2e3c:	02 c0       	rjmp	.+4      	; 0x2e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e40:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2e42:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	0f 90       	pop	r0
    2e4c:	cf 91       	pop	r28
    2e4e:	df 91       	pop	r29
    2e50:	08 95       	ret

00002e52 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2e52:	df 93       	push	r29
    2e54:	cf 93       	push	r28
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
    2e5a:	2e 97       	sbiw	r28, 0x0e	; 14
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2e66:	82 e0       	ldi	r24, 0x02	; 2
    2e68:	61 e0       	ldi	r22, 0x01	; 1
    2e6a:	41 e0       	ldi	r20, 0x01	; 1
    2e6c:	0e 94 57 12 	call	0x24ae	; 0x24ae <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2e70:	82 e0       	ldi	r24, 0x02	; 2
    2e72:	60 e0       	ldi	r22, 0x00	; 0
    2e74:	41 e0       	ldi	r20, 0x01	; 1
    2e76:	0e 94 57 12 	call	0x24ae	; 0x24ae <GPIO_setupPinDirection>
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	a0 ea       	ldi	r26, 0xA0	; 160
    2e80:	b1 e4       	ldi	r27, 0x41	; 65
    2e82:	8b 87       	std	Y+11, r24	; 0x0b
    2e84:	9c 87       	std	Y+12, r25	; 0x0c
    2e86:	ad 87       	std	Y+13, r26	; 0x0d
    2e88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	4a ef       	ldi	r20, 0xFA	; 250
    2e98:	54 e4       	ldi	r21, 0x44	; 68
    2e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	8f 83       	std	Y+7, r24	; 0x07
    2ea4:	98 87       	std	Y+8, r25	; 0x08
    2ea6:	a9 87       	std	Y+9, r26	; 0x09
    2ea8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2eac:	78 85       	ldd	r23, Y+8	; 0x08
    2eae:	89 85       	ldd	r24, Y+9	; 0x09
    2eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	40 e8       	ldi	r20, 0x80	; 128
    2eb8:	5f e3       	ldi	r21, 0x3F	; 63
    2eba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ebe:	88 23       	and	r24, r24
    2ec0:	2c f4       	brge	.+10     	; 0x2ecc <LCD_init+0x7a>
		__ticks = 1;
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	9e 83       	std	Y+6, r25	; 0x06
    2ec8:	8d 83       	std	Y+5, r24	; 0x05
    2eca:	3f c0       	rjmp	.+126    	; 0x2f4a <LCD_init+0xf8>
	else if (__tmp > 65535)
    2ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ece:	78 85       	ldd	r23, Y+8	; 0x08
    2ed0:	89 85       	ldd	r24, Y+9	; 0x09
    2ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	3f ef       	ldi	r19, 0xFF	; 255
    2ed8:	4f e7       	ldi	r20, 0x7F	; 127
    2eda:	57 e4       	ldi	r21, 0x47	; 71
    2edc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ee0:	18 16       	cp	r1, r24
    2ee2:	4c f5       	brge	.+82     	; 0x2f36 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	40 e2       	ldi	r20, 0x20	; 32
    2ef2:	51 e4       	ldi	r21, 0x41	; 65
    2ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	bc 01       	movw	r22, r24
    2efe:	cd 01       	movw	r24, r26
    2f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	9e 83       	std	Y+6, r25	; 0x06
    2f0a:	8d 83       	std	Y+5, r24	; 0x05
    2f0c:	0f c0       	rjmp	.+30     	; 0x2f2c <LCD_init+0xda>
    2f0e:	88 ec       	ldi	r24, 0xC8	; 200
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	9c 83       	std	Y+4, r25	; 0x04
    2f14:	8b 83       	std	Y+3, r24	; 0x03
    2f16:	8b 81       	ldd	r24, Y+3	; 0x03
    2f18:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1a:	01 97       	sbiw	r24, 0x01	; 1
    2f1c:	f1 f7       	brne	.-4      	; 0x2f1a <LCD_init+0xc8>
    2f1e:	9c 83       	std	Y+4, r25	; 0x04
    2f20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f22:	8d 81       	ldd	r24, Y+5	; 0x05
    2f24:	9e 81       	ldd	r25, Y+6	; 0x06
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	9e 83       	std	Y+6, r25	; 0x06
    2f2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f30:	00 97       	sbiw	r24, 0x00	; 0
    2f32:	69 f7       	brne	.-38     	; 0x2f0e <LCD_init+0xbc>
    2f34:	14 c0       	rjmp	.+40     	; 0x2f5e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f36:	6f 81       	ldd	r22, Y+7	; 0x07
    2f38:	78 85       	ldd	r23, Y+8	; 0x08
    2f3a:	89 85       	ldd	r24, Y+9	; 0x09
    2f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	9e 83       	std	Y+6, r25	; 0x06
    2f48:	8d 83       	std	Y+5, r24	; 0x05
    2f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4e:	9a 83       	std	Y+2, r25	; 0x02
    2f50:	89 83       	std	Y+1, r24	; 0x01
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	9a 81       	ldd	r25, Y+2	; 0x02
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <LCD_init+0x104>
    2f5a:	9a 83       	std	Y+2, r25	; 0x02
    2f5c:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2f5e:	80 e0       	ldi	r24, 0x00	; 0
    2f60:	6f ef       	ldi	r22, 0xFF	; 255
    2f62:	0e 94 c8 14 	call	0x2990	; 0x2990 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2f66:	88 e3       	ldi	r24, 0x38	; 56
    2f68:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2f6c:	8c e0       	ldi	r24, 0x0C	; 12
    2f6e:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <LCD_sendCommand>
}
    2f78:	2e 96       	adiw	r28, 0x0e	; 14
    2f7a:	0f b6       	in	r0, 0x3f	; 63
    2f7c:	f8 94       	cli
    2f7e:	de bf       	out	0x3e, r29	; 62
    2f80:	0f be       	out	0x3f, r0	; 63
    2f82:	cd bf       	out	0x3d, r28	; 61
    2f84:	cf 91       	pop	r28
    2f86:	df 91       	pop	r29
    2f88:	08 95       	ret

00002f8a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2f8a:	df 93       	push	r29
    2f8c:	cf 93       	push	r28
    2f8e:	cd b7       	in	r28, 0x3d	; 61
    2f90:	de b7       	in	r29, 0x3e	; 62
    2f92:	e9 97       	sbiw	r28, 0x39	; 57
    2f94:	0f b6       	in	r0, 0x3f	; 63
    2f96:	f8 94       	cli
    2f98:	de bf       	out	0x3e, r29	; 62
    2f9a:	0f be       	out	0x3f, r0	; 63
    2f9c:	cd bf       	out	0x3d, r28	; 61
    2f9e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2fa0:	82 e0       	ldi	r24, 0x02	; 2
    2fa2:	61 e0       	ldi	r22, 0x01	; 1
    2fa4:	40 e0       	ldi	r20, 0x00	; 0
    2fa6:	0e 94 42 13 	call	0x2684	; 0x2684 <GPIO_writePin>
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	a0 e8       	ldi	r26, 0x80	; 128
    2fb0:	bf e3       	ldi	r27, 0x3F	; 63
    2fb2:	8d ab       	std	Y+53, r24	; 0x35
    2fb4:	9e ab       	std	Y+54, r25	; 0x36
    2fb6:	af ab       	std	Y+55, r26	; 0x37
    2fb8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fba:	6d a9       	ldd	r22, Y+53	; 0x35
    2fbc:	7e a9       	ldd	r23, Y+54	; 0x36
    2fbe:	8f a9       	ldd	r24, Y+55	; 0x37
    2fc0:	98 ad       	ldd	r25, Y+56	; 0x38
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	4a ef       	ldi	r20, 0xFA	; 250
    2fc8:	54 e4       	ldi	r21, 0x44	; 68
    2fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	89 ab       	std	Y+49, r24	; 0x31
    2fd4:	9a ab       	std	Y+50, r25	; 0x32
    2fd6:	ab ab       	std	Y+51, r26	; 0x33
    2fd8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fda:	69 a9       	ldd	r22, Y+49	; 0x31
    2fdc:	7a a9       	ldd	r23, Y+50	; 0x32
    2fde:	8b a9       	ldd	r24, Y+51	; 0x33
    2fe0:	9c a9       	ldd	r25, Y+52	; 0x34
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	40 e8       	ldi	r20, 0x80	; 128
    2fe8:	5f e3       	ldi	r21, 0x3F	; 63
    2fea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fee:	88 23       	and	r24, r24
    2ff0:	2c f4       	brge	.+10     	; 0x2ffc <LCD_sendCommand+0x72>
		__ticks = 1;
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	98 ab       	std	Y+48, r25	; 0x30
    2ff8:	8f a7       	std	Y+47, r24	; 0x2f
    2ffa:	3f c0       	rjmp	.+126    	; 0x307a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2ffc:	69 a9       	ldd	r22, Y+49	; 0x31
    2ffe:	7a a9       	ldd	r23, Y+50	; 0x32
    3000:	8b a9       	ldd	r24, Y+51	; 0x33
    3002:	9c a9       	ldd	r25, Y+52	; 0x34
    3004:	20 e0       	ldi	r18, 0x00	; 0
    3006:	3f ef       	ldi	r19, 0xFF	; 255
    3008:	4f e7       	ldi	r20, 0x7F	; 127
    300a:	57 e4       	ldi	r21, 0x47	; 71
    300c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3010:	18 16       	cp	r1, r24
    3012:	4c f5       	brge	.+82     	; 0x3066 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3014:	6d a9       	ldd	r22, Y+53	; 0x35
    3016:	7e a9       	ldd	r23, Y+54	; 0x36
    3018:	8f a9       	ldd	r24, Y+55	; 0x37
    301a:	98 ad       	ldd	r25, Y+56	; 0x38
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	40 e2       	ldi	r20, 0x20	; 32
    3022:	51 e4       	ldi	r21, 0x41	; 65
    3024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	bc 01       	movw	r22, r24
    302e:	cd 01       	movw	r24, r26
    3030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	98 ab       	std	Y+48, r25	; 0x30
    303a:	8f a7       	std	Y+47, r24	; 0x2f
    303c:	0f c0       	rjmp	.+30     	; 0x305c <LCD_sendCommand+0xd2>
    303e:	88 ec       	ldi	r24, 0xC8	; 200
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	9e a7       	std	Y+46, r25	; 0x2e
    3044:	8d a7       	std	Y+45, r24	; 0x2d
    3046:	8d a5       	ldd	r24, Y+45	; 0x2d
    3048:	9e a5       	ldd	r25, Y+46	; 0x2e
    304a:	01 97       	sbiw	r24, 0x01	; 1
    304c:	f1 f7       	brne	.-4      	; 0x304a <LCD_sendCommand+0xc0>
    304e:	9e a7       	std	Y+46, r25	; 0x2e
    3050:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3052:	8f a5       	ldd	r24, Y+47	; 0x2f
    3054:	98 a9       	ldd	r25, Y+48	; 0x30
    3056:	01 97       	sbiw	r24, 0x01	; 1
    3058:	98 ab       	std	Y+48, r25	; 0x30
    305a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    305c:	8f a5       	ldd	r24, Y+47	; 0x2f
    305e:	98 a9       	ldd	r25, Y+48	; 0x30
    3060:	00 97       	sbiw	r24, 0x00	; 0
    3062:	69 f7       	brne	.-38     	; 0x303e <LCD_sendCommand+0xb4>
    3064:	14 c0       	rjmp	.+40     	; 0x308e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3066:	69 a9       	ldd	r22, Y+49	; 0x31
    3068:	7a a9       	ldd	r23, Y+50	; 0x32
    306a:	8b a9       	ldd	r24, Y+51	; 0x33
    306c:	9c a9       	ldd	r25, Y+52	; 0x34
    306e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	98 ab       	std	Y+48, r25	; 0x30
    3078:	8f a7       	std	Y+47, r24	; 0x2f
    307a:	8f a5       	ldd	r24, Y+47	; 0x2f
    307c:	98 a9       	ldd	r25, Y+48	; 0x30
    307e:	9c a7       	std	Y+44, r25	; 0x2c
    3080:	8b a7       	std	Y+43, r24	; 0x2b
    3082:	8b a5       	ldd	r24, Y+43	; 0x2b
    3084:	9c a5       	ldd	r25, Y+44	; 0x2c
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	f1 f7       	brne	.-4      	; 0x3086 <LCD_sendCommand+0xfc>
    308a:	9c a7       	std	Y+44, r25	; 0x2c
    308c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    308e:	82 e0       	ldi	r24, 0x02	; 2
    3090:	60 e0       	ldi	r22, 0x00	; 0
    3092:	41 e0       	ldi	r20, 0x01	; 1
    3094:	0e 94 42 13 	call	0x2684	; 0x2684 <GPIO_writePin>
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	a0 e8       	ldi	r26, 0x80	; 128
    309e:	bf e3       	ldi	r27, 0x3F	; 63
    30a0:	8f a3       	std	Y+39, r24	; 0x27
    30a2:	98 a7       	std	Y+40, r25	; 0x28
    30a4:	a9 a7       	std	Y+41, r26	; 0x29
    30a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a8:	6f a1       	ldd	r22, Y+39	; 0x27
    30aa:	78 a5       	ldd	r23, Y+40	; 0x28
    30ac:	89 a5       	ldd	r24, Y+41	; 0x29
    30ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	4a ef       	ldi	r20, 0xFA	; 250
    30b6:	54 e4       	ldi	r21, 0x44	; 68
    30b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	8b a3       	std	Y+35, r24	; 0x23
    30c2:	9c a3       	std	Y+36, r25	; 0x24
    30c4:	ad a3       	std	Y+37, r26	; 0x25
    30c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30c8:	6b a1       	ldd	r22, Y+35	; 0x23
    30ca:	7c a1       	ldd	r23, Y+36	; 0x24
    30cc:	8d a1       	ldd	r24, Y+37	; 0x25
    30ce:	9e a1       	ldd	r25, Y+38	; 0x26
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	40 e8       	ldi	r20, 0x80	; 128
    30d6:	5f e3       	ldi	r21, 0x3F	; 63
    30d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30dc:	88 23       	and	r24, r24
    30de:	2c f4       	brge	.+10     	; 0x30ea <LCD_sendCommand+0x160>
		__ticks = 1;
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	9a a3       	std	Y+34, r25	; 0x22
    30e6:	89 a3       	std	Y+33, r24	; 0x21
    30e8:	3f c0       	rjmp	.+126    	; 0x3168 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    30ea:	6b a1       	ldd	r22, Y+35	; 0x23
    30ec:	7c a1       	ldd	r23, Y+36	; 0x24
    30ee:	8d a1       	ldd	r24, Y+37	; 0x25
    30f0:	9e a1       	ldd	r25, Y+38	; 0x26
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	3f ef       	ldi	r19, 0xFF	; 255
    30f6:	4f e7       	ldi	r20, 0x7F	; 127
    30f8:	57 e4       	ldi	r21, 0x47	; 71
    30fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30fe:	18 16       	cp	r1, r24
    3100:	4c f5       	brge	.+82     	; 0x3154 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3102:	6f a1       	ldd	r22, Y+39	; 0x27
    3104:	78 a5       	ldd	r23, Y+40	; 0x28
    3106:	89 a5       	ldd	r24, Y+41	; 0x29
    3108:	9a a5       	ldd	r25, Y+42	; 0x2a
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	40 e2       	ldi	r20, 0x20	; 32
    3110:	51 e4       	ldi	r21, 0x41	; 65
    3112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	bc 01       	movw	r22, r24
    311c:	cd 01       	movw	r24, r26
    311e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	9a a3       	std	Y+34, r25	; 0x22
    3128:	89 a3       	std	Y+33, r24	; 0x21
    312a:	0f c0       	rjmp	.+30     	; 0x314a <LCD_sendCommand+0x1c0>
    312c:	88 ec       	ldi	r24, 0xC8	; 200
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	98 a3       	std	Y+32, r25	; 0x20
    3132:	8f 8f       	std	Y+31, r24	; 0x1f
    3134:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3136:	98 a1       	ldd	r25, Y+32	; 0x20
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	f1 f7       	brne	.-4      	; 0x3138 <LCD_sendCommand+0x1ae>
    313c:	98 a3       	std	Y+32, r25	; 0x20
    313e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3140:	89 a1       	ldd	r24, Y+33	; 0x21
    3142:	9a a1       	ldd	r25, Y+34	; 0x22
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	9a a3       	std	Y+34, r25	; 0x22
    3148:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    314a:	89 a1       	ldd	r24, Y+33	; 0x21
    314c:	9a a1       	ldd	r25, Y+34	; 0x22
    314e:	00 97       	sbiw	r24, 0x00	; 0
    3150:	69 f7       	brne	.-38     	; 0x312c <LCD_sendCommand+0x1a2>
    3152:	14 c0       	rjmp	.+40     	; 0x317c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3154:	6b a1       	ldd	r22, Y+35	; 0x23
    3156:	7c a1       	ldd	r23, Y+36	; 0x24
    3158:	8d a1       	ldd	r24, Y+37	; 0x25
    315a:	9e a1       	ldd	r25, Y+38	; 0x26
    315c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	9a a3       	std	Y+34, r25	; 0x22
    3166:	89 a3       	std	Y+33, r24	; 0x21
    3168:	89 a1       	ldd	r24, Y+33	; 0x21
    316a:	9a a1       	ldd	r25, Y+34	; 0x22
    316c:	9e 8f       	std	Y+30, r25	; 0x1e
    316e:	8d 8f       	std	Y+29, r24	; 0x1d
    3170:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3172:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3174:	01 97       	sbiw	r24, 0x01	; 1
    3176:	f1 f7       	brne	.-4      	; 0x3174 <LCD_sendCommand+0x1ea>
    3178:	9e 8f       	std	Y+30, r25	; 0x1e
    317a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	69 ad       	ldd	r22, Y+57	; 0x39
    3180:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <GPIO_writePort>
    3184:	80 e0       	ldi	r24, 0x00	; 0
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	a0 e8       	ldi	r26, 0x80	; 128
    318a:	bf e3       	ldi	r27, 0x3F	; 63
    318c:	89 8f       	std	Y+25, r24	; 0x19
    318e:	9a 8f       	std	Y+26, r25	; 0x1a
    3190:	ab 8f       	std	Y+27, r26	; 0x1b
    3192:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3194:	69 8d       	ldd	r22, Y+25	; 0x19
    3196:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3198:	8b 8d       	ldd	r24, Y+27	; 0x1b
    319a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	4a ef       	ldi	r20, 0xFA	; 250
    31a2:	54 e4       	ldi	r21, 0x44	; 68
    31a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a8:	dc 01       	movw	r26, r24
    31aa:	cb 01       	movw	r24, r22
    31ac:	8d 8b       	std	Y+21, r24	; 0x15
    31ae:	9e 8b       	std	Y+22, r25	; 0x16
    31b0:	af 8b       	std	Y+23, r26	; 0x17
    31b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31b4:	6d 89       	ldd	r22, Y+21	; 0x15
    31b6:	7e 89       	ldd	r23, Y+22	; 0x16
    31b8:	8f 89       	ldd	r24, Y+23	; 0x17
    31ba:	98 8d       	ldd	r25, Y+24	; 0x18
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	40 e8       	ldi	r20, 0x80	; 128
    31c2:	5f e3       	ldi	r21, 0x3F	; 63
    31c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31c8:	88 23       	and	r24, r24
    31ca:	2c f4       	brge	.+10     	; 0x31d6 <LCD_sendCommand+0x24c>
		__ticks = 1;
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	9c 8b       	std	Y+20, r25	; 0x14
    31d2:	8b 8b       	std	Y+19, r24	; 0x13
    31d4:	3f c0       	rjmp	.+126    	; 0x3254 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    31d6:	6d 89       	ldd	r22, Y+21	; 0x15
    31d8:	7e 89       	ldd	r23, Y+22	; 0x16
    31da:	8f 89       	ldd	r24, Y+23	; 0x17
    31dc:	98 8d       	ldd	r25, Y+24	; 0x18
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	3f ef       	ldi	r19, 0xFF	; 255
    31e2:	4f e7       	ldi	r20, 0x7F	; 127
    31e4:	57 e4       	ldi	r21, 0x47	; 71
    31e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31ea:	18 16       	cp	r1, r24
    31ec:	4c f5       	brge	.+82     	; 0x3240 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ee:	69 8d       	ldd	r22, Y+25	; 0x19
    31f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	40 e2       	ldi	r20, 0x20	; 32
    31fc:	51 e4       	ldi	r21, 0x41	; 65
    31fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3202:	dc 01       	movw	r26, r24
    3204:	cb 01       	movw	r24, r22
    3206:	bc 01       	movw	r22, r24
    3208:	cd 01       	movw	r24, r26
    320a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	9c 8b       	std	Y+20, r25	; 0x14
    3214:	8b 8b       	std	Y+19, r24	; 0x13
    3216:	0f c0       	rjmp	.+30     	; 0x3236 <LCD_sendCommand+0x2ac>
    3218:	88 ec       	ldi	r24, 0xC8	; 200
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	9a 8b       	std	Y+18, r25	; 0x12
    321e:	89 8b       	std	Y+17, r24	; 0x11
    3220:	89 89       	ldd	r24, Y+17	; 0x11
    3222:	9a 89       	ldd	r25, Y+18	; 0x12
    3224:	01 97       	sbiw	r24, 0x01	; 1
    3226:	f1 f7       	brne	.-4      	; 0x3224 <LCD_sendCommand+0x29a>
    3228:	9a 8b       	std	Y+18, r25	; 0x12
    322a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    322c:	8b 89       	ldd	r24, Y+19	; 0x13
    322e:	9c 89       	ldd	r25, Y+20	; 0x14
    3230:	01 97       	sbiw	r24, 0x01	; 1
    3232:	9c 8b       	std	Y+20, r25	; 0x14
    3234:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3236:	8b 89       	ldd	r24, Y+19	; 0x13
    3238:	9c 89       	ldd	r25, Y+20	; 0x14
    323a:	00 97       	sbiw	r24, 0x00	; 0
    323c:	69 f7       	brne	.-38     	; 0x3218 <LCD_sendCommand+0x28e>
    323e:	14 c0       	rjmp	.+40     	; 0x3268 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3240:	6d 89       	ldd	r22, Y+21	; 0x15
    3242:	7e 89       	ldd	r23, Y+22	; 0x16
    3244:	8f 89       	ldd	r24, Y+23	; 0x17
    3246:	98 8d       	ldd	r25, Y+24	; 0x18
    3248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	9c 8b       	std	Y+20, r25	; 0x14
    3252:	8b 8b       	std	Y+19, r24	; 0x13
    3254:	8b 89       	ldd	r24, Y+19	; 0x13
    3256:	9c 89       	ldd	r25, Y+20	; 0x14
    3258:	98 8b       	std	Y+16, r25	; 0x10
    325a:	8f 87       	std	Y+15, r24	; 0x0f
    325c:	8f 85       	ldd	r24, Y+15	; 0x0f
    325e:	98 89       	ldd	r25, Y+16	; 0x10
    3260:	01 97       	sbiw	r24, 0x01	; 1
    3262:	f1 f7       	brne	.-4      	; 0x3260 <LCD_sendCommand+0x2d6>
    3264:	98 8b       	std	Y+16, r25	; 0x10
    3266:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3268:	82 e0       	ldi	r24, 0x02	; 2
    326a:	60 e0       	ldi	r22, 0x00	; 0
    326c:	40 e0       	ldi	r20, 0x00	; 0
    326e:	0e 94 42 13 	call	0x2684	; 0x2684 <GPIO_writePin>
    3272:	80 e0       	ldi	r24, 0x00	; 0
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	a0 e8       	ldi	r26, 0x80	; 128
    3278:	bf e3       	ldi	r27, 0x3F	; 63
    327a:	8b 87       	std	Y+11, r24	; 0x0b
    327c:	9c 87       	std	Y+12, r25	; 0x0c
    327e:	ad 87       	std	Y+13, r26	; 0x0d
    3280:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3282:	6b 85       	ldd	r22, Y+11	; 0x0b
    3284:	7c 85       	ldd	r23, Y+12	; 0x0c
    3286:	8d 85       	ldd	r24, Y+13	; 0x0d
    3288:	9e 85       	ldd	r25, Y+14	; 0x0e
    328a:	20 e0       	ldi	r18, 0x00	; 0
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	4a ef       	ldi	r20, 0xFA	; 250
    3290:	54 e4       	ldi	r21, 0x44	; 68
    3292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3296:	dc 01       	movw	r26, r24
    3298:	cb 01       	movw	r24, r22
    329a:	8f 83       	std	Y+7, r24	; 0x07
    329c:	98 87       	std	Y+8, r25	; 0x08
    329e:	a9 87       	std	Y+9, r26	; 0x09
    32a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32a2:	6f 81       	ldd	r22, Y+7	; 0x07
    32a4:	78 85       	ldd	r23, Y+8	; 0x08
    32a6:	89 85       	ldd	r24, Y+9	; 0x09
    32a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	40 e8       	ldi	r20, 0x80	; 128
    32b0:	5f e3       	ldi	r21, 0x3F	; 63
    32b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32b6:	88 23       	and	r24, r24
    32b8:	2c f4       	brge	.+10     	; 0x32c4 <LCD_sendCommand+0x33a>
		__ticks = 1;
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	9e 83       	std	Y+6, r25	; 0x06
    32c0:	8d 83       	std	Y+5, r24	; 0x05
    32c2:	3f c0       	rjmp	.+126    	; 0x3342 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    32c4:	6f 81       	ldd	r22, Y+7	; 0x07
    32c6:	78 85       	ldd	r23, Y+8	; 0x08
    32c8:	89 85       	ldd	r24, Y+9	; 0x09
    32ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	3f ef       	ldi	r19, 0xFF	; 255
    32d0:	4f e7       	ldi	r20, 0x7F	; 127
    32d2:	57 e4       	ldi	r21, 0x47	; 71
    32d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32d8:	18 16       	cp	r1, r24
    32da:	4c f5       	brge	.+82     	; 0x332e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    32de:	7c 85       	ldd	r23, Y+12	; 0x0c
    32e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	40 e2       	ldi	r20, 0x20	; 32
    32ea:	51 e4       	ldi	r21, 0x41	; 65
    32ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	bc 01       	movw	r22, r24
    32f6:	cd 01       	movw	r24, r26
    32f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	9e 83       	std	Y+6, r25	; 0x06
    3302:	8d 83       	std	Y+5, r24	; 0x05
    3304:	0f c0       	rjmp	.+30     	; 0x3324 <LCD_sendCommand+0x39a>
    3306:	88 ec       	ldi	r24, 0xC8	; 200
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	9c 83       	std	Y+4, r25	; 0x04
    330c:	8b 83       	std	Y+3, r24	; 0x03
    330e:	8b 81       	ldd	r24, Y+3	; 0x03
    3310:	9c 81       	ldd	r25, Y+4	; 0x04
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	f1 f7       	brne	.-4      	; 0x3312 <LCD_sendCommand+0x388>
    3316:	9c 83       	std	Y+4, r25	; 0x04
    3318:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    331a:	8d 81       	ldd	r24, Y+5	; 0x05
    331c:	9e 81       	ldd	r25, Y+6	; 0x06
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	9e 83       	std	Y+6, r25	; 0x06
    3322:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3324:	8d 81       	ldd	r24, Y+5	; 0x05
    3326:	9e 81       	ldd	r25, Y+6	; 0x06
    3328:	00 97       	sbiw	r24, 0x00	; 0
    332a:	69 f7       	brne	.-38     	; 0x3306 <LCD_sendCommand+0x37c>
    332c:	14 c0       	rjmp	.+40     	; 0x3356 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    332e:	6f 81       	ldd	r22, Y+7	; 0x07
    3330:	78 85       	ldd	r23, Y+8	; 0x08
    3332:	89 85       	ldd	r24, Y+9	; 0x09
    3334:	9a 85       	ldd	r25, Y+10	; 0x0a
    3336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	9e 83       	std	Y+6, r25	; 0x06
    3340:	8d 83       	std	Y+5, r24	; 0x05
    3342:	8d 81       	ldd	r24, Y+5	; 0x05
    3344:	9e 81       	ldd	r25, Y+6	; 0x06
    3346:	9a 83       	std	Y+2, r25	; 0x02
    3348:	89 83       	std	Y+1, r24	; 0x01
    334a:	89 81       	ldd	r24, Y+1	; 0x01
    334c:	9a 81       	ldd	r25, Y+2	; 0x02
    334e:	01 97       	sbiw	r24, 0x01	; 1
    3350:	f1 f7       	brne	.-4      	; 0x334e <LCD_sendCommand+0x3c4>
    3352:	9a 83       	std	Y+2, r25	; 0x02
    3354:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3356:	e9 96       	adiw	r28, 0x39	; 57
    3358:	0f b6       	in	r0, 0x3f	; 63
    335a:	f8 94       	cli
    335c:	de bf       	out	0x3e, r29	; 62
    335e:	0f be       	out	0x3f, r0	; 63
    3360:	cd bf       	out	0x3d, r28	; 61
    3362:	cf 91       	pop	r28
    3364:	df 91       	pop	r29
    3366:	08 95       	ret

00003368 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    3368:	df 93       	push	r29
    336a:	cf 93       	push	r28
    336c:	cd b7       	in	r28, 0x3d	; 61
    336e:	de b7       	in	r29, 0x3e	; 62
    3370:	e9 97       	sbiw	r28, 0x39	; 57
    3372:	0f b6       	in	r0, 0x3f	; 63
    3374:	f8 94       	cli
    3376:	de bf       	out	0x3e, r29	; 62
    3378:	0f be       	out	0x3f, r0	; 63
    337a:	cd bf       	out	0x3d, r28	; 61
    337c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    337e:	82 e0       	ldi	r24, 0x02	; 2
    3380:	61 e0       	ldi	r22, 0x01	; 1
    3382:	41 e0       	ldi	r20, 0x01	; 1
    3384:	0e 94 42 13 	call	0x2684	; 0x2684 <GPIO_writePin>
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	a0 e8       	ldi	r26, 0x80	; 128
    338e:	bf e3       	ldi	r27, 0x3F	; 63
    3390:	8d ab       	std	Y+53, r24	; 0x35
    3392:	9e ab       	std	Y+54, r25	; 0x36
    3394:	af ab       	std	Y+55, r26	; 0x37
    3396:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3398:	6d a9       	ldd	r22, Y+53	; 0x35
    339a:	7e a9       	ldd	r23, Y+54	; 0x36
    339c:	8f a9       	ldd	r24, Y+55	; 0x37
    339e:	98 ad       	ldd	r25, Y+56	; 0x38
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	4a ef       	ldi	r20, 0xFA	; 250
    33a6:	54 e4       	ldi	r21, 0x44	; 68
    33a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	89 ab       	std	Y+49, r24	; 0x31
    33b2:	9a ab       	std	Y+50, r25	; 0x32
    33b4:	ab ab       	std	Y+51, r26	; 0x33
    33b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    33b8:	69 a9       	ldd	r22, Y+49	; 0x31
    33ba:	7a a9       	ldd	r23, Y+50	; 0x32
    33bc:	8b a9       	ldd	r24, Y+51	; 0x33
    33be:	9c a9       	ldd	r25, Y+52	; 0x34
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	40 e8       	ldi	r20, 0x80	; 128
    33c6:	5f e3       	ldi	r21, 0x3F	; 63
    33c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33cc:	88 23       	and	r24, r24
    33ce:	2c f4       	brge	.+10     	; 0x33da <LCD_displayCharacter+0x72>
		__ticks = 1;
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	98 ab       	std	Y+48, r25	; 0x30
    33d6:	8f a7       	std	Y+47, r24	; 0x2f
    33d8:	3f c0       	rjmp	.+126    	; 0x3458 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    33da:	69 a9       	ldd	r22, Y+49	; 0x31
    33dc:	7a a9       	ldd	r23, Y+50	; 0x32
    33de:	8b a9       	ldd	r24, Y+51	; 0x33
    33e0:	9c a9       	ldd	r25, Y+52	; 0x34
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	3f ef       	ldi	r19, 0xFF	; 255
    33e6:	4f e7       	ldi	r20, 0x7F	; 127
    33e8:	57 e4       	ldi	r21, 0x47	; 71
    33ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33ee:	18 16       	cp	r1, r24
    33f0:	4c f5       	brge	.+82     	; 0x3444 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f2:	6d a9       	ldd	r22, Y+53	; 0x35
    33f4:	7e a9       	ldd	r23, Y+54	; 0x36
    33f6:	8f a9       	ldd	r24, Y+55	; 0x37
    33f8:	98 ad       	ldd	r25, Y+56	; 0x38
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	40 e2       	ldi	r20, 0x20	; 32
    3400:	51 e4       	ldi	r21, 0x41	; 65
    3402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3406:	dc 01       	movw	r26, r24
    3408:	cb 01       	movw	r24, r22
    340a:	bc 01       	movw	r22, r24
    340c:	cd 01       	movw	r24, r26
    340e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	98 ab       	std	Y+48, r25	; 0x30
    3418:	8f a7       	std	Y+47, r24	; 0x2f
    341a:	0f c0       	rjmp	.+30     	; 0x343a <LCD_displayCharacter+0xd2>
    341c:	88 ec       	ldi	r24, 0xC8	; 200
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	9e a7       	std	Y+46, r25	; 0x2e
    3422:	8d a7       	std	Y+45, r24	; 0x2d
    3424:	8d a5       	ldd	r24, Y+45	; 0x2d
    3426:	9e a5       	ldd	r25, Y+46	; 0x2e
    3428:	01 97       	sbiw	r24, 0x01	; 1
    342a:	f1 f7       	brne	.-4      	; 0x3428 <LCD_displayCharacter+0xc0>
    342c:	9e a7       	std	Y+46, r25	; 0x2e
    342e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3430:	8f a5       	ldd	r24, Y+47	; 0x2f
    3432:	98 a9       	ldd	r25, Y+48	; 0x30
    3434:	01 97       	sbiw	r24, 0x01	; 1
    3436:	98 ab       	std	Y+48, r25	; 0x30
    3438:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    343a:	8f a5       	ldd	r24, Y+47	; 0x2f
    343c:	98 a9       	ldd	r25, Y+48	; 0x30
    343e:	00 97       	sbiw	r24, 0x00	; 0
    3440:	69 f7       	brne	.-38     	; 0x341c <LCD_displayCharacter+0xb4>
    3442:	14 c0       	rjmp	.+40     	; 0x346c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3444:	69 a9       	ldd	r22, Y+49	; 0x31
    3446:	7a a9       	ldd	r23, Y+50	; 0x32
    3448:	8b a9       	ldd	r24, Y+51	; 0x33
    344a:	9c a9       	ldd	r25, Y+52	; 0x34
    344c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3450:	dc 01       	movw	r26, r24
    3452:	cb 01       	movw	r24, r22
    3454:	98 ab       	std	Y+48, r25	; 0x30
    3456:	8f a7       	std	Y+47, r24	; 0x2f
    3458:	8f a5       	ldd	r24, Y+47	; 0x2f
    345a:	98 a9       	ldd	r25, Y+48	; 0x30
    345c:	9c a7       	std	Y+44, r25	; 0x2c
    345e:	8b a7       	std	Y+43, r24	; 0x2b
    3460:	8b a5       	ldd	r24, Y+43	; 0x2b
    3462:	9c a5       	ldd	r25, Y+44	; 0x2c
    3464:	01 97       	sbiw	r24, 0x01	; 1
    3466:	f1 f7       	brne	.-4      	; 0x3464 <LCD_displayCharacter+0xfc>
    3468:	9c a7       	std	Y+44, r25	; 0x2c
    346a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    346c:	82 e0       	ldi	r24, 0x02	; 2
    346e:	60 e0       	ldi	r22, 0x00	; 0
    3470:	41 e0       	ldi	r20, 0x01	; 1
    3472:	0e 94 42 13 	call	0x2684	; 0x2684 <GPIO_writePin>
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	a0 e8       	ldi	r26, 0x80	; 128
    347c:	bf e3       	ldi	r27, 0x3F	; 63
    347e:	8f a3       	std	Y+39, r24	; 0x27
    3480:	98 a7       	std	Y+40, r25	; 0x28
    3482:	a9 a7       	std	Y+41, r26	; 0x29
    3484:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3486:	6f a1       	ldd	r22, Y+39	; 0x27
    3488:	78 a5       	ldd	r23, Y+40	; 0x28
    348a:	89 a5       	ldd	r24, Y+41	; 0x29
    348c:	9a a5       	ldd	r25, Y+42	; 0x2a
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	4a ef       	ldi	r20, 0xFA	; 250
    3494:	54 e4       	ldi	r21, 0x44	; 68
    3496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	8b a3       	std	Y+35, r24	; 0x23
    34a0:	9c a3       	std	Y+36, r25	; 0x24
    34a2:	ad a3       	std	Y+37, r26	; 0x25
    34a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34a6:	6b a1       	ldd	r22, Y+35	; 0x23
    34a8:	7c a1       	ldd	r23, Y+36	; 0x24
    34aa:	8d a1       	ldd	r24, Y+37	; 0x25
    34ac:	9e a1       	ldd	r25, Y+38	; 0x26
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	40 e8       	ldi	r20, 0x80	; 128
    34b4:	5f e3       	ldi	r21, 0x3F	; 63
    34b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34ba:	88 23       	and	r24, r24
    34bc:	2c f4       	brge	.+10     	; 0x34c8 <LCD_displayCharacter+0x160>
		__ticks = 1;
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	9a a3       	std	Y+34, r25	; 0x22
    34c4:	89 a3       	std	Y+33, r24	; 0x21
    34c6:	3f c0       	rjmp	.+126    	; 0x3546 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    34c8:	6b a1       	ldd	r22, Y+35	; 0x23
    34ca:	7c a1       	ldd	r23, Y+36	; 0x24
    34cc:	8d a1       	ldd	r24, Y+37	; 0x25
    34ce:	9e a1       	ldd	r25, Y+38	; 0x26
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	3f ef       	ldi	r19, 0xFF	; 255
    34d4:	4f e7       	ldi	r20, 0x7F	; 127
    34d6:	57 e4       	ldi	r21, 0x47	; 71
    34d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34dc:	18 16       	cp	r1, r24
    34de:	4c f5       	brge	.+82     	; 0x3532 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e0:	6f a1       	ldd	r22, Y+39	; 0x27
    34e2:	78 a5       	ldd	r23, Y+40	; 0x28
    34e4:	89 a5       	ldd	r24, Y+41	; 0x29
    34e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	40 e2       	ldi	r20, 0x20	; 32
    34ee:	51 e4       	ldi	r21, 0x41	; 65
    34f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f4:	dc 01       	movw	r26, r24
    34f6:	cb 01       	movw	r24, r22
    34f8:	bc 01       	movw	r22, r24
    34fa:	cd 01       	movw	r24, r26
    34fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	9a a3       	std	Y+34, r25	; 0x22
    3506:	89 a3       	std	Y+33, r24	; 0x21
    3508:	0f c0       	rjmp	.+30     	; 0x3528 <LCD_displayCharacter+0x1c0>
    350a:	88 ec       	ldi	r24, 0xC8	; 200
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	98 a3       	std	Y+32, r25	; 0x20
    3510:	8f 8f       	std	Y+31, r24	; 0x1f
    3512:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3514:	98 a1       	ldd	r25, Y+32	; 0x20
    3516:	01 97       	sbiw	r24, 0x01	; 1
    3518:	f1 f7       	brne	.-4      	; 0x3516 <LCD_displayCharacter+0x1ae>
    351a:	98 a3       	std	Y+32, r25	; 0x20
    351c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    351e:	89 a1       	ldd	r24, Y+33	; 0x21
    3520:	9a a1       	ldd	r25, Y+34	; 0x22
    3522:	01 97       	sbiw	r24, 0x01	; 1
    3524:	9a a3       	std	Y+34, r25	; 0x22
    3526:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3528:	89 a1       	ldd	r24, Y+33	; 0x21
    352a:	9a a1       	ldd	r25, Y+34	; 0x22
    352c:	00 97       	sbiw	r24, 0x00	; 0
    352e:	69 f7       	brne	.-38     	; 0x350a <LCD_displayCharacter+0x1a2>
    3530:	14 c0       	rjmp	.+40     	; 0x355a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3532:	6b a1       	ldd	r22, Y+35	; 0x23
    3534:	7c a1       	ldd	r23, Y+36	; 0x24
    3536:	8d a1       	ldd	r24, Y+37	; 0x25
    3538:	9e a1       	ldd	r25, Y+38	; 0x26
    353a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	9a a3       	std	Y+34, r25	; 0x22
    3544:	89 a3       	std	Y+33, r24	; 0x21
    3546:	89 a1       	ldd	r24, Y+33	; 0x21
    3548:	9a a1       	ldd	r25, Y+34	; 0x22
    354a:	9e 8f       	std	Y+30, r25	; 0x1e
    354c:	8d 8f       	std	Y+29, r24	; 0x1d
    354e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3550:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	f1 f7       	brne	.-4      	; 0x3552 <LCD_displayCharacter+0x1ea>
    3556:	9e 8f       	std	Y+30, r25	; 0x1e
    3558:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    355a:	80 e0       	ldi	r24, 0x00	; 0
    355c:	69 ad       	ldd	r22, Y+57	; 0x39
    355e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <GPIO_writePort>
    3562:	80 e0       	ldi	r24, 0x00	; 0
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	a0 e8       	ldi	r26, 0x80	; 128
    3568:	bf e3       	ldi	r27, 0x3F	; 63
    356a:	89 8f       	std	Y+25, r24	; 0x19
    356c:	9a 8f       	std	Y+26, r25	; 0x1a
    356e:	ab 8f       	std	Y+27, r26	; 0x1b
    3570:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3572:	69 8d       	ldd	r22, Y+25	; 0x19
    3574:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3576:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3578:	9c 8d       	ldd	r25, Y+28	; 0x1c
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	4a ef       	ldi	r20, 0xFA	; 250
    3580:	54 e4       	ldi	r21, 0x44	; 68
    3582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	8d 8b       	std	Y+21, r24	; 0x15
    358c:	9e 8b       	std	Y+22, r25	; 0x16
    358e:	af 8b       	std	Y+23, r26	; 0x17
    3590:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3592:	6d 89       	ldd	r22, Y+21	; 0x15
    3594:	7e 89       	ldd	r23, Y+22	; 0x16
    3596:	8f 89       	ldd	r24, Y+23	; 0x17
    3598:	98 8d       	ldd	r25, Y+24	; 0x18
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	30 e0       	ldi	r19, 0x00	; 0
    359e:	40 e8       	ldi	r20, 0x80	; 128
    35a0:	5f e3       	ldi	r21, 0x3F	; 63
    35a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35a6:	88 23       	and	r24, r24
    35a8:	2c f4       	brge	.+10     	; 0x35b4 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	9c 8b       	std	Y+20, r25	; 0x14
    35b0:	8b 8b       	std	Y+19, r24	; 0x13
    35b2:	3f c0       	rjmp	.+126    	; 0x3632 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    35b4:	6d 89       	ldd	r22, Y+21	; 0x15
    35b6:	7e 89       	ldd	r23, Y+22	; 0x16
    35b8:	8f 89       	ldd	r24, Y+23	; 0x17
    35ba:	98 8d       	ldd	r25, Y+24	; 0x18
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	3f ef       	ldi	r19, 0xFF	; 255
    35c0:	4f e7       	ldi	r20, 0x7F	; 127
    35c2:	57 e4       	ldi	r21, 0x47	; 71
    35c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35c8:	18 16       	cp	r1, r24
    35ca:	4c f5       	brge	.+82     	; 0x361e <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35cc:	69 8d       	ldd	r22, Y+25	; 0x19
    35ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35d4:	20 e0       	ldi	r18, 0x00	; 0
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	40 e2       	ldi	r20, 0x20	; 32
    35da:	51 e4       	ldi	r21, 0x41	; 65
    35dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	bc 01       	movw	r22, r24
    35e6:	cd 01       	movw	r24, r26
    35e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	9c 8b       	std	Y+20, r25	; 0x14
    35f2:	8b 8b       	std	Y+19, r24	; 0x13
    35f4:	0f c0       	rjmp	.+30     	; 0x3614 <LCD_displayCharacter+0x2ac>
    35f6:	88 ec       	ldi	r24, 0xC8	; 200
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	9a 8b       	std	Y+18, r25	; 0x12
    35fc:	89 8b       	std	Y+17, r24	; 0x11
    35fe:	89 89       	ldd	r24, Y+17	; 0x11
    3600:	9a 89       	ldd	r25, Y+18	; 0x12
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	f1 f7       	brne	.-4      	; 0x3602 <LCD_displayCharacter+0x29a>
    3606:	9a 8b       	std	Y+18, r25	; 0x12
    3608:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    360a:	8b 89       	ldd	r24, Y+19	; 0x13
    360c:	9c 89       	ldd	r25, Y+20	; 0x14
    360e:	01 97       	sbiw	r24, 0x01	; 1
    3610:	9c 8b       	std	Y+20, r25	; 0x14
    3612:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3614:	8b 89       	ldd	r24, Y+19	; 0x13
    3616:	9c 89       	ldd	r25, Y+20	; 0x14
    3618:	00 97       	sbiw	r24, 0x00	; 0
    361a:	69 f7       	brne	.-38     	; 0x35f6 <LCD_displayCharacter+0x28e>
    361c:	14 c0       	rjmp	.+40     	; 0x3646 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    361e:	6d 89       	ldd	r22, Y+21	; 0x15
    3620:	7e 89       	ldd	r23, Y+22	; 0x16
    3622:	8f 89       	ldd	r24, Y+23	; 0x17
    3624:	98 8d       	ldd	r25, Y+24	; 0x18
    3626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	9c 8b       	std	Y+20, r25	; 0x14
    3630:	8b 8b       	std	Y+19, r24	; 0x13
    3632:	8b 89       	ldd	r24, Y+19	; 0x13
    3634:	9c 89       	ldd	r25, Y+20	; 0x14
    3636:	98 8b       	std	Y+16, r25	; 0x10
    3638:	8f 87       	std	Y+15, r24	; 0x0f
    363a:	8f 85       	ldd	r24, Y+15	; 0x0f
    363c:	98 89       	ldd	r25, Y+16	; 0x10
    363e:	01 97       	sbiw	r24, 0x01	; 1
    3640:	f1 f7       	brne	.-4      	; 0x363e <LCD_displayCharacter+0x2d6>
    3642:	98 8b       	std	Y+16, r25	; 0x10
    3644:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3646:	82 e0       	ldi	r24, 0x02	; 2
    3648:	60 e0       	ldi	r22, 0x00	; 0
    364a:	40 e0       	ldi	r20, 0x00	; 0
    364c:	0e 94 42 13 	call	0x2684	; 0x2684 <GPIO_writePin>
    3650:	80 e0       	ldi	r24, 0x00	; 0
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	a0 e8       	ldi	r26, 0x80	; 128
    3656:	bf e3       	ldi	r27, 0x3F	; 63
    3658:	8b 87       	std	Y+11, r24	; 0x0b
    365a:	9c 87       	std	Y+12, r25	; 0x0c
    365c:	ad 87       	std	Y+13, r26	; 0x0d
    365e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3660:	6b 85       	ldd	r22, Y+11	; 0x0b
    3662:	7c 85       	ldd	r23, Y+12	; 0x0c
    3664:	8d 85       	ldd	r24, Y+13	; 0x0d
    3666:	9e 85       	ldd	r25, Y+14	; 0x0e
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	4a ef       	ldi	r20, 0xFA	; 250
    366e:	54 e4       	ldi	r21, 0x44	; 68
    3670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	8f 83       	std	Y+7, r24	; 0x07
    367a:	98 87       	std	Y+8, r25	; 0x08
    367c:	a9 87       	std	Y+9, r26	; 0x09
    367e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3680:	6f 81       	ldd	r22, Y+7	; 0x07
    3682:	78 85       	ldd	r23, Y+8	; 0x08
    3684:	89 85       	ldd	r24, Y+9	; 0x09
    3686:	9a 85       	ldd	r25, Y+10	; 0x0a
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	40 e8       	ldi	r20, 0x80	; 128
    368e:	5f e3       	ldi	r21, 0x3F	; 63
    3690:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3694:	88 23       	and	r24, r24
    3696:	2c f4       	brge	.+10     	; 0x36a2 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	9e 83       	std	Y+6, r25	; 0x06
    369e:	8d 83       	std	Y+5, r24	; 0x05
    36a0:	3f c0       	rjmp	.+126    	; 0x3720 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    36a2:	6f 81       	ldd	r22, Y+7	; 0x07
    36a4:	78 85       	ldd	r23, Y+8	; 0x08
    36a6:	89 85       	ldd	r24, Y+9	; 0x09
    36a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	3f ef       	ldi	r19, 0xFF	; 255
    36ae:	4f e7       	ldi	r20, 0x7F	; 127
    36b0:	57 e4       	ldi	r21, 0x47	; 71
    36b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36b6:	18 16       	cp	r1, r24
    36b8:	4c f5       	brge	.+82     	; 0x370c <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    36bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    36be:	8d 85       	ldd	r24, Y+13	; 0x0d
    36c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    36c2:	20 e0       	ldi	r18, 0x00	; 0
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	40 e2       	ldi	r20, 0x20	; 32
    36c8:	51 e4       	ldi	r21, 0x41	; 65
    36ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ce:	dc 01       	movw	r26, r24
    36d0:	cb 01       	movw	r24, r22
    36d2:	bc 01       	movw	r22, r24
    36d4:	cd 01       	movw	r24, r26
    36d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36da:	dc 01       	movw	r26, r24
    36dc:	cb 01       	movw	r24, r22
    36de:	9e 83       	std	Y+6, r25	; 0x06
    36e0:	8d 83       	std	Y+5, r24	; 0x05
    36e2:	0f c0       	rjmp	.+30     	; 0x3702 <LCD_displayCharacter+0x39a>
    36e4:	88 ec       	ldi	r24, 0xC8	; 200
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	9c 83       	std	Y+4, r25	; 0x04
    36ea:	8b 83       	std	Y+3, r24	; 0x03
    36ec:	8b 81       	ldd	r24, Y+3	; 0x03
    36ee:	9c 81       	ldd	r25, Y+4	; 0x04
    36f0:	01 97       	sbiw	r24, 0x01	; 1
    36f2:	f1 f7       	brne	.-4      	; 0x36f0 <LCD_displayCharacter+0x388>
    36f4:	9c 83       	std	Y+4, r25	; 0x04
    36f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36f8:	8d 81       	ldd	r24, Y+5	; 0x05
    36fa:	9e 81       	ldd	r25, Y+6	; 0x06
    36fc:	01 97       	sbiw	r24, 0x01	; 1
    36fe:	9e 83       	std	Y+6, r25	; 0x06
    3700:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3702:	8d 81       	ldd	r24, Y+5	; 0x05
    3704:	9e 81       	ldd	r25, Y+6	; 0x06
    3706:	00 97       	sbiw	r24, 0x00	; 0
    3708:	69 f7       	brne	.-38     	; 0x36e4 <LCD_displayCharacter+0x37c>
    370a:	14 c0       	rjmp	.+40     	; 0x3734 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    370c:	6f 81       	ldd	r22, Y+7	; 0x07
    370e:	78 85       	ldd	r23, Y+8	; 0x08
    3710:	89 85       	ldd	r24, Y+9	; 0x09
    3712:	9a 85       	ldd	r25, Y+10	; 0x0a
    3714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	9e 83       	std	Y+6, r25	; 0x06
    371e:	8d 83       	std	Y+5, r24	; 0x05
    3720:	8d 81       	ldd	r24, Y+5	; 0x05
    3722:	9e 81       	ldd	r25, Y+6	; 0x06
    3724:	9a 83       	std	Y+2, r25	; 0x02
    3726:	89 83       	std	Y+1, r24	; 0x01
    3728:	89 81       	ldd	r24, Y+1	; 0x01
    372a:	9a 81       	ldd	r25, Y+2	; 0x02
    372c:	01 97       	sbiw	r24, 0x01	; 1
    372e:	f1 f7       	brne	.-4      	; 0x372c <LCD_displayCharacter+0x3c4>
    3730:	9a 83       	std	Y+2, r25	; 0x02
    3732:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3734:	e9 96       	adiw	r28, 0x39	; 57
    3736:	0f b6       	in	r0, 0x3f	; 63
    3738:	f8 94       	cli
    373a:	de bf       	out	0x3e, r29	; 62
    373c:	0f be       	out	0x3f, r0	; 63
    373e:	cd bf       	out	0x3d, r28	; 61
    3740:	cf 91       	pop	r28
    3742:	df 91       	pop	r29
    3744:	08 95       	ret

00003746 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3746:	df 93       	push	r29
    3748:	cf 93       	push	r28
    374a:	00 d0       	rcall	.+0      	; 0x374c <LCD_displayString+0x6>
    374c:	0f 92       	push	r0
    374e:	cd b7       	in	r28, 0x3d	; 61
    3750:	de b7       	in	r29, 0x3e	; 62
    3752:	9b 83       	std	Y+3, r25	; 0x03
    3754:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3756:	19 82       	std	Y+1, r1	; 0x01
    3758:	0e c0       	rjmp	.+28     	; 0x3776 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    375a:	89 81       	ldd	r24, Y+1	; 0x01
    375c:	28 2f       	mov	r18, r24
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	8a 81       	ldd	r24, Y+2	; 0x02
    3762:	9b 81       	ldd	r25, Y+3	; 0x03
    3764:	fc 01       	movw	r30, r24
    3766:	e2 0f       	add	r30, r18
    3768:	f3 1f       	adc	r31, r19
    376a:	80 81       	ld	r24, Z
    376c:	0e 94 b4 19 	call	0x3368	; 0x3368 <LCD_displayCharacter>
		i++;
    3770:	89 81       	ldd	r24, Y+1	; 0x01
    3772:	8f 5f       	subi	r24, 0xFF	; 255
    3774:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3776:	89 81       	ldd	r24, Y+1	; 0x01
    3778:	28 2f       	mov	r18, r24
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	8a 81       	ldd	r24, Y+2	; 0x02
    377e:	9b 81       	ldd	r25, Y+3	; 0x03
    3780:	fc 01       	movw	r30, r24
    3782:	e2 0f       	add	r30, r18
    3784:	f3 1f       	adc	r31, r19
    3786:	80 81       	ld	r24, Z
    3788:	88 23       	and	r24, r24
    378a:	39 f7       	brne	.-50     	; 0x375a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    378c:	0f 90       	pop	r0
    378e:	0f 90       	pop	r0
    3790:	0f 90       	pop	r0
    3792:	cf 91       	pop	r28
    3794:	df 91       	pop	r29
    3796:	08 95       	ret

00003798 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3798:	df 93       	push	r29
    379a:	cf 93       	push	r28
    379c:	00 d0       	rcall	.+0      	; 0x379e <LCD_moveCursor+0x6>
    379e:	00 d0       	rcall	.+0      	; 0x37a0 <LCD_moveCursor+0x8>
    37a0:	0f 92       	push	r0
    37a2:	cd b7       	in	r28, 0x3d	; 61
    37a4:	de b7       	in	r29, 0x3e	; 62
    37a6:	8a 83       	std	Y+2, r24	; 0x02
    37a8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    37aa:	8a 81       	ldd	r24, Y+2	; 0x02
    37ac:	28 2f       	mov	r18, r24
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	3d 83       	std	Y+5, r19	; 0x05
    37b2:	2c 83       	std	Y+4, r18	; 0x04
    37b4:	8c 81       	ldd	r24, Y+4	; 0x04
    37b6:	9d 81       	ldd	r25, Y+5	; 0x05
    37b8:	81 30       	cpi	r24, 0x01	; 1
    37ba:	91 05       	cpc	r25, r1
    37bc:	c1 f0       	breq	.+48     	; 0x37ee <LCD_moveCursor+0x56>
    37be:	2c 81       	ldd	r18, Y+4	; 0x04
    37c0:	3d 81       	ldd	r19, Y+5	; 0x05
    37c2:	22 30       	cpi	r18, 0x02	; 2
    37c4:	31 05       	cpc	r19, r1
    37c6:	2c f4       	brge	.+10     	; 0x37d2 <LCD_moveCursor+0x3a>
    37c8:	8c 81       	ldd	r24, Y+4	; 0x04
    37ca:	9d 81       	ldd	r25, Y+5	; 0x05
    37cc:	00 97       	sbiw	r24, 0x00	; 0
    37ce:	61 f0       	breq	.+24     	; 0x37e8 <LCD_moveCursor+0x50>
    37d0:	19 c0       	rjmp	.+50     	; 0x3804 <LCD_moveCursor+0x6c>
    37d2:	2c 81       	ldd	r18, Y+4	; 0x04
    37d4:	3d 81       	ldd	r19, Y+5	; 0x05
    37d6:	22 30       	cpi	r18, 0x02	; 2
    37d8:	31 05       	cpc	r19, r1
    37da:	69 f0       	breq	.+26     	; 0x37f6 <LCD_moveCursor+0x5e>
    37dc:	8c 81       	ldd	r24, Y+4	; 0x04
    37de:	9d 81       	ldd	r25, Y+5	; 0x05
    37e0:	83 30       	cpi	r24, 0x03	; 3
    37e2:	91 05       	cpc	r25, r1
    37e4:	61 f0       	breq	.+24     	; 0x37fe <LCD_moveCursor+0x66>
    37e6:	0e c0       	rjmp	.+28     	; 0x3804 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    37e8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ea:	89 83       	std	Y+1, r24	; 0x01
    37ec:	0b c0       	rjmp	.+22     	; 0x3804 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    37ee:	8b 81       	ldd	r24, Y+3	; 0x03
    37f0:	80 5c       	subi	r24, 0xC0	; 192
    37f2:	89 83       	std	Y+1, r24	; 0x01
    37f4:	07 c0       	rjmp	.+14     	; 0x3804 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    37f6:	8b 81       	ldd	r24, Y+3	; 0x03
    37f8:	80 5f       	subi	r24, 0xF0	; 240
    37fa:	89 83       	std	Y+1, r24	; 0x01
    37fc:	03 c0       	rjmp	.+6      	; 0x3804 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    37fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3800:	80 5b       	subi	r24, 0xB0	; 176
    3802:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3804:	89 81       	ldd	r24, Y+1	; 0x01
    3806:	80 68       	ori	r24, 0x80	; 128
    3808:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <LCD_sendCommand>
}
    380c:	0f 90       	pop	r0
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	cf 91       	pop	r28
    3818:	df 91       	pop	r29
    381a:	08 95       	ret

0000381c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    381c:	df 93       	push	r29
    381e:	cf 93       	push	r28
    3820:	00 d0       	rcall	.+0      	; 0x3822 <LCD_displayStringRowColumn+0x6>
    3822:	00 d0       	rcall	.+0      	; 0x3824 <LCD_displayStringRowColumn+0x8>
    3824:	cd b7       	in	r28, 0x3d	; 61
    3826:	de b7       	in	r29, 0x3e	; 62
    3828:	89 83       	std	Y+1, r24	; 0x01
    382a:	6a 83       	std	Y+2, r22	; 0x02
    382c:	5c 83       	std	Y+4, r21	; 0x04
    382e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3830:	89 81       	ldd	r24, Y+1	; 0x01
    3832:	6a 81       	ldd	r22, Y+2	; 0x02
    3834:	0e 94 cc 1b 	call	0x3798	; 0x3798 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3838:	8b 81       	ldd	r24, Y+3	; 0x03
    383a:	9c 81       	ldd	r25, Y+4	; 0x04
    383c:	0e 94 a3 1b 	call	0x3746	; 0x3746 <LCD_displayString>
}
    3840:	0f 90       	pop	r0
    3842:	0f 90       	pop	r0
    3844:	0f 90       	pop	r0
    3846:	0f 90       	pop	r0
    3848:	cf 91       	pop	r28
    384a:	df 91       	pop	r29
    384c:	08 95       	ret

0000384e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    384e:	df 93       	push	r29
    3850:	cf 93       	push	r28
    3852:	cd b7       	in	r28, 0x3d	; 61
    3854:	de b7       	in	r29, 0x3e	; 62
    3856:	62 97       	sbiw	r28, 0x12	; 18
    3858:	0f b6       	in	r0, 0x3f	; 63
    385a:	f8 94       	cli
    385c:	de bf       	out	0x3e, r29	; 62
    385e:	0f be       	out	0x3f, r0	; 63
    3860:	cd bf       	out	0x3d, r28	; 61
    3862:	9a 8b       	std	Y+18, r25	; 0x12
    3864:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3866:	89 89       	ldd	r24, Y+17	; 0x11
    3868:	9a 89       	ldd	r25, Y+18	; 0x12
    386a:	9e 01       	movw	r18, r28
    386c:	2f 5f       	subi	r18, 0xFF	; 255
    386e:	3f 4f       	sbci	r19, 0xFF	; 255
    3870:	b9 01       	movw	r22, r18
    3872:	4a e0       	ldi	r20, 0x0A	; 10
    3874:	50 e0       	ldi	r21, 0x00	; 0
    3876:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <itoa>
   LCD_displayString(buff); /* Display the string */
    387a:	ce 01       	movw	r24, r28
    387c:	01 96       	adiw	r24, 0x01	; 1
    387e:	0e 94 a3 1b 	call	0x3746	; 0x3746 <LCD_displayString>
}
    3882:	62 96       	adiw	r28, 0x12	; 18
    3884:	0f b6       	in	r0, 0x3f	; 63
    3886:	f8 94       	cli
    3888:	de bf       	out	0x3e, r29	; 62
    388a:	0f be       	out	0x3f, r0	; 63
    388c:	cd bf       	out	0x3d, r28	; 61
    388e:	cf 91       	pop	r28
    3890:	df 91       	pop	r29
    3892:	08 95       	ret

00003894 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3894:	df 93       	push	r29
    3896:	cf 93       	push	r28
    3898:	cd b7       	in	r28, 0x3d	; 61
    389a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <LCD_sendCommand>
}
    38a2:	cf 91       	pop	r28
    38a4:	df 91       	pop	r29
    38a6:	08 95       	ret

000038a8 <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_ConfigType * config_ptr){
    38a8:	df 93       	push	r29
    38aa:	cf 93       	push	r28
    38ac:	00 d0       	rcall	.+0      	; 0x38ae <UART_init+0x6>
    38ae:	00 d0       	rcall	.+0      	; 0x38b0 <UART_init+0x8>
    38b0:	cd b7       	in	r28, 0x3d	; 61
    38b2:	de b7       	in	r29, 0x3e	; 62
    38b4:	9c 83       	std	Y+4, r25	; 0x04
    38b6:	8b 83       	std	Y+3, r24	; 0x03

	uint16 ubrr_value = 0;
    38b8:	1a 82       	std	Y+2, r1	; 0x02
    38ba:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    38bc:	eb e2       	ldi	r30, 0x2B	; 43
    38be:	f0 e0       	ldi	r31, 0x00	; 0
    38c0:	82 e0       	ldi	r24, 0x02	; 2
    38c2:	80 83       	st	Z, r24
	/************************** UCSRB Description **************************
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 is set using ConfigPtr determined according to chosen settings
	 ***********************************************************************/
	UCSRB = (1<<TXEN) | (1<<RXEN);
    38c4:	ea e2       	ldi	r30, 0x2A	; 42
    38c6:	f0 e0       	ldi	r31, 0x00	; 0
    38c8:	88 e1       	ldi	r24, 0x18	; 24
    38ca:	80 83       	st	Z, r24
	UCSRB |= (config_ptr->bit_data&0x04);
    38cc:	aa e2       	ldi	r26, 0x2A	; 42
    38ce:	b0 e0       	ldi	r27, 0x00	; 0
    38d0:	ea e2       	ldi	r30, 0x2A	; 42
    38d2:	f0 e0       	ldi	r31, 0x00	; 0
    38d4:	80 81       	ld	r24, Z
    38d6:	98 2f       	mov	r25, r24
    38d8:	eb 81       	ldd	r30, Y+3	; 0x03
    38da:	fc 81       	ldd	r31, Y+4	; 0x04
    38dc:	82 81       	ldd	r24, Z+2	; 0x02
    38de:	84 70       	andi	r24, 0x04	; 4
    38e0:	89 2b       	or	r24, r25
    38e2:	8c 93       	st	X, r24
	 * UPM1:0  is set using ConfigPtr determined according to chosen settings
	 * USBS is set using ConfigPtr determined according to chosen settings
	 * UCSZ1:0 is set using ConfigPtr determined according to chosen settings
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1) |(config_ptr->stop_bit<<3) | ((config_ptr->parity&0x03)<<4) | ((config_ptr->bit_data&0x03)<<1);
    38e4:	a0 e4       	ldi	r26, 0x40	; 64
    38e6:	b0 e0       	ldi	r27, 0x00	; 0
    38e8:	eb 81       	ldd	r30, Y+3	; 0x03
    38ea:	fc 81       	ldd	r31, Y+4	; 0x04
    38ec:	84 81       	ldd	r24, Z+4	; 0x04
    38ee:	88 2f       	mov	r24, r24
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	88 0f       	add	r24, r24
    38f4:	99 1f       	adc	r25, r25
    38f6:	88 0f       	add	r24, r24
    38f8:	99 1f       	adc	r25, r25
    38fa:	88 0f       	add	r24, r24
    38fc:	99 1f       	adc	r25, r25
    38fe:	28 2f       	mov	r18, r24
    3900:	26 68       	ori	r18, 0x86	; 134
    3902:	eb 81       	ldd	r30, Y+3	; 0x03
    3904:	fc 81       	ldd	r31, Y+4	; 0x04
    3906:	83 81       	ldd	r24, Z+3	; 0x03
    3908:	88 2f       	mov	r24, r24
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	83 70       	andi	r24, 0x03	; 3
    390e:	90 70       	andi	r25, 0x00	; 0
    3910:	82 95       	swap	r24
    3912:	92 95       	swap	r25
    3914:	90 7f       	andi	r25, 0xF0	; 240
    3916:	98 27       	eor	r25, r24
    3918:	80 7f       	andi	r24, 0xF0	; 240
    391a:	98 27       	eor	r25, r24
    391c:	28 2b       	or	r18, r24
    391e:	eb 81       	ldd	r30, Y+3	; 0x03
    3920:	fc 81       	ldd	r31, Y+4	; 0x04
    3922:	82 81       	ldd	r24, Z+2	; 0x02
    3924:	88 2f       	mov	r24, r24
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	83 70       	andi	r24, 0x03	; 3
    392a:	90 70       	andi	r25, 0x00	; 0
    392c:	88 0f       	add	r24, r24
    392e:	99 1f       	adc	r25, r25
    3930:	82 2b       	or	r24, r18
    3932:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)((F_CPU/(8UL*config_ptr->baud_rate))-1);
    3934:	eb 81       	ldd	r30, Y+3	; 0x03
    3936:	fc 81       	ldd	r31, Y+4	; 0x04
    3938:	80 81       	ld	r24, Z
    393a:	91 81       	ldd	r25, Z+1	; 0x01
    393c:	cc 01       	movw	r24, r24
    393e:	a0 e0       	ldi	r26, 0x00	; 0
    3940:	b0 e0       	ldi	r27, 0x00	; 0
    3942:	88 0f       	add	r24, r24
    3944:	99 1f       	adc	r25, r25
    3946:	aa 1f       	adc	r26, r26
    3948:	bb 1f       	adc	r27, r27
    394a:	88 0f       	add	r24, r24
    394c:	99 1f       	adc	r25, r25
    394e:	aa 1f       	adc	r26, r26
    3950:	bb 1f       	adc	r27, r27
    3952:	88 0f       	add	r24, r24
    3954:	99 1f       	adc	r25, r25
    3956:	aa 1f       	adc	r26, r26
    3958:	bb 1f       	adc	r27, r27
    395a:	9c 01       	movw	r18, r24
    395c:	ad 01       	movw	r20, r26
    395e:	80 e0       	ldi	r24, 0x00	; 0
    3960:	92 e1       	ldi	r25, 0x12	; 18
    3962:	aa e7       	ldi	r26, 0x7A	; 122
    3964:	b0 e0       	ldi	r27, 0x00	; 0
    3966:	bc 01       	movw	r22, r24
    3968:	cd 01       	movw	r24, r26
    396a:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <__udivmodsi4>
    396e:	da 01       	movw	r26, r20
    3970:	c9 01       	movw	r24, r18
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	9a 83       	std	Y+2, r25	; 0x02
    3976:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = ubrr_value >> 8;
    3978:	e0 e4       	ldi	r30, 0x40	; 64
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	89 81       	ldd	r24, Y+1	; 0x01
    397e:	9a 81       	ldd	r25, Y+2	; 0x02
    3980:	89 2f       	mov	r24, r25
    3982:	99 27       	eor	r25, r25
    3984:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3986:	e9 e2       	ldi	r30, 0x29	; 41
    3988:	f0 e0       	ldi	r31, 0x00	; 0
    398a:	89 81       	ldd	r24, Y+1	; 0x01
    398c:	80 83       	st	Z, r24

}
    398e:	0f 90       	pop	r0
    3990:	0f 90       	pop	r0
    3992:	0f 90       	pop	r0
    3994:	0f 90       	pop	r0
    3996:	cf 91       	pop	r28
    3998:	df 91       	pop	r29
    399a:	08 95       	ret

0000399c <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(uint8 data){
    399c:	df 93       	push	r29
    399e:	cf 93       	push	r28
    39a0:	0f 92       	push	r0
    39a2:	cd b7       	in	r28, 0x3d	; 61
    39a4:	de b7       	in	r29, 0x3e	; 62
    39a6:	89 83       	std	Y+1, r24	; 0x01
	//wait until the last data is shifted out and the transmit buffer is ready to receive new data.
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    39a8:	eb e2       	ldi	r30, 0x2B	; 43
    39aa:	f0 e0       	ldi	r31, 0x00	; 0
    39ac:	80 81       	ld	r24, Z
    39ae:	88 2f       	mov	r24, r24
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	80 72       	andi	r24, 0x20	; 32
    39b4:	90 70       	andi	r25, 0x00	; 0
    39b6:	00 97       	sbiw	r24, 0x00	; 0
    39b8:	b9 f3       	breq	.-18     	; 0x39a8 <UART_sendByte+0xc>
	/*
	 * put the required data in the transmit buffer (UDR).
	 * it clears UDRE bit.
	 */
	UDR = data;
    39ba:	ec e2       	ldi	r30, 0x2C	; 44
    39bc:	f0 e0       	ldi	r31, 0x00	; 0
    39be:	89 81       	ldd	r24, Y+1	; 0x01
    39c0:	80 83       	st	Z, r24
}
    39c2:	0f 90       	pop	r0
    39c4:	cf 91       	pop	r28
    39c6:	df 91       	pop	r29
    39c8:	08 95       	ret

000039ca <UART_receiveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void){
    39ca:	df 93       	push	r29
    39cc:	cf 93       	push	r28
    39ce:	cd b7       	in	r28, 0x3d	; 61
    39d0:	de b7       	in	r29, 0x3e	; 62
	// Wait until the transmission is complete TXC = 1
	while(BIT_IS_CLEAR(UCSRA,RXC));
    39d2:	eb e2       	ldi	r30, 0x2B	; 43
    39d4:	f0 e0       	ldi	r31, 0x00	; 0
    39d6:	80 81       	ld	r24, Z
    39d8:	88 23       	and	r24, r24
    39da:	dc f7       	brge	.-10     	; 0x39d2 <UART_receiveByte+0x8>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	return UDR;
    39dc:	ec e2       	ldi	r30, 0x2C	; 44
    39de:	f0 e0       	ldi	r31, 0x00	; 0
    39e0:	80 81       	ld	r24, Z
}
    39e2:	cf 91       	pop	r28
    39e4:	df 91       	pop	r29
    39e6:	08 95       	ret

000039e8 <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str){
    39e8:	df 93       	push	r29
    39ea:	cf 93       	push	r28
    39ec:	00 d0       	rcall	.+0      	; 0x39ee <UART_sendString+0x6>
    39ee:	0f 92       	push	r0
    39f0:	cd b7       	in	r28, 0x3d	; 61
    39f2:	de b7       	in	r29, 0x3e	; 62
    39f4:	9b 83       	std	Y+3, r25	; 0x03
    39f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    39f8:	19 82       	std	Y+1, r1	; 0x01
    39fa:	0f c0       	rjmp	.+30     	; 0x3a1a <UART_sendString+0x32>
	while(Str[i]!='\0'){
		// send byte by byte
		UART_sendByte(Str[i++]);
    39fc:	89 81       	ldd	r24, Y+1	; 0x01
    39fe:	28 2f       	mov	r18, r24
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	8a 81       	ldd	r24, Y+2	; 0x02
    3a04:	9b 81       	ldd	r25, Y+3	; 0x03
    3a06:	fc 01       	movw	r30, r24
    3a08:	e2 0f       	add	r30, r18
    3a0a:	f3 1f       	adc	r31, r19
    3a0c:	90 81       	ld	r25, Z
    3a0e:	89 81       	ldd	r24, Y+1	; 0x01
    3a10:	8f 5f       	subi	r24, 0xFF	; 255
    3a12:	89 83       	std	Y+1, r24	; 0x01
    3a14:	89 2f       	mov	r24, r25
    3a16:	0e 94 ce 1c 	call	0x399c	; 0x399c <UART_sendByte>
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str){
	uint8 i =0;
	while(Str[i]!='\0'){
    3a1a:	89 81       	ldd	r24, Y+1	; 0x01
    3a1c:	28 2f       	mov	r18, r24
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	8a 81       	ldd	r24, Y+2	; 0x02
    3a22:	9b 81       	ldd	r25, Y+3	; 0x03
    3a24:	fc 01       	movw	r30, r24
    3a26:	e2 0f       	add	r30, r18
    3a28:	f3 1f       	adc	r31, r19
    3a2a:	80 81       	ld	r24, Z
    3a2c:	88 23       	and	r24, r24
    3a2e:	31 f7       	brne	.-52     	; 0x39fc <UART_sendString+0x14>
		// send byte by byte
		UART_sendByte(Str[i++]);
	}
}
    3a30:	0f 90       	pop	r0
    3a32:	0f 90       	pop	r0
    3a34:	0f 90       	pop	r0
    3a36:	cf 91       	pop	r28
    3a38:	df 91       	pop	r29
    3a3a:	08 95       	ret

00003a3c <UART_receiveString>:

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str){
    3a3c:	0f 93       	push	r16
    3a3e:	1f 93       	push	r17
    3a40:	df 93       	push	r29
    3a42:	cf 93       	push	r28
    3a44:	00 d0       	rcall	.+0      	; 0x3a46 <UART_receiveString+0xa>
    3a46:	0f 92       	push	r0
    3a48:	cd b7       	in	r28, 0x3d	; 61
    3a4a:	de b7       	in	r29, 0x3e	; 62
    3a4c:	9b 83       	std	Y+3, r25	; 0x03
    3a4e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3a50:	19 82       	std	Y+1, r1	; 0x01
	// receive first byte
	Str[i] = UART_receiveByte();
    3a52:	89 81       	ldd	r24, Y+1	; 0x01
    3a54:	28 2f       	mov	r18, r24
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	8a 81       	ldd	r24, Y+2	; 0x02
    3a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a5c:	8c 01       	movw	r16, r24
    3a5e:	02 0f       	add	r16, r18
    3a60:	13 1f       	adc	r17, r19
    3a62:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <UART_receiveByte>
    3a66:	f8 01       	movw	r30, r16
    3a68:	80 83       	st	Z, r24
    3a6a:	0f c0       	rjmp	.+30     	; 0x3a8a <UART_receiveString+0x4e>
	// check if the received byte is not #, if true store the byte in the string
	while(Str[i]!='#'){
		i++;
    3a6c:	89 81       	ldd	r24, Y+1	; 0x01
    3a6e:	8f 5f       	subi	r24, 0xFF	; 255
    3a70:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    3a72:	89 81       	ldd	r24, Y+1	; 0x01
    3a74:	28 2f       	mov	r18, r24
    3a76:	30 e0       	ldi	r19, 0x00	; 0
    3a78:	8a 81       	ldd	r24, Y+2	; 0x02
    3a7a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a7c:	8c 01       	movw	r16, r24
    3a7e:	02 0f       	add	r16, r18
    3a80:	13 1f       	adc	r17, r19
    3a82:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <UART_receiveByte>
    3a86:	f8 01       	movw	r30, r16
    3a88:	80 83       	st	Z, r24
void UART_receiveString(uint8 *Str){
	uint8 i = 0;
	// receive first byte
	Str[i] = UART_receiveByte();
	// check if the received byte is not #, if true store the byte in the string
	while(Str[i]!='#'){
    3a8a:	89 81       	ldd	r24, Y+1	; 0x01
    3a8c:	28 2f       	mov	r18, r24
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	8a 81       	ldd	r24, Y+2	; 0x02
    3a92:	9b 81       	ldd	r25, Y+3	; 0x03
    3a94:	fc 01       	movw	r30, r24
    3a96:	e2 0f       	add	r30, r18
    3a98:	f3 1f       	adc	r31, r19
    3a9a:	80 81       	ld	r24, Z
    3a9c:	83 32       	cpi	r24, 0x23	; 35
    3a9e:	31 f7       	brne	.-52     	; 0x3a6c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}
	// after receiving the string add null instead of # symbol
	Str[i] = '\0';
    3aa0:	89 81       	ldd	r24, Y+1	; 0x01
    3aa2:	28 2f       	mov	r18, r24
    3aa4:	30 e0       	ldi	r19, 0x00	; 0
    3aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa8:	9b 81       	ldd	r25, Y+3	; 0x03
    3aaa:	fc 01       	movw	r30, r24
    3aac:	e2 0f       	add	r30, r18
    3aae:	f3 1f       	adc	r31, r19
    3ab0:	10 82       	st	Z, r1
}
    3ab2:	0f 90       	pop	r0
    3ab4:	0f 90       	pop	r0
    3ab6:	0f 90       	pop	r0
    3ab8:	cf 91       	pop	r28
    3aba:	df 91       	pop	r29
    3abc:	1f 91       	pop	r17
    3abe:	0f 91       	pop	r16
    3ac0:	08 95       	ret

00003ac2 <__udivmodsi4>:
    3ac2:	a1 e2       	ldi	r26, 0x21	; 33
    3ac4:	1a 2e       	mov	r1, r26
    3ac6:	aa 1b       	sub	r26, r26
    3ac8:	bb 1b       	sub	r27, r27
    3aca:	fd 01       	movw	r30, r26
    3acc:	0d c0       	rjmp	.+26     	; 0x3ae8 <__udivmodsi4_ep>

00003ace <__udivmodsi4_loop>:
    3ace:	aa 1f       	adc	r26, r26
    3ad0:	bb 1f       	adc	r27, r27
    3ad2:	ee 1f       	adc	r30, r30
    3ad4:	ff 1f       	adc	r31, r31
    3ad6:	a2 17       	cp	r26, r18
    3ad8:	b3 07       	cpc	r27, r19
    3ada:	e4 07       	cpc	r30, r20
    3adc:	f5 07       	cpc	r31, r21
    3ade:	20 f0       	brcs	.+8      	; 0x3ae8 <__udivmodsi4_ep>
    3ae0:	a2 1b       	sub	r26, r18
    3ae2:	b3 0b       	sbc	r27, r19
    3ae4:	e4 0b       	sbc	r30, r20
    3ae6:	f5 0b       	sbc	r31, r21

00003ae8 <__udivmodsi4_ep>:
    3ae8:	66 1f       	adc	r22, r22
    3aea:	77 1f       	adc	r23, r23
    3aec:	88 1f       	adc	r24, r24
    3aee:	99 1f       	adc	r25, r25
    3af0:	1a 94       	dec	r1
    3af2:	69 f7       	brne	.-38     	; 0x3ace <__udivmodsi4_loop>
    3af4:	60 95       	com	r22
    3af6:	70 95       	com	r23
    3af8:	80 95       	com	r24
    3afa:	90 95       	com	r25
    3afc:	9b 01       	movw	r18, r22
    3afe:	ac 01       	movw	r20, r24
    3b00:	bd 01       	movw	r22, r26
    3b02:	cf 01       	movw	r24, r30
    3b04:	08 95       	ret

00003b06 <__prologue_saves__>:
    3b06:	2f 92       	push	r2
    3b08:	3f 92       	push	r3
    3b0a:	4f 92       	push	r4
    3b0c:	5f 92       	push	r5
    3b0e:	6f 92       	push	r6
    3b10:	7f 92       	push	r7
    3b12:	8f 92       	push	r8
    3b14:	9f 92       	push	r9
    3b16:	af 92       	push	r10
    3b18:	bf 92       	push	r11
    3b1a:	cf 92       	push	r12
    3b1c:	df 92       	push	r13
    3b1e:	ef 92       	push	r14
    3b20:	ff 92       	push	r15
    3b22:	0f 93       	push	r16
    3b24:	1f 93       	push	r17
    3b26:	cf 93       	push	r28
    3b28:	df 93       	push	r29
    3b2a:	cd b7       	in	r28, 0x3d	; 61
    3b2c:	de b7       	in	r29, 0x3e	; 62
    3b2e:	ca 1b       	sub	r28, r26
    3b30:	db 0b       	sbc	r29, r27
    3b32:	0f b6       	in	r0, 0x3f	; 63
    3b34:	f8 94       	cli
    3b36:	de bf       	out	0x3e, r29	; 62
    3b38:	0f be       	out	0x3f, r0	; 63
    3b3a:	cd bf       	out	0x3d, r28	; 61
    3b3c:	09 94       	ijmp

00003b3e <__epilogue_restores__>:
    3b3e:	2a 88       	ldd	r2, Y+18	; 0x12
    3b40:	39 88       	ldd	r3, Y+17	; 0x11
    3b42:	48 88       	ldd	r4, Y+16	; 0x10
    3b44:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b46:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b48:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b50:	b9 84       	ldd	r11, Y+9	; 0x09
    3b52:	c8 84       	ldd	r12, Y+8	; 0x08
    3b54:	df 80       	ldd	r13, Y+7	; 0x07
    3b56:	ee 80       	ldd	r14, Y+6	; 0x06
    3b58:	fd 80       	ldd	r15, Y+5	; 0x05
    3b5a:	0c 81       	ldd	r16, Y+4	; 0x04
    3b5c:	1b 81       	ldd	r17, Y+3	; 0x03
    3b5e:	aa 81       	ldd	r26, Y+2	; 0x02
    3b60:	b9 81       	ldd	r27, Y+1	; 0x01
    3b62:	ce 0f       	add	r28, r30
    3b64:	d1 1d       	adc	r29, r1
    3b66:	0f b6       	in	r0, 0x3f	; 63
    3b68:	f8 94       	cli
    3b6a:	de bf       	out	0x3e, r29	; 62
    3b6c:	0f be       	out	0x3f, r0	; 63
    3b6e:	cd bf       	out	0x3d, r28	; 61
    3b70:	ed 01       	movw	r28, r26
    3b72:	08 95       	ret

00003b74 <itoa>:
    3b74:	fb 01       	movw	r30, r22
    3b76:	9f 01       	movw	r18, r30
    3b78:	e8 94       	clt
    3b7a:	42 30       	cpi	r20, 0x02	; 2
    3b7c:	c4 f0       	brlt	.+48     	; 0x3bae <itoa+0x3a>
    3b7e:	45 32       	cpi	r20, 0x25	; 37
    3b80:	b4 f4       	brge	.+44     	; 0x3bae <itoa+0x3a>
    3b82:	4a 30       	cpi	r20, 0x0A	; 10
    3b84:	29 f4       	brne	.+10     	; 0x3b90 <itoa+0x1c>
    3b86:	97 fb       	bst	r25, 7
    3b88:	1e f4       	brtc	.+6      	; 0x3b90 <itoa+0x1c>
    3b8a:	90 95       	com	r25
    3b8c:	81 95       	neg	r24
    3b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b90:	64 2f       	mov	r22, r20
    3b92:	77 27       	eor	r23, r23
    3b94:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <__udivmodhi4>
    3b98:	80 5d       	subi	r24, 0xD0	; 208
    3b9a:	8a 33       	cpi	r24, 0x3A	; 58
    3b9c:	0c f0       	brlt	.+2      	; 0x3ba0 <itoa+0x2c>
    3b9e:	89 5d       	subi	r24, 0xD9	; 217
    3ba0:	81 93       	st	Z+, r24
    3ba2:	cb 01       	movw	r24, r22
    3ba4:	00 97       	sbiw	r24, 0x00	; 0
    3ba6:	a1 f7       	brne	.-24     	; 0x3b90 <itoa+0x1c>
    3ba8:	16 f4       	brtc	.+4      	; 0x3bae <itoa+0x3a>
    3baa:	5d e2       	ldi	r21, 0x2D	; 45
    3bac:	51 93       	st	Z+, r21
    3bae:	10 82       	st	Z, r1
    3bb0:	c9 01       	movw	r24, r18
    3bb2:	0c 94 db 1d 	jmp	0x3bb6	; 0x3bb6 <strrev>

00003bb6 <strrev>:
    3bb6:	dc 01       	movw	r26, r24
    3bb8:	fc 01       	movw	r30, r24
    3bba:	67 2f       	mov	r22, r23
    3bbc:	71 91       	ld	r23, Z+
    3bbe:	77 23       	and	r23, r23
    3bc0:	e1 f7       	brne	.-8      	; 0x3bba <strrev+0x4>
    3bc2:	32 97       	sbiw	r30, 0x02	; 2
    3bc4:	04 c0       	rjmp	.+8      	; 0x3bce <strrev+0x18>
    3bc6:	7c 91       	ld	r23, X
    3bc8:	6d 93       	st	X+, r22
    3bca:	70 83       	st	Z, r23
    3bcc:	62 91       	ld	r22, -Z
    3bce:	ae 17       	cp	r26, r30
    3bd0:	bf 07       	cpc	r27, r31
    3bd2:	c8 f3       	brcs	.-14     	; 0x3bc6 <strrev+0x10>
    3bd4:	08 95       	ret

00003bd6 <__udivmodhi4>:
    3bd6:	aa 1b       	sub	r26, r26
    3bd8:	bb 1b       	sub	r27, r27
    3bda:	51 e1       	ldi	r21, 0x11	; 17
    3bdc:	07 c0       	rjmp	.+14     	; 0x3bec <__udivmodhi4_ep>

00003bde <__udivmodhi4_loop>:
    3bde:	aa 1f       	adc	r26, r26
    3be0:	bb 1f       	adc	r27, r27
    3be2:	a6 17       	cp	r26, r22
    3be4:	b7 07       	cpc	r27, r23
    3be6:	10 f0       	brcs	.+4      	; 0x3bec <__udivmodhi4_ep>
    3be8:	a6 1b       	sub	r26, r22
    3bea:	b7 0b       	sbc	r27, r23

00003bec <__udivmodhi4_ep>:
    3bec:	88 1f       	adc	r24, r24
    3bee:	99 1f       	adc	r25, r25
    3bf0:	5a 95       	dec	r21
    3bf2:	a9 f7       	brne	.-22     	; 0x3bde <__udivmodhi4_loop>
    3bf4:	80 95       	com	r24
    3bf6:	90 95       	com	r25
    3bf8:	bc 01       	movw	r22, r24
    3bfa:	cd 01       	movw	r24, r26
    3bfc:	08 95       	ret

00003bfe <_exit>:
    3bfe:	f8 94       	cli

00003c00 <__stop_program>:
    3c00:	ff cf       	rjmp	.-2      	; 0x3c00 <__stop_program>
